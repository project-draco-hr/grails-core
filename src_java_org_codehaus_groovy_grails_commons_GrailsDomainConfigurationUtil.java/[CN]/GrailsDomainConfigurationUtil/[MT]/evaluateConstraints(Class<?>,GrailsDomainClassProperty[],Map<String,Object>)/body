{
  boolean javaEntity=theClass.isAnnotationPresent(Entity.class);
  LinkedList<?> classChain=getSuperClassChain(theClass);
  Class<?> clazz;
  ConstrainedPropertyBuilder delegate=new ConstrainedPropertyBuilder(theClass);
  for (  Object aClassChain : classChain) {
    clazz=(Class<?>)aClassChain;
    Closure c=(Closure)GrailsClassUtils.getStaticPropertyValue(clazz,PROPERTY_NAME);
    if (c == null) {
      c=getConstraintsFromScript(theClass);
    }
    if (c != null) {
      c.setDelegate(delegate);
      c.call();
    }
 else {
      LOG.debug("User-defined constraints not found on class [" + clazz + "], applying default constraints");
    }
  }
  Map<String,ConstrainedProperty> constrainedProperties=delegate.getConstrainedProperties();
  if (properties != null && !(constrainedProperties.isEmpty() && javaEntity)) {
    boolean hasHibernate=isHibernatePresent();
    boolean isNotInsertable=false;
    for (    GrailsDomainClassProperty p : properties) {
      if (hasHibernate) {
        isNotInsertable=HibernateHelper.checkInsertabilityAndDrivedHibernateProperties(theClass,constrainedProperties,isNotInsertable,p);
      }
      final String propertyName=p.getName();
      ConstrainedProperty cp=constrainedProperties.get(propertyName);
      if (cp == null) {
        cp=new ConstrainedProperty(p.getDomainClass().getClazz(),propertyName,p.getType());
        cp.setOrder(constrainedProperties.size() + 1);
        constrainedProperties.put(propertyName,cp);
      }
      applyDefaultConstraints(propertyName,p,cp,defaultConstraints,delegate.getSharedConstraint(propertyName),isNotInsertable);
    }
  }
  return constrainedProperties;
}
