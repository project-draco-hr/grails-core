{
  JSONWriter writer=json.getWriter();
  Class clazz=value.getClass();
  GrailsDomainClass domainClass=ConverterUtil.getDomainClass(clazz.getName());
  BeanWrapper beanWrapper=new BeanWrapperImpl(value);
  writer.object();
  writer.key("class").value(domainClass.getName());
  GrailsDomainClassProperty id=domainClass.getIdentifier();
  Object idValue=extractValue(value,id);
  json.property("id",idValue != null ? String.valueOf(idValue) : null);
  if (isIncludeVersion()) {
    GrailsDomainClassProperty versionProperty=domainClass.getVersion();
    Object version=extractValue(value,versionProperty);
    json.property("version",version != null ? String.valueOf(version) : null);
  }
  GrailsDomainClassProperty[] properties=domainClass.getPersistentProperties();
  for (  GrailsDomainClassProperty property : properties) {
    writer.key(property.getName());
    if (!property.isAssociation()) {
      Object val=beanWrapper.getPropertyValue(property.getName());
      json.convertAnother(val);
    }
 else {
      Object referenceObject=beanWrapper.getPropertyValue(property.getName());
      if (isRenderDomainClassRelations()) {
        if (referenceObject == null) {
          writer.value(null);
        }
 else {
          if (referenceObject instanceof AbstractPersistentCollection) {
            AbstractPersistentCollection acol=(AbstractPersistentCollection)referenceObject;
            acol.forceInitialization();
            if (referenceObject instanceof SortedMap) {
              referenceObject=new TreeMap((SortedMap)referenceObject);
            }
 else             if (referenceObject instanceof SortedSet) {
              referenceObject=new TreeSet((SortedSet)referenceObject);
            }
 else             if (referenceObject instanceof Set) {
              referenceObject=new HashSet((Set)referenceObject);
            }
 else             if (referenceObject instanceof Map) {
              referenceObject=new HashMap((Map)referenceObject);
            }
 else {
              referenceObject=new ArrayList((Collection)referenceObject);
            }
          }
 else           if (!Hibernate.isInitialized(referenceObject)) {
            Hibernate.initialize(referenceObject);
          }
          json.convertAnother(referenceObject);
        }
      }
 else {
        if (referenceObject == null) {
          json.value(null);
        }
 else {
          GrailsDomainClass referencedDomainClass=property.getReferencedDomainClass();
          if (property.isOneToOne() || property.isManyToOne() || property.isEmbedded()) {
            if (GrailsClassUtils.isJdk5Enum(property.getType())) {
              json.convertAnother(referenceObject);
            }
 else {
              asShortObject(referenceObject,json,referencedDomainClass.getIdentifier(),referencedDomainClass);
            }
          }
 else {
            GrailsDomainClassProperty referencedIdProperty=referencedDomainClass.getIdentifier();
            String refPropertyName=referencedDomainClass.getPropertyName();
            if (referenceObject instanceof Collection) {
              Collection o=(Collection)referenceObject;
              writer.array();
              for (              Object el : o) {
                asShortObject(el,json,referencedIdProperty,referencedDomainClass);
              }
              writer.endArray();
            }
 else             if (referenceObject instanceof Map) {
              Map<Object,Object> map=(Map<Object,Object>)referenceObject;
              for (              Map.Entry<Object,Object> entry : map.entrySet()) {
                String key=String.valueOf(entry.getKey());
                Object o=entry.getValue();
                writer.object();
                writer.key(key);
                asShortObject(o,json,referencedIdProperty,referencedDomainClass);
                writer.endObject();
              }
            }
          }
        }
      }
    }
  }
  writer.endObject();
}
