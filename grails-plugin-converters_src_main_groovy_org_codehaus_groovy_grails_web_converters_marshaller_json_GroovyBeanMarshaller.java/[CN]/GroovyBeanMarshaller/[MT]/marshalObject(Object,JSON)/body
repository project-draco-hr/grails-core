{
  JSONWriter writer=json.getWriter();
  Class<? extends Object> clazz=o.getClass();
  List<String> excludes=json.getExcludes(clazz);
  List<String> includes=json.getIncludes(clazz);
  IncludeExcludeSupport<String> includeExcludeSupport=new IncludeExcludeSupport<String>();
  try {
    writer.object();
    for (    PropertyDescriptor property : BeanUtils.getPropertyDescriptors(clazz)) {
      Method readMethod=property.getReadMethod();
      String name=property.getName();
      if (!shouldInclude(includeExcludeSupport,includes,excludes,o,name))       continue;
      if (readMethod != null && !(name.equals("metaClass")) && !(name.equals("class"))) {
        if (readMethod.getAnnotation(PersistenceMethod.class) != null)         continue;
        if (readMethod.getAnnotation(ControllerMethod.class) != null)         continue;
        Object value=readMethod.invoke(o,(Object[])null);
        writer.key(name);
        json.convertAnother(value);
      }
    }
    for (    Field field : clazz.getDeclaredFields()) {
      int modifiers=field.getModifiers();
      if (Modifier.isPublic(modifiers) && !(Modifier.isStatic(modifiers) || Modifier.isTransient(modifiers))) {
        String name=field.getName();
        if (!shouldInclude(includeExcludeSupport,includes,excludes,o,name))         continue;
        writer.key(name);
        json.convertAnother(field.get(o));
      }
    }
    writer.endObject();
  }
 catch (  ConverterException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw new ConverterException("Error converting Bean with class " + clazz.getName(),e);
  }
}
