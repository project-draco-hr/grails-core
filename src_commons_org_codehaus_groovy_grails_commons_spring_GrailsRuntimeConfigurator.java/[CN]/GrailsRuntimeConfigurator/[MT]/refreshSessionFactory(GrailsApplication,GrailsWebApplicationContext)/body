{
  RuntimeSpringConfiguration springConfig=new DefaultRuntimeSpringConfiguration();
  BeanConfiguration sessionFactoryBean=springConfig.createSingletonBean(ConfigurableLocalSessionFactoryBean.class).addProperty("grailsApplication",new RuntimeBeanReference(GrailsApplication.APPLICATION_ID,true)).addProperty("classLoader",new RuntimeBeanReference(CLASS_LOADER_BEAN)).addProperty("dataSource",new RuntimeBeanReference(DATA_SOURCE_BEAN,parentDataSource)).addProperty("hibernateProperties",new RuntimeBeanReference(HIBERNATE_PROPERTIES_BEAN));
  GrailsDataSource ds=app.getGrailsDataSource();
  if (ds != null && ds.getConfigurationClass() != null) {
    sessionFactoryBean.addProperty("configClass",ds.getConfigurationClass());
  }
  if (loadExternalPersistenceConfig) {
    URL hibernateConfig=application.getClassLoader().getResource("hibernate.cfg.xml");
    if (hibernateConfig != null) {
      sessionFactoryBean.addProperty("configLocation",new ClassPathResource("hibernate.cfg.xml"));
    }
  }
  SessionFactory sf=(SessionFactory)context.getBean(SESSION_FACTORY_BEAN);
  context.registerBeanDefinition(SESSION_FACTORY_BEAN,sessionFactoryBean.getBeanDefinition());
  GrailsDomainConfigurationUtil.configureDynamicMethods(sf,app);
  if (context.containsBean(TRANSACTION_MANAGER_BEAN)) {
    ((HibernateTransactionManager)context.getBean(TRANSACTION_MANAGER_BEAN)).setSessionFactory(sf);
  }
  if (context.containsBean(OPEN_SESSION_IN_VIEW_INTERCEPTOR_BEAN)) {
    ((OpenSessionInViewInterceptor)context.getBean(OPEN_SESSION_IN_VIEW_INTERCEPTOR_BEAN)).setSessionFactory(sf);
  }
  String[] validatorBeanNames=context.getBeanDefinitionNames(Validator.class);
  for (int i=0; i < validatorBeanNames.length; i++) {
    GrailsDomainClassValidator validator=(GrailsDomainClassValidator)context.getBean(validatorBeanNames[i]);
    validator.setSessionFactory(sf);
  }
  Map scaffoldDomains=context.getBeansOfType(ScaffoldDomain.class);
  for (Iterator i=scaffoldDomains.values().iterator(); i.hasNext(); ) {
    ScaffoldDomain sd=(ScaffoldDomain)i.next();
    sd.setSessionFactory(sf);
  }
}
