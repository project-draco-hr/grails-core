{
  return (ModelAndView)new ResponseInstructionHandler(){
    protected void handleApplicationView(    ApplicationView view) throws Exception {
      Map model=new HashMap(view.getModel());
      argumentHandler.exposeFlowExecutionContext(responseInstruction.getFlowExecutionKey(),responseInstruction.getFlowExecutionContext(),model);
      final String viewName=view.getViewName();
      if (viewName.startsWith("/"))       setResult(new ModelAndView(viewName,model));
 else       setResult(new ModelAndView(controllerActionURI + viewName,model));
    }
    protected void handleFlowDefinitionRedirect(    FlowDefinitionRedirect redirect) throws Exception {
      if (LOG.isDebugEnabled())       LOG.debug("Flow definition redirect issued to flow with id " + redirect.getFlowDefinitionId());
      String flowUrl=argumentHandler.createFlowDefinitionUrl(redirect,context);
      setResult(new ModelAndView(new RedirectView(flowUrl)));
    }
    protected void handleFlowExecutionRedirect(    FlowExecutionRedirect redirect) throws Exception {
      if (LOG.isDebugEnabled())       LOG.debug("Flow execution redirect issued " + redirect);
      String flowExecutionUrl=argumentHandler.createFlowExecutionUrl(responseInstruction.getFlowExecutionKey(),responseInstruction.getFlowExecutionContext(),context);
      setResult(new ModelAndView(new RedirectView(flowExecutionUrl)));
    }
    protected void handleExternalRedirect(    ExternalRedirect redirect) throws Exception {
      if (LOG.isDebugEnabled())       LOG.debug("External redirect issued from flow with URL " + redirect.getUrl());
      String externalUrl=argumentHandler.createExternalUrl(redirect,responseInstruction.getFlowExecutionKey(),context);
      setResult(new ModelAndView(new RedirectView(externalUrl)));
    }
    protected void handleNull() throws Exception {
      setResult(null);
    }
  }
.handleQuietly(responseInstruction).getResult();
}
