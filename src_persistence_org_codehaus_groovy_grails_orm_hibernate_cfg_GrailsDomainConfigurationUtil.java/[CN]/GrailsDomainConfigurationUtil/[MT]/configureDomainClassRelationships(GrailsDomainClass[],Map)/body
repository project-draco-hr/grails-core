{
  for (int i=0; i < domainClasses.length; i++) {
    if (!domainClasses[i].isRoot()) {
      Class superClass=domainClasses[i].getClazz().getSuperclass();
      while (!superClass.equals(Object.class) && !superClass.equals(GroovyObject.class)) {
        GrailsDomainClass gdc=(GrailsDomainClass)domainMap.get(superClass.getName());
        if (gdc == null || gdc.getSubClasses() == null)         break;
        gdc.getSubClasses().add(domainClasses[i]);
        superClass=superClass.getSuperclass();
      }
    }
    GrailsDomainClassProperty[] props=domainClasses[i].getPersistantProperties();
    for (int j=0; j < props.length; j++) {
      if (props[j].isAssociation()) {
        GrailsDomainClassProperty prop=props[j];
        GrailsDomainClass referencedGrailsDomainClass=(GrailsDomainClass)domainMap.get(props[j].getReferencedPropertyType().getName());
        prop.setReferencedDomainClass(referencedGrailsDomainClass);
      }
    }
  }
  for (int i=0; i < domainClasses.length; i++) {
    GrailsDomainClassProperty[] props=domainClasses[i].getPersistantProperties();
    for (int j=0; j < props.length; j++) {
      if (props[j].isAssociation()) {
        GrailsDomainClassProperty prop=props[j];
        GrailsDomainClass referenced=prop.getReferencedDomainClass();
        if (referenced != null) {
          GrailsDomainClassProperty[] referencedProperties=referenced.getPersistantProperties();
          for (int k=0; k < referencedProperties.length; k++) {
            if (prop.equals(referencedProperties[k]))             continue;
            if (domainClasses[i].getClazz().equals(referencedProperties[k].getReferencedPropertyType())) {
              prop.setOtherSide(referencedProperties[k]);
              break;
            }
          }
        }
      }
    }
  }
}
