{
  if (arguments.length == 0)   throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  GrailsWebRequest webRequest=(GrailsWebRequest)RequestContextHolder.currentRequestAttributes();
  GrailsApplication application=webRequest.getAttributes().getGrailsApplication();
  HttpServletRequest request=webRequest.getCurrentRequest();
  HttpServletResponse response=webRequest.getCurrentResponse();
  boolean renderView=true;
  GroovyObject controller=(GroovyObject)target;
  if ((arguments[0] instanceof String) || (arguments[0] instanceof GString)) {
    setContentType(response,TEXT_HTML,DEFAULT_ENCODING,true);
    String text=arguments[0].toString();
    renderView=renderText(text,response);
  }
 else   if (arguments[0] instanceof Closure) {
    setContentType(response,TEXT_HTML,DEFAULT_ENCODING,true);
    Closure closure=(Closure)arguments[arguments.length - 1];
    renderView=renderMarkup(closure,response);
  }
 else   if (arguments[0] instanceof Map) {
    Map argMap=(Map)arguments[0];
    Writer out;
    if (argMap.containsKey(ARGUMENT_CONTENT_TYPE) && argMap.containsKey(ARGUMENT_ENCODING)) {
      String contentType=argMap.get(ARGUMENT_CONTENT_TYPE).toString();
      String encoding=argMap.get(ARGUMENT_ENCODING).toString();
      setContentType(response,contentType,encoding);
      out=GSPResponseWriter.getInstance(response,BUFFER_SIZE);
    }
 else     if (argMap.containsKey(ARGUMENT_CONTENT_TYPE)) {
      setContentType(response,argMap.get(ARGUMENT_CONTENT_TYPE).toString(),DEFAULT_ENCODING);
      out=GSPResponseWriter.getInstance(response,BUFFER_SIZE);
    }
 else {
      setContentType(response,TEXT_HTML,DEFAULT_ENCODING,true);
      out=GSPResponseWriter.getInstance(response,BUFFER_SIZE);
    }
    webRequest.setOut(out);
    if (arguments[arguments.length - 1] instanceof Closure) {
      Closure callable=(Closure)arguments[arguments.length - 1];
      if (BUILDER_TYPE_RICO.equals(argMap.get(ARGUMENT_BUILDER))) {
        renderView=renderRico(callable,response);
      }
 else       if (BUILDER_TYPE_JSON.equals(argMap.get(ARGUMENT_BUILDER)) || isJSONResponse(response)) {
        renderView=renderJSON(callable,response);
      }
 else {
        renderView=renderMarkup(callable,response);
      }
    }
 else     if (arguments[arguments.length - 1] instanceof String) {
      String text=(String)arguments[arguments.length - 1];
      renderView=renderText(text,out);
    }
 else     if (argMap.containsKey(ARGUMENT_TEXT)) {
      String text=argMap.get(ARGUMENT_TEXT).toString();
      renderView=renderText(text,out);
    }
 else     if (argMap.containsKey(ARGUMENT_VIEW)) {
      String viewName=argMap.get(ARGUMENT_VIEW).toString();
      Object modelObject=argMap.get(ARGUMENT_MODEL);
      renderView(viewName,modelObject,target,webRequest,application,controller);
    }
 else     if (argMap.containsKey(ARGUMENT_TEMPLATE)) {
      String templateName=argMap.get(ARGUMENT_TEMPLATE).toString();
      String var=(String)argMap.get(ARGUMENT_VAR);
      GrailsApplicationAttributes attrs=(GrailsApplicationAttributes)controller.getProperty(ControllerDynamicMethods.GRAILS_ATTRIBUTES);
      String templateUri=attrs.getTemplateUri(templateName,request);
      GroovyPagesTemplateEngine engine=attrs.getPagesTemplateEngine();
      try {
        Template t=engine.createTemplate(templateUri);
        if (t == null) {
          throw new ControllerExecutionException("Unable to load template for uri [" + templateUri + "]. Template not found.");
        }
        Map binding=new HashMap();
        if (argMap.containsKey(ARGUMENT_BEAN)) {
          Object bean=argMap.get(ARGUMENT_BEAN);
          renderTemplateForBean(t,binding,bean,var,out);
        }
 else         if (argMap.containsKey(ARGUMENT_COLLECTION)) {
          Object colObject=argMap.get(ARGUMENT_COLLECTION);
          renderTemplateForCollection(t,binding,colObject,var,out);
        }
 else         if (argMap.containsKey(ARGUMENT_MODEL)) {
          Object modelObject=argMap.get(ARGUMENT_MODEL);
          renderTemplateForModel(t,modelObject,target,out);
        }
 else {
          Writable w=t.make(new BeanMap(target));
          w.writeTo(out);
        }
        renderView=false;
      }
 catch (      GroovyRuntimeException gre) {
        throw new ControllerExecutionException("Error rendering template [" + templateName + "]: "+ gre.getMessage(),gre);
      }
catch (      IOException ioex) {
        throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ ioex.getMessage(),ioex);
      }
    }
 else {
      Object object=arguments[0];
      renderView=renderObject(object,out);
    }
    try {
      if (!renderView) {
        out.flush();
      }
    }
 catch (    IOException e) {
      throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ e.getMessage(),e);
    }
  }
 else {
    throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  }
  webRequest.setRenderView(renderView);
  return null;
}
