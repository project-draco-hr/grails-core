{
  if (arguments.length == 0) {
    throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  }
  GrailsWebRequest webRequest=(GrailsWebRequest)RequestContextHolder.currentRequestAttributes();
  HttpServletResponse response=webRequest.getCurrentResponse();
  boolean renderView=true;
  GroovyObject controller=(GroovyObject)target;
  if (arguments[0] instanceof CharSequence) {
    setContentType(response,TEXT_HTML,DEFAULT_ENCODING,true);
    CharSequence text=(CharSequence)arguments[0];
    renderView=renderText(text,response);
  }
 else   if (arguments[0] instanceof Closure) {
    setContentType(response,TEXT_HTML,gspEncoding,true);
    Closure closure=(Closure)arguments[arguments.length - 1];
    renderView=renderMarkup(closure,response);
  }
 else   if (arguments[0] instanceof Map) {
    Map argMap=(Map)arguments[0];
    boolean hasContentType=argMap.containsKey(ARGUMENT_CONTENT_TYPE);
    Writer out=null;
    if (hasContentType) {
      out=getWriterForConfiguredContentType(response,argMap,hasContentType);
      webRequest.setOut(out);
    }
    if (argMap.containsKey(ARGUMENT_LAYOUT)) {
      webRequest.getCurrentRequest().setAttribute(GrailsLayoutDecoratorMapper.LAYOUT_ATTRIBUTE,argMap.get(ARGUMENT_LAYOUT));
    }
    boolean statusSet=false;
    if (argMap.containsKey(ARGUMENT_STATUS)) {
      Object statusObj=argMap.get(ARGUMENT_STATUS);
      if (statusObj != null) {
        try {
          response.setStatus(Integer.parseInt(statusObj.toString()));
          statusSet=true;
        }
 catch (        NumberFormatException e) {
          throw new ControllerExecutionException("Argument [status] of method [render] must be a valid integer.");
        }
      }
    }
    if (arguments[arguments.length - 1] instanceof Closure) {
      Closure callable=(Closure)arguments[arguments.length - 1];
      if (BUILDER_TYPE_JSON.equals(argMap.get(ARGUMENT_BUILDER)) || isJSONResponse(response)) {
        renderView=renderJSON(callable,response);
      }
 else {
        renderView=renderMarkup(callable,response);
      }
    }
 else     if (arguments[arguments.length - 1] instanceof CharSequence) {
      if (out == null) {
        out=getWriterForConfiguredContentType(response,argMap,hasContentType);
        webRequest.setOut(out);
      }
      CharSequence text=(CharSequence)arguments[arguments.length - 1];
      renderView=renderText(text,out);
    }
 else     if (argMap.containsKey(ARGUMENT_TEXT)) {
      if (out == null) {
        out=getWriterForConfiguredContentType(response,argMap,hasContentType);
        webRequest.setOut(out);
      }
      Object textArg=argMap.get(ARGUMENT_TEXT);
      CharSequence text=(textArg instanceof CharSequence) ? ((CharSequence)textArg) : textArg.toString();
      renderView=renderText(text,out);
    }
 else     if (argMap.containsKey(ARGUMENT_VIEW)) {
      renderView(webRequest,argMap,target,controller,hasContentType);
    }
 else     if (argMap.containsKey(ARGUMENT_TEMPLATE)) {
      if (out == null) {
        out=getWriterForConfiguredContentType(response,argMap,hasContentType);
        webRequest.setOut(out);
      }
      renderView=renderTemplate(target,controller,webRequest,argMap,out);
    }
 else     if (argMap.containsKey(ARGUMENT_FILE)) {
      renderView=false;
      Object o=argMap.get(ARGUMENT_FILE);
      Object fnO=argMap.get(ARGUMENT_FILE_NAME);
      String fileName=fnO != null ? fnO.toString() : ((o instanceof File) ? ((File)o).getName() : null);
      if (o != null) {
        if (fileName != null) {
          detectContentTypeFromFileName(webRequest,response,argMap,fileName,hasContentType);
          if (fnO != null) {
            response.setHeader(HttpHeaders.CONTENT_DISPOSITION,DISPOSITION_HEADER_PREFIX + fileName);
          }
        }
 else         if (!hasContentType) {
          throw new ControllerExecutionException("Argument [file] of render method specified without valid [contentType] argument");
        }
        InputStream input=null;
        try {
          if (o instanceof File) {
            File f=(File)o;
            input=FileUtils.openInputStream(f);
          }
 else           if (o instanceof InputStream) {
            input=(InputStream)o;
          }
 else           if (o instanceof byte[]) {
            input=new ByteArrayInputStream((byte[])o);
          }
 else {
            input=FileUtils.openInputStream(new File(o.toString()));
          }
          IOUtils.copy(input,response.getOutputStream());
        }
 catch (        IOException e) {
          throw new ControllerExecutionException("I/O error copying file to response: " + e.getMessage(),e);
        }
 finally {
          if (input != null) {
            try {
              input.close();
            }
 catch (            IOException e) {
            }
          }
        }
      }
    }
 else     if (statusSet) {
      renderView=false;
    }
 else {
      Object object=arguments[0];
      if (object instanceof JSONElement) {
        renderView=renderJSON((JSONElement)object,response);
      }
 else {
        out=getWriterForConfiguredContentType(response,argMap,hasContentType);
        webRequest.setOut(out);
        renderView=renderObject(object,out);
      }
    }
    try {
      if (!renderView) {
        if (out != null) {
          out.flush();
        }
      }
    }
 catch (    IOException e) {
      throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ e.getMessage(),e);
    }
  }
 else {
    throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  }
  webRequest.setRenderView(renderView);
  return null;
}
