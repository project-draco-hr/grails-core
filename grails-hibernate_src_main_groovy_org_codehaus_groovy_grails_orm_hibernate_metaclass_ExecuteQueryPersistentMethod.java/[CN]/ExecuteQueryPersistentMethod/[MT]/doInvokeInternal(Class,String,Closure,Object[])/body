{
  checkMethodSignature(clazz,arguments);
  final String query=arguments[0].toString();
  final Map queryMetaParams=extractQueryMetaParams(arguments);
  final List positionalParams=extractPositionalParams(arguments);
  final Map namedParams=extractNamedParams(arguments);
  return getHibernateTemplate().executeFind(new HibernateCallback<Object>(){
    public Object doInHibernate(    Session session) throws HibernateException, SQLException {
      Query q=session.createQuery(query);
      getHibernateTemplate().applySettings(q);
      SimpleTypeConverter converter=new SimpleTypeConverter();
      if (queryMetaParams.containsKey(GrailsHibernateUtil.ARGUMENT_MAX)) {
        Integer maxParam=converter.convertIfNecessary(queryMetaParams.get(GrailsHibernateUtil.ARGUMENT_MAX),Integer.class);
        q.setMaxResults(maxParam.intValue());
      }
      if (queryMetaParams.containsKey(GrailsHibernateUtil.ARGUMENT_OFFSET)) {
        Integer offsetParam=converter.convertIfNecessary(queryMetaParams.get(GrailsHibernateUtil.ARGUMENT_OFFSET),Integer.class);
        q.setFirstResult(offsetParam.intValue());
      }
      if (queryMetaParams.containsKey(GrailsHibernateUtil.ARGUMENT_CACHE)) {
        q.setCacheable(((Boolean)queryMetaParams.get(GrailsHibernateUtil.ARGUMENT_CACHE)).booleanValue());
      }
      if (queryMetaParams.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH_SIZE)) {
        Integer fetchSizeParam=converter.convertIfNecessary(queryMetaParams.get(GrailsHibernateUtil.ARGUMENT_FETCH_SIZE),Integer.class);
        q.setFetchSize(fetchSizeParam.intValue());
      }
      if (queryMetaParams.containsKey(GrailsHibernateUtil.ARGUMENT_TIMEOUT)) {
        Integer timeoutParam=converter.convertIfNecessary(queryMetaParams.get(GrailsHibernateUtil.ARGUMENT_TIMEOUT),Integer.class);
        q.setTimeout(timeoutParam.intValue());
      }
      if (queryMetaParams.containsKey(GrailsHibernateUtil.ARGUMENT_READ_ONLY)) {
        q.setReadOnly(((Boolean)queryMetaParams.get(GrailsHibernateUtil.ARGUMENT_READ_ONLY)).booleanValue());
      }
      if (queryMetaParams.containsKey(GrailsHibernateUtil.ARGUMENT_FLUSH_MODE)) {
        q.setFlushMode((FlushMode)queryMetaParams.get(GrailsHibernateUtil.ARGUMENT_FLUSH_MODE));
      }
      int index=0;
      for (      Object parameter : positionalParams) {
        q.setParameter(index++,parameter instanceof CharSequence ? parameter.toString() : parameter);
      }
      for (      Object o : namedParams.entrySet()) {
        Map.Entry entry=(Map.Entry)o;
        if (!(entry.getKey() instanceof String)) {
          throw new GrailsQueryException("Named parameter's name must be of type String");
        }
        String parameterName=(String)entry.getKey();
        if (!QUERY_META_PARAMS.contains(parameterName)) {
          Object parameterValue=entry.getValue();
          if (parameterValue == null) {
            throw new IllegalArgumentException("Named parameter [" + entry.getKey() + "] value may not be null");
          }
          if (Collection.class.isAssignableFrom(parameterValue.getClass())) {
            q.setParameterList(parameterName,(Collection)parameterValue);
          }
 else           if (parameterValue.getClass().isArray()) {
            q.setParameterList(parameterName,(Object[])parameterValue);
          }
 else           if (parameterValue instanceof CharSequence) {
            q.setParameter(parameterName,parameterValue.toString());
          }
 else {
            q.setParameter(parameterName,parameterValue);
          }
        }
      }
      return q.list();
    }
  }
);
}
