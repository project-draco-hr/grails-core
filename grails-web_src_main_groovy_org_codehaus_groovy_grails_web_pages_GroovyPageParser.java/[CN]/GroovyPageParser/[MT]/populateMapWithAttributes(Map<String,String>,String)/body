{
  attrTokens=attrTokens.trim();
  int startPos=0;
  while (startPos < attrTokens.length()) {
    int equalsignPos=attrTokens.indexOf('=',startPos);
    if (equalsignPos == -1) {
      throw new GrailsTagException("Expecting '=' after attribute name",pageName,getCurrentOutputLineNumber());
    }
    String name=attrTokens.substring(startPos,equalsignPos).trim();
    startPos=equalsignPos + 1;
    char ch=attrTokens.charAt(startPos++);
    while (Character.isWhitespace(ch) && startPos < attrTokens.length()) {
      ch=attrTokens.charAt(startPos++);
    }
    if (!(ch == '\'' || ch == '"')) {
      throw new GrailsTagException("Attribute value must be quoted.",pageName,getCurrentOutputLineNumber());
    }
    char quoteChar=ch;
    int parenthesisLevel=0;
    int endPos=startPos;
    int endQuotepos=-1;
    char previousChar=0;
    int valueCharIndex=0;
    int parsingState=PARSING_NORMAL;
    char currentQuoteChar=0;
    while (endPos < attrTokens.length() && endQuotepos == -1) {
      ch=attrTokens.charAt(endPos++);
switch (ch) {
case '{':
        if (previousChar == '$' || parsingState == PARSING_EXPRESSION) {
          parenthesisLevel++;
          parsingState=PARSING_EXPRESSION;
        }
      break;
case '[':
    if (valueCharIndex == 0 || parsingState == PARSING_EXPRESSION) {
      parenthesisLevel++;
      parsingState=PARSING_EXPRESSION;
    }
  break;
case '}':
case ']':
if (parsingState == PARSING_EXPRESSION) {
  parenthesisLevel--;
  if (parenthesisLevel == 0) {
    parsingState=PARSING_NORMAL;
  }
}
break;
default :
if (previousChar != '\\') {
if (parsingState == PARSING_NORMAL && ch == quoteChar && parenthesisLevel == 0) {
endQuotepos=endPos - 1;
}
 else if (parsingState == PARSING_EXPRESSION && (ch == '"' || ch == '\'')) {
currentQuoteChar=ch;
parsingState=PARSING_QUOTEDVALUE;
}
 else if (parsingState == PARSING_QUOTEDVALUE && ch == currentQuoteChar) {
parsingState=PARSING_EXPRESSION;
}
}
break;
}
previousChar=ch;
valueCharIndex++;
}
if (endQuotepos == -1) {
throw new GrailsTagException("Attribute value quote wasn't closed.",pageName,getCurrentOutputLineNumber());
}
String val=attrTokens.substring(startPos,endQuotepos);
if (val.startsWith("${") && val.endsWith("}") && val.indexOf("${",2) == -1) {
val=val.substring(2,val.length() - 1);
}
 else if (!(val.startsWith("[") && val.endsWith("]"))) {
if (val.indexOf('"') == -1) {
quoteChar='"';
}
val=quoteChar + val + quoteChar;
}
attrs.put("\"" + name + "\"",val);
startPos=endQuotepos + 1;
}
}
