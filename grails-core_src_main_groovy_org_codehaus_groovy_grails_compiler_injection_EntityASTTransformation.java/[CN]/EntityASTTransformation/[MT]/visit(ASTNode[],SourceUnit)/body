{
  if (!(astNodes[0] instanceof AnnotationNode) || !(astNodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");
  }
  AnnotatedNode parent=(AnnotatedNode)astNodes[1];
  AnnotationNode node=(AnnotationNode)astNodes[0];
  if (!MY_TYPE.equals(node.getClassNode()) || !(parent instanceof ClassNode)) {
    return;
  }
  ClassNode cNode=(ClassNode)parent;
  String cName=cNode.getName();
  if (cNode.isInterface()) {
    throw new RuntimeException("Error processing interface '" + cName + "'. "+ MY_TYPE_NAME+ " not allowed for interfaces.");
  }
  GrailsDomainClassInjector domainInjector=new DefaultGrailsDomainClassInjector();
  domainInjector.performInjectionOnAnnotatedEntity(cNode);
  ClassInjector[] classInjectors=GrailsAwareInjectionOperation.getClassInjectors();
  final List<ClassInjector> domainInjectors=ArtefactTypeAstTransformation.findInjectors(DomainClassArtefactHandler.TYPE,classInjectors);
  for (  ClassInjector injector : domainInjectors) {
    try {
      injector.performInjection(sourceUnit,cNode);
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      System.out.println("Error occurred calling AST injector [" + injector.getClass().getName() + "]: "+ e.getMessage());
      throw e;
    }
  }
}
