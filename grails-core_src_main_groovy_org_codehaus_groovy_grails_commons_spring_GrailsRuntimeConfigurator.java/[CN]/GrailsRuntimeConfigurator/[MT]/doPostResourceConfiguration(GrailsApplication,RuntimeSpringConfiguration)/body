{
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  try {
    Resource springResources;
    if (app.isWarDeployed()) {
      springResources=parent.getResource(GrailsRuntimeConfigurator.SPRING_RESOURCES_XML);
    }
 else {
      ResourcePatternResolver patternResolver=new PathMatchingResourcePatternResolver();
      springResources=patternResolver.getResource(DEVELOPMENT_SPRING_RESOURCES_XML);
    }
    if (springResources != null && springResources.exists()) {
      LOG.debug("[RuntimeConfiguration] Configuring additional beans from " + springResources.getURL());
      XmlBeanFactory xmlBf=new XmlBeanFactory(springResources);
      xmlBf.setBeanClassLoader(classLoader);
      String[] beanNames=xmlBf.getBeanDefinitionNames();
      LOG.debug("[RuntimeConfiguration] Found [" + beanNames.length + "] beans to configure");
      for (      String beanName : beanNames) {
        BeanDefinition bd=xmlBf.getBeanDefinition(beanName);
        final String beanClassName=bd.getBeanClassName();
        Class<?> beanClass=beanClassName == null ? null : ClassUtils.forName(beanClassName,classLoader);
        springConfig.addBeanDefinition(beanName,bd);
        String[] aliases=xmlBf.getAliases(beanName);
        for (        String alias : aliases) {
          springConfig.addAlias(alias,beanName);
        }
        if (beanClass != null) {
          if (BeanFactoryPostProcessor.class.isAssignableFrom(beanClass)) {
            ((ConfigurableApplicationContext)springConfig.getUnrefreshedApplicationContext()).addBeanFactoryPostProcessor((BeanFactoryPostProcessor)xmlBf.getBean(beanName));
          }
        }
      }
    }
 else     if (LOG.isDebugEnabled()) {
      LOG.debug("[RuntimeConfiguration] " + GrailsRuntimeConfigurator.SPRING_RESOURCES_XML + " not found. Skipping configuration.");
    }
    GrailsRuntimeConfigurator.loadSpringGroovyResources(springConfig,app);
  }
 catch (  Exception ex) {
    LOG.warn("[RuntimeConfiguration] Unable to perform post initialization config: " + SPRING_RESOURCES_XML,ex);
  }
}
