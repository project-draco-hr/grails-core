{
  RequestDispatcher dispatcher=request.getRequestDispatcher(includeUrl);
  HttpServletResponse wrapped=WrappedResponseHolder.getWrappedResponse();
  response=wrapped != null ? wrapped : response;
  WebUtils.exposeIncludeRequestAttributes(request);
  Map toRestore=WebUtils.exposeRequestAttributesAndReturnOldValues(request,model);
  final GrailsWebRequest webRequest=GrailsWebRequest.lookup(request);
  final Object previousControllerClass=webRequest.getAttribute(GrailsApplicationAttributes.GRAILS_CONTROLLER_CLASS_AVAILABLE,WebRequest.SCOPE_REQUEST);
  final Object previousMatchedRequest=webRequest.getAttribute(UrlMappingsHandlerMapping.MATCHED_REQUEST,WebRequest.SCOPE_REQUEST);
  try {
    webRequest.removeAttribute(GrailsApplicationAttributes.GRAILS_CONTROLLER_CLASS_AVAILABLE,WebRequest.SCOPE_REQUEST);
    webRequest.removeAttribute(UrlMappingsHandlerMapping.MATCHED_REQUEST,WebRequest.SCOPE_REQUEST);
    webRequest.removeAttribute("grailsWebRequestFilter" + OncePerRequestFilter.ALREADY_FILTERED_SUFFIX,WebRequest.SCOPE_REQUEST);
    final IncludeResponseWrapper responseWrapper=new IncludeResponseWrapper(response);
    try {
      WrappedResponseHolder.setWrappedResponse(responseWrapper);
      dispatcher.include(request,responseWrapper);
      if (responseWrapper.getRedirectURL() != null) {
        return new IncludedContent(responseWrapper.getRedirectURL());
      }
      return new IncludedContent(responseWrapper.getContentType(),responseWrapper.getContent());
    }
  finally {
      webRequest.setAttribute(GrailsApplicationAttributes.GRAILS_CONTROLLER_CLASS_AVAILABLE,previousControllerClass,WebRequest.SCOPE_REQUEST);
      webRequest.setAttribute(UrlMappingsHandlerMapping.MATCHED_REQUEST,previousMatchedRequest,WebRequest.SCOPE_REQUEST);
      WrappedResponseHolder.setWrappedResponse(wrapped);
    }
  }
 catch (  Exception e) {
    throw new ControllerExecutionException("Unable to execute include: " + e.getMessage(),e);
  }
 finally {
    WebUtils.cleanupIncludeRequestAttributes(request,toRestore);
  }
}
