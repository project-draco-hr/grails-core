{
  if (arguments.length == 0) {
    return getHibernateTemplate().loadAll(clazz);
  }
  final Object arg=arguments[0] instanceof CharSequence ? arguments[0].toString() : arguments[0];
  if (arg instanceof String) {
    final String query=((String)arg).trim();
    final String shortName=GrailsNameUtils.getShortName(clazz);
    if (!query.matches("(?i)from(?-i)\\s+[" + clazz.getName() + "|"+ shortName+ "].*")) {
      throw new GrailsQueryException("Invalid query [" + query + "] for domain class ["+ clazz+ "]");
    }
    return getHibernateTemplate().executeFind(new HibernateCallback<Object>(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Query q=session.createQuery(query);
        Object[] queryArgs=null;
        Map queryNamedArgs=null;
        int max=retrieveMaxValue();
        int offset=retrieveOffsetValue();
        boolean useCache=useCache();
        if (arguments.length > 1) {
          if (arguments[1] instanceof Collection) {
            queryArgs=GrailsClassUtils.collectionToObjectArray((Collection)arguments[1]);
          }
 else           if (arguments[1].getClass().isArray()) {
            queryArgs=(Object[])arguments[1];
          }
 else           if (arguments[1] instanceof Map) {
            queryNamedArgs=(Map)arguments[1];
          }
        }
        if (queryArgs != null) {
          for (int i=0; i < queryArgs.length; i++) {
            if (queryArgs[i] instanceof CharSequence) {
              q.setParameter(i,queryArgs[i].toString());
            }
 else {
              q.setParameter(i,queryArgs[i]);
            }
          }
        }
        if (queryNamedArgs != null) {
          for (          Object o : queryNamedArgs.entrySet()) {
            Map.Entry entry=(Map.Entry)o;
            if (!(entry.getKey() instanceof String)) {
              throw new GrailsQueryException("Named parameter's name must be String: " + queryNamedArgs);
            }
            String stringKey=(String)entry.getKey();
            if (GrailsHibernateUtil.ARGUMENT_MAX.equals(stringKey) || GrailsHibernateUtil.ARGUMENT_OFFSET.equals(stringKey) || GrailsHibernateUtil.ARGUMENT_CACHE.equals(stringKey))             continue;
            Object value=entry.getValue();
            if (value == null) {
              q.setParameter(stringKey,null);
            }
 else             if (value instanceof CharSequence) {
              q.setParameter(stringKey,value.toString());
            }
 else             if (List.class.isAssignableFrom(value.getClass())) {
              q.setParameterList(stringKey,(List)value);
            }
 else             if (value.getClass().isArray()) {
              q.setParameterList(stringKey,(Object[])value);
            }
 else {
              q.setParameter(stringKey,value);
            }
          }
        }
        if (max > 0) {
          q.setMaxResults(max);
        }
        if (offset > 0) {
          q.setFirstResult(offset);
        }
        q.setCacheable(useCache);
        return q.list();
      }
      private boolean useCache(){
        boolean useCache=false;
        if (arguments.length > 1 && arguments[arguments.length - 1] instanceof Map) {
          useCache=retrieveBoolean(arguments[arguments.length - 1],GrailsHibernateUtil.ARGUMENT_CACHE);
        }
        return useCache;
      }
      private int retrieveMaxValue(){
        int result=-1;
        if (arguments.length > 1) {
          result=retrieveInt(arguments[1],GrailsHibernateUtil.ARGUMENT_MAX);
          if (arguments.length > 2 && result == -1) {
            result=retrieveInt(arguments[2],GrailsHibernateUtil.ARGUMENT_MAX);
          }
        }
        return result;
      }
      private int retrieveOffsetValue(){
        int result=-1;
        if (arguments.length > 1) {
          if (isMapWithValue(arguments[1],GrailsHibernateUtil.ARGUMENT_OFFSET)) {
            result=((Number)((Map)arguments[1]).get(GrailsHibernateUtil.ARGUMENT_OFFSET)).intValue();
          }
          if (arguments.length > 2 && result == -1) {
            if (isMapWithValue(arguments[2],GrailsHibernateUtil.ARGUMENT_OFFSET)) {
              result=retrieveInt(arguments[2],GrailsHibernateUtil.ARGUMENT_OFFSET);
            }
 else             if (isIntegerOrLong(arguments[1]) && isIntegerOrLong(arguments[2])) {
              result=((Number)arguments[2]).intValue();
            }
          }
          if (arguments.length > 3 && result == -1) {
            if (isIntegerOrLong(arguments[3])) {
              result=((Number)arguments[3]).intValue();
            }
          }
        }
        return result;
      }
      private boolean retrieveBoolean(      Object param,      String key){
        boolean value=false;
        if (isMapWithValue(param,key)) {
          SimpleTypeConverter converter=new SimpleTypeConverter();
          value=converter.convertIfNecessary(((Map)param).get(key),Boolean.class);
        }
        return value;
      }
      private int retrieveInt(      Object param,      String key){
        if (isMapWithValue(param,key)) {
          SimpleTypeConverter converter=new SimpleTypeConverter();
          Integer convertedParam=converter.convertIfNecessary(((Map)param).get(key),Integer.class);
          return convertedParam;
        }
        if (isIntegerOrLong(param)) {
          return ((Number)param).intValue();
        }
        return -1;
      }
      private boolean isIntegerOrLong(      Object param){
        return (param instanceof Integer) || (param instanceof Long);
      }
      private boolean isMapWithValue(      Object param,      String key){
        return (param instanceof Map) && ((Map)param).containsKey(key);
      }
    }
);
  }
  if (clazz.isAssignableFrom(arg.getClass())) {
    return getHibernateTemplate().executeFind(new HibernateCallback<Object>(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Example example=Example.create(arg).ignoreCase();
        Criteria crit=session.createCriteria(clazz);
        crit.add(example);
        Map argsMap=(arguments.length > 1 && (arguments[1] instanceof Map)) ? (Map)arguments[1] : Collections.EMPTY_MAP;
        GrailsHibernateUtil.populateArgumentsForCriteria(grailsApplication,clazz,crit,argsMap);
        return crit.list();
      }
    }
);
  }
  if (arguments[0] instanceof Map) {
    return getHibernateTemplate().executeFind(new HibernateCallback<Object>(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Criteria crit=session.createCriteria(clazz);
        GrailsHibernateUtil.populateArgumentsForCriteria(grailsApplication,clazz,crit,(Map)arguments[0]);
        return crit.list();
      }
    }
);
  }
  throw new MissingMethodException(methodName,clazz,arguments);
}
