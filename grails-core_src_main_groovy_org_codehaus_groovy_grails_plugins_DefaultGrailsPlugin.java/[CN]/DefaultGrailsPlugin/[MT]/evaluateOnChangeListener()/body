{
  if (pluginBean.isReadableProperty(ON_SHUTDOWN)) {
    onShutdownListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,ON_SHUTDOWN);
  }
  if (pluginBean.isReadableProperty(ON_CONFIG_CHANGE)) {
    onConfigChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,ON_CONFIG_CHANGE);
  }
  if (pluginBean.isReadableProperty(ON_CHANGE)) {
    onChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,ON_CHANGE);
  }
  final boolean warDeployed=Metadata.getCurrent().isWarDeployed();
  final boolean reloadEnabled=Environment.getCurrent().isReloadEnabled();
  if (!((reloadEnabled || !warDeployed) && onChangeListener != null)) {
    return;
  }
  Object referencedResources=GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,WATCHED_RESOURCES);
  try {
    List resourceList=null;
    if (referencedResources instanceof String) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Configuring plugin " + this + " to watch resources with pattern: "+ referencedResources);
      }
      resourceList=new ArrayList();
      resourceList.add(referencedResources.toString());
    }
 else     if (referencedResources instanceof List) {
      resourceList=(List)referencedResources;
    }
    if (resourceList != null) {
      List<String> resourceListTmp=new ArrayList<String>();
      GrailsPluginManager pluginManager=getManager();
      PluginBuildSettings pluginBuildSettings=pluginManager != null ? pluginManager.getPluginBuildSettings() : null;
      if (pluginBuildSettings != null) {
        final Resource[] pluginDirs=pluginBuildSettings.getPluginDirectories();
        final Environment env=Environment.getCurrent();
        final String baseLocation=env.getReloadLocation();
        for (        Object ref : resourceList) {
          String stringRef=ref.toString();
          if (!warDeployed) {
            for (            Resource pluginDir : pluginDirs) {
              if (pluginDir != null) {
                String pluginResources=getResourcePatternForBaseLocation(pluginDir.getFile().getCanonicalPath(),stringRef);
                resourceListTmp.add(pluginResources);
              }
            }
            addBaseLocationPattern(resourceListTmp,baseLocation,stringRef);
          }
 else {
            addBaseLocationPattern(resourceListTmp,baseLocation,stringRef);
          }
        }
        resourcesReferences=new String[resourceListTmp.size()];
        resourceCount=new int[resourceListTmp.size()];
        for (int i=0; i < resourcesReferences.length; i++) {
          String resRef=resourceListTmp.get(i);
          resourcesReferences[i]=resRef;
        }
        for (int i=0; i < resourcesReferences.length; i++) {
          String res=resourcesReferences[i];
          Resource[] tmp=new Resource[0];
          try {
            try {
              tmp=(Resource[])ArrayUtils.addAll(tmp,resolver.getResources(res));
            }
 catch (            IOException e) {
            }
          }
 catch (          Exception ex) {
            LOG.debug("Resource pattern [" + res + "] is not valid - maybe base directory does not exist?");
          }
          resourceCount[i]=tmp.length;
          if (LOG.isDebugEnabled()) {
            LOG.debug("Watching resource set [" + (i + 1) + "]: "+ ArrayUtils.toString(tmp));
          }
          if (tmp.length == 0) {
            tmp=resolver.getResources("classpath*:" + res);
          }
          if (tmp.length > 0) {
            watchedResources=(Resource[])ArrayUtils.addAll(watchedResources,tmp);
          }
        }
      }
    }
  }
 catch (  IllegalArgumentException e) {
    if (GrailsUtil.isDevelopmentEnv()) {
      LOG.debug("Cannot load plug-in resource watch list from [" + ArrayUtils.toString(resourcesReferences) + "]. This means that the plugin "+ this+ ", will not be able to auto-reload changes effectively. Try runnng grails upgrade.: "+ e.getMessage());
    }
  }
catch (  IOException e) {
    if (GrailsUtil.isDevelopmentEnv()) {
      LOG.debug("Cannot load plug-in resource watch list from [" + ArrayUtils.toString(resourcesReferences) + "]. This means that the plugin "+ this+ ", will not be able to auto-reload changes effectively. Try runnng grails upgrade.: "+ e.getMessage());
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Plugin " + this + " found ["+ watchedResources.length+ "] to watch");
  }
  try {
    initializeModifiedTimes();
  }
 catch (  IOException e) {
    LOG.warn("I/O exception initializing modified times for watched resources: " + e.getMessage(),e);
  }
}
