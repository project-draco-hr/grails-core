{
  super(theClass);
  addDynamicMethodInvocation(new IdentDynamicMethod(application));
  addDynamicMethodInvocation(new SavePersistentMethod(sessionFactory,classLoader,application));
  addDynamicMethodInvocation(new DiscardPersistentMethod(sessionFactory,classLoader));
  addDynamicMethodInvocation(new DeletePersistentMethod(sessionFactory,classLoader));
  addDynamicMethodInvocation(new RefreshPersistentMethod(sessionFactory,classLoader));
  addDynamicMethodInvocation(new ValidatePersistentMethod(sessionFactory,classLoader,application));
  addDynamicMethodInvocation(new AbstractDynamicMethodInvocation(HAS_ERRORS_PROPERTY){
    public Object invoke(    Object target,    Object[] arguments){
      Errors errors=(Errors)getDynamicProperty(ERRORS_PROPERTY).get(target);
      if (errors == null || !errors.hasErrors()) {
        return new Boolean(false);
      }
 else {
        return new Boolean(true);
      }
    }
  }
);
  addStaticMethodInvocation(new FindAllPersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new FindAllByPersistentMethod(application,sessionFactory,classLoader));
  addStaticMethodInvocation(new FindByPersistentMethod(application,sessionFactory,classLoader));
  addStaticMethodInvocation(new CountByPersistentMethod(application,sessionFactory,classLoader));
  addStaticMethodInvocation(new FindPersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new ListOrderByPersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new ListPersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new FindWherePersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new GetPersistentMethod(application,sessionFactory,classLoader));
  addStaticMethodInvocation(new ExistsPersistentMethod(application,sessionFactory,classLoader));
  addStaticMethodInvocation(new CountPersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new CreateCriteriaPersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new ExecuteQueryPersistentMethod(sessionFactory,classLoader));
  addStaticMethodInvocation(new CreateDynamicMethod());
  addDynamicProperty(new SetPropertiesDynamicProperty());
  addDynamicProperty(new ConstraintsDynamicProperty(application));
  addDynamicProperty(new WeakGenericDynamicProperty(ERRORS_PROPERTY,Errors.class,null,false));
}
