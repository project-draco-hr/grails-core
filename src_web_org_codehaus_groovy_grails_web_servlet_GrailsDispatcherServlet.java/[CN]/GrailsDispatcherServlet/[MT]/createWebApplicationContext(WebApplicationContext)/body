{
  getServletContext().setAttribute(GrailsApplicationAttributes.PARENT_APPLICATION_CONTEXT,parent);
  ApplicationContext grailsContext=(ApplicationContext)getServletContext().getAttribute(GrailsApplicationAttributes.APPLICATION_CONTEXT);
  GrailsApplication application;
  WebApplicationContext webContext;
  if (grailsContext != null) {
    XmlWebApplicationContext xmlContext=new XmlWebApplicationContext();
    xmlContext.setParent(grailsContext);
    webContext=xmlContext;
    application=(GrailsApplication)webContext.getBean(GrailsApplication.APPLICATION_ID,GrailsApplication.class);
  }
 else {
    String[] locations=null;
    if (null != getContextConfigLocation()) {
      locations=StringUtils.tokenizeToStringArray(getContextConfigLocation(),ConfigurableWebApplicationContext.CONFIG_LOCATION_DELIMITERS);
    }
    application=(GrailsApplication)parent.getBean(GrailsApplication.APPLICATION_ID,GrailsApplication.class);
    SpringConfig springConfig=new SpringConfig(application);
    webContext=new XmlWebApplicationContextDriver().getWebApplicationContext(springConfig.getBeanReferences(),parent,getServletContext(),getNamespace(),locations);
    getServletContext().setAttribute(GrailsApplicationAttributes.APPLICATION_CONTEXT,webContext);
  }
  GrailsControllerClass[] controllerClasses=application.getControllers();
  for (int i=0; i < controllerClasses.length; i++) {
    GrailsControllerClass controllerClass=controllerClasses[i];
    if (controllerClass.isScaffolding()) {
      try {
        GrailsScaffolder gs=(GrailsScaffolder)webContext.getBean(controllerClass.getFullName() + "Scaffolder");
        if (gs != null) {
          ScaffoldDomain sd=gs.getScaffoldRequestHandler().getScaffoldDomain();
          GrailsDomainClass dc=application.getGrailsDomainClass(sd.getPersistentClass().getName());
          if (dc != null) {
            sd.setIdentityPropertyName(dc.getIdentifier().getName());
            sd.setValidator(dc.getValidator());
          }
        }
      }
 catch (      NoSuchBeanDefinitionException e) {
      }
    }
  }
  SessionFactory sessionFactory=(SessionFactory)webContext.getBean("sessionFactory");
  if (sessionFactory != null) {
    Session session=null;
    boolean participate=false;
    if (TransactionSynchronizationManager.hasResource(sessionFactory)) {
      participate=true;
    }
 else {
      logger.debug("Opening single Hibernate session in GrailsDispatcherServlet");
      session=SessionFactoryUtils.getSession(sessionFactory,true);
      session.setFlushMode(FlushMode.AUTO);
      TransactionSynchronizationManager.bindResource(sessionFactory,new SessionHolder(session));
    }
    try {
      GrailsBootstrapClass[] bootstraps=application.getGrailsBootstrapClasses();
      for (int i=0; i < bootstraps.length; i++) {
        bootstraps[i].callInit(getServletContext());
      }
    }
  finally {
      if (!participate) {
        TransactionSynchronizationManager.unbindResource(sessionFactory);
        logger.debug("Closing single Hibernate session in GrailsDispatcherServlet");
        try {
          SessionFactoryUtils.releaseSession(session,sessionFactory);
        }
 catch (        RuntimeException ex) {
          logger.error("Unexpected exception on closing Hibernate Session",ex);
        }
      }
    }
  }
  return webContext;
}
