{
  if (!location.startsWith(SLASH))   location=SLASH + location;
  if (BuildSettingsHolder.getSettings().isInlinePluginLocation(new File(location.replaceAll(GRAILS_APP_DIR_PATTERN,"")))) {
    return "file:" + location;
  }
 else {
    if (!location.startsWith(GrailsResourceUtils.WEB_INF)) {
      return GrailsResourceUtils.WEB_APP_DIR + location;
    }
    final String noWebInf=location.substring(GrailsResourceUtils.WEB_INF.length() + 1);
    final String defaultPath="file:" + baseLocation + SLASH+ noWebInf;
    if (!noWebInf.startsWith(PLUGINS_PREFIX)) {
      return defaultPath;
    }
    if (application != null) {
      BuildSettings settings=BuildSettingsHolder.getSettings();
      PluginBuildSettings pluginBuildSettings=org.codehaus.groovy.grails.plugins.GrailsPluginUtils.getPluginBuildSettings();
      String pluginPath=StringUtils.substringAfter(noWebInf,SLASH);
      String pluginName=StringUtils.substringBefore(pluginPath,SLASH);
      String remainingPath=StringUtils.substringAfter(pluginPath,SLASH);
      org.codehaus.groovy.grails.io.support.Resource r=pluginBuildSettings.getPluginDirForName(pluginName);
      if (r != null) {
        try {
          return "file:" + r.getFile().getAbsolutePath() + SLASH+ remainingPath;
        }
 catch (        IOException e) {
          LOG.debug("Unable to locate plugin resource -- returning default path " + defaultPath + ".",e);
          return defaultPath;
        }
      }
      if (settings != null) {
        return "file:" + settings.getProjectPluginsDir().getAbsolutePath() + SLASH+ pluginName+ SLASH+ remainingPath;
      }
    }
    return defaultPath;
  }
}
