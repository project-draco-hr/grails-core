{
  super(t.getMessage(),t);
  cause=t;
  FastStringPrintWriter pw=new FastStringPrintWriter();
  cause.printStackTrace(pw);
  stackTrace=pw.toString();
  while (cause.getCause() != cause) {
    if (cause.getCause() == null) {
      break;
    }
    cause=cause.getCause();
  }
  stackTraceLines=stackTrace.split("\\n");
  if (cause instanceof MultipleCompilationErrorsException) {
    MultipleCompilationErrorsException mcee=(MultipleCompilationErrorsException)cause;
    Object message=mcee.getErrorCollector().getErrors().iterator().next();
    if (message instanceof SyntaxErrorMessage) {
      SyntaxErrorMessage sem=(SyntaxErrorMessage)message;
      lineNumber=sem.getCause().getLine();
      className=sem.getCause().getSourceLocator();
      sem.write(pw);
    }
  }
 else {
    Matcher m1=PARSE_DETAILS_STEP1.matcher(stackTrace);
    Matcher m2=PARSE_DETAILS_STEP2.matcher(stackTrace);
    Matcher gsp=PARSE_GSP_DETAILS_STEP1.matcher(stackTrace);
    try {
      if (gsp.find()) {
        className=gsp.group(2);
        lineNumber=Integer.parseInt(gsp.group(3));
        gspFile=URL_PREFIX + "views/" + gsp.group(1)+ '/'+ className;
      }
 else {
        if (m1.find()) {
          do {
            className=m1.group(1);
            lineNumber=Integer.parseInt(m1.group(2));
          }
 while (m1.find());
        }
 else {
          while (m2.find()) {
            className=m2.group(1);
            lineNumber=Integer.parseInt(m2.group(2));
          }
        }
      }
    }
 catch (    NumberFormatException nfex) {
    }
  }
  LineNumberReader reader=null;
  try {
    checkIfSourceCodeAware(cause);
    checkIfSourceCodeAware(t);
    if (getLineNumber() > -1) {
      String fileLocation;
      String url=null;
      if (fileName != null) {
        fileLocation=fileName;
      }
 else {
        String urlPrefix="";
        if (gspFile == null) {
          fileName=className.replace('.','/') + ".groovy";
          GrailsApplication application=WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext).getBean(GrailsApplication.APPLICATION_ID,GrailsApplication.class);
          if (application.isArtefactOfType(ControllerArtefactHandler.TYPE,className)) {
            urlPrefix+="/controllers/";
          }
 else           if (application.isArtefactOfType(TagLibArtefactHandler.TYPE,className)) {
            urlPrefix+="/taglib/";
          }
 else           if (application.isArtefactOfType(ServiceArtefactHandler.TYPE,className)) {
            urlPrefix+="/services/";
          }
          url=URL_PREFIX + urlPrefix + fileName;
        }
 else {
          url=gspFile;
          GrailsApplicationAttributes attrs=new DefaultGrailsApplicationAttributes(servletContext);
          GroovyPagesTemplateEngine engine=attrs.getPagesTemplateEngine();
          int[] lineNumbers=engine.calculateLineNumbersForPage(servletContext,url);
          if (lineNumber < lineNumbers.length) {
            lineNumber=lineNumbers[lineNumber - 1];
          }
        }
        fileLocation="grails-app" + urlPrefix + fileName;
      }
      InputStream in=null;
      if (!StringUtils.isBlank(url)) {
        in=servletContext.getResourceAsStream(url);
        LOG.debug("Attempting to display code snippet found in url " + url);
      }
      if (in == null) {
        Resource r=null;
        try {
          r=resolver.getResource(fileLocation);
          in=r.getInputStream();
        }
 catch (        Throwable e) {
          r=resolver.getResource("file:" + fileLocation);
          if (r.exists()) {
            try {
              in=r.getInputStream();
            }
 catch (            IOException e1) {
            }
          }
        }
      }
      if (in != null) {
        reader=new LineNumberReader(new InputStreamReader(in));
        String currentLine=reader.readLine();
        StringBuilder buf=new StringBuilder();
        while (currentLine != null) {
          int currentLineNumber=reader.getLineNumber();
          if ((lineNumber > 0 && currentLineNumber == lineNumber - 1) || (currentLineNumber == lineNumber)) {
            buf.append(currentLineNumber).append(": ").append(currentLine).append("\n");
          }
 else           if (currentLineNumber == lineNumber + 1) {
            buf.append(currentLineNumber).append(": ").append(currentLine);
            break;
          }
          currentLine=reader.readLine();
        }
        codeSnippet=buf.toString().split("\n");
      }
    }
  }
 catch (  IOException e) {
    LOG.warn("[GrailsWrappedRuntimeException] I/O error reading line diagnostics: " + e.getMessage(),e);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
