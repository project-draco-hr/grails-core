{
  if (artefactInfo == null) {
    return null;
  }
  String uri;
  String pluginName=null;
  String namespace=null;
  ControllerCacheKey cacheKey;
  if (featureId instanceof ControllerCacheKey) {
    cacheKey=(ControllerCacheKey)featureId;
    pluginName=cacheKey.plugin;
    namespace=cacheKey.namespace;
    uri=cacheKey.uri;
  }
 else {
    uri=featureId.toString();
    cacheKey=new ControllerCacheKey(uri,null,null);
  }
  GrailsClass controllerClass=uriToControllerClassCache.get(cacheKey);
  if (controllerClass == null) {
    final ApplicationContext mainContext=grailsApplication.getMainContext();
    GrailsPluginManager grailsPluginManager=null;
    if (mainContext.containsBean(GrailsPluginManager.BEAN_NAME)) {
      final Object pluginManagerBean=mainContext.getBean(GrailsPluginManager.BEAN_NAME);
      if (pluginManagerBean instanceof GrailsPluginManager) {
        grailsPluginManager=(GrailsPluginManager)pluginManagerBean;
      }
    }
    final GrailsClass[] controllerClasses=artefactInfo.getGrailsClasses();
    for (int i=(controllerClasses.length - 1); i >= 0; i--) {
      GrailsClass c=controllerClasses[i];
      if (((GrailsControllerClass)c).mapsToURI(uri)) {
        boolean pluginMatches=false;
        boolean namespaceMatches=false;
        namespaceMatches=namespaceMatches((GrailsControllerClass)c,namespace);
        if (namespaceMatches) {
          pluginMatches=pluginMatches(c,pluginName,grailsPluginManager);
        }
        boolean foundController=pluginMatches && namespaceMatches;
        if (foundController) {
          controllerClass=c;
          break;
        }
      }
    }
    if (controllerClass == null) {
      controllerClass=NO_CONTROLLER;
    }
    if (Environment.getCurrent() != Environment.DEVELOPMENT) {
      uriToControllerClassCache.put(cacheKey,controllerClass);
    }
  }
  if (controllerClass == NO_CONTROLLER) {
    controllerClass=null;
  }
  return controllerClass;
}
