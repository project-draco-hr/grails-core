{
  StringBuilder allArgs=new StringBuilder("");
  for (  String arg : args) {
    allArgs.append(" ").append(arg);
  }
  ScriptAndArgs script=processArgumentsAndReturnScriptName(allArgs.toString().trim());
  boolean verbose=script.args != null ? script.args.indexOf("--verbose") >= 0 : false;
  String grailsHome=System.getProperty("grails.home");
  BuildSettings build=null;
  try {
    build=new BuildSettings(new File(grailsHome));
  }
 catch (  Exception e) {
    System.err.println("An error occurred loading the grails-app/conf/BuildConfig.groovy file: " + e.getMessage());
    System.exit(1);
  }
  final File grailsHomeInSettings=build.getGrailsHome();
  if (grailsHomeInSettings == null || !grailsHomeInSettings.exists()) {
    exitWithError("Grails' installation directory not found: " + build.getGrailsHome());
  }
  if (verbose) {
    System.out.println("Grails " + build.getGrailsVersion() + '\n'+ "Grails home is "+ (grailsHome == null ? "not set" : "set to: " + grailsHome)+ '\n');
  }
 else {
    System.out.print("Grails " + build.getGrailsVersion() + " initializing... ");
  }
  if (script.name == null) {
    System.out.println("No script name specified. Use 'grails help' for more info or 'grails interactive' to enter interactive mode");
    System.exit(0);
  }
  if (verbose) {
    System.out.println("Base Directory: " + build.getBaseDir().getPath());
  }
  PrintStream originalOut=System.out;
  try {
    ByteArrayOutputStream cachedOutput=new ByteArrayOutputStream();
    if (!verbose) {
      PrintStream tempOut=new PrintStream(cachedOutput);
      System.setOut(tempOut);
    }
    try {
      GrailsScriptRunner runner=new GrailsScriptRunner(build);
      runner.out=originalOut;
      runner.consoleOut=originalOut;
      runner.ui=new DefaultScriptUserInterface(originalOut,verbose);
      int exitCode=runner.executeCommand(script.name,script.args,script.env);
      if (!verbose) {
        if (exitCode != 0) {
          byte[] bytes=cachedOutput.toByteArray();
          originalOut.write(bytes,0,bytes.length);
        }
      }
      System.exit(exitCode);
    }
  finally {
      System.setOut(originalOut);
    }
  }
 catch (  ScriptNotFoundException ex) {
    originalOut.println("Script not found: " + ex.getScriptName());
  }
catch (  Throwable t) {
    String msg="Error executing script " + script.name + ": "+ t.getMessage();
    originalOut.println(msg);
    sanitizeStacktrace(t);
    t.printStackTrace(System.out);
    exitWithError(msg);
  }
}
