{
  component.setEmbedded(true);
  Class type=property.getType();
  String role=StringHelper.qualify(type.getName(),property.getName());
  component.setRoleName(role);
  component.setComponentClassName(type.getName());
  GrailsDomainClass domainClass=property.getReferencedDomainClass() != null ? property.getReferencedDomainClass() : new ComponentDomainClass(type);
  GrailsDomainClassProperty[] properties=domainClass.getPersistentProperties();
  Table table=component.getOwner().getTable();
  PersistentClass persistentClass=component.getOwner();
  String path=property.getName();
  Class propertyType=property.getDomainClass().getClazz();
  for (int i=0; i < properties.length; i++) {
    GrailsDomainClassProperty currentGrailsProp=properties[i];
    if (currentGrailsProp.isIdentity())     continue;
    if (currentGrailsProp.getName().equals(GrailsDomainClassProperty.VERSION))     continue;
    if (currentGrailsProp.getType().equals(propertyType)) {
      component.setParentProperty(currentGrailsProp.getName());
      continue;
    }
    bindComponentProperty(component,currentGrailsProp,persistentClass,path,table,mappings);
  }
}
