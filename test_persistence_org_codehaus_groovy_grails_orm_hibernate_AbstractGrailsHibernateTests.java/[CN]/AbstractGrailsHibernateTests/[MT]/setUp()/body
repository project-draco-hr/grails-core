{
  gcl=new GroovyClassLoader();
  super.setUp();
  ExpandoMetaClass.enableGlobally();
  PluginManagerHolder.setPluginManager(null);
  onSetUp();
  ConfigObject config=new ConfigSlurper().parse("dataSource {\n" + "dbCreate = \"create-drop\" \n" + "url = \"jdbc:hsqldb:mem:devDB\"\n"+ "pooling = false                          \n"+ "driverClassName = \"org.hsqldb.jdbcDriver\"\t\n"+ "username = \"sa\"\n"+ "password = \"\"\n"+ "}");
  ConfigurationHolder.setConfig(config);
  for (int i=0; i < gcl.getLoadedClasses().length; i++) {
    Class aClass=gcl.getLoadedClasses()[i];
    GroovySystem.getMetaClassRegistry().removeMetaClass(aClass);
  }
  System.out.println("gcl.getLoadedClasses() = " + ArrayUtils.toString(gcl.getLoadedClasses()));
  ga=new DefaultGrailsApplication(gcl.getLoadedClasses(),gcl);
  ApplicationHolder.setApplication(ga);
  MockApplicationContext mc=new MockApplicationContext();
  mc.registerMockBean(GrailsApplication.APPLICATION_ID,ga);
  mc.registerMockBean("messageSource",new StaticMessageSource());
  mc.registerMockBean(GrailsRuntimeConfigurator.CLASS_LOADER_BEAN,gcl);
  GrailsRuntimeConfigurator grc=new GrailsRuntimeConfigurator(ga,mc);
  this.applicationContext=grc.configure(new MockServletContext());
  this.sessionFactory=(SessionFactory)this.applicationContext.getBean(GrailsRuntimeConfigurator.SESSION_FACTORY_BEAN);
  this.session=this.sessionFactory.openSession();
  TransactionSynchronizationManager.bindResource(this.sessionFactory,new SessionHolder(session));
}
