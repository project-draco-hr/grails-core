{
  GrailsDomainClass domainClass=(GrailsDomainClass)this.grailsApplication.getArtefact(DomainClassArtefactHandler.TYPE,"PersistentMethodTests");
  GroovyObject obj=(GroovyObject)domainClass.newInstance();
  obj.setProperty("id",new Long(1));
  obj.setProperty("firstName","fred");
  obj.setProperty("lastName","flintstone");
  obj.invokeMethod("save",null);
  GroovyObject obj2=(GroovyObject)domainClass.newInstance();
  obj2.setProperty("id",new Long(2));
  obj2.setProperty("firstName","wilma");
  obj2.setProperty("lastName","flintstone");
  obj2.invokeMethod("save",null);
  try {
    obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from AnotherClass"});
    fail("Should have thrown grails query exception");
  }
 catch (  GroovyRuntimeException gqe) {
  }
  Object returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests"});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  List listResult=(List)returnValue;
  assertEquals(2,listResult.size());
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(2,listResult.size());
  List args=new ArrayList();
  args.add("wilma");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName = ?",args});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName = ?",new Object[]{"wilma"}});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  Map namedArgs=new HashMap();
  namedArgs.put("name","wilma");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName = :name",namedArgs});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  Binding b=new Binding();
  b.setVariable("test","fre%");
  b.setVariable("test1","flint%");
  GString gs=(GString)new GroovyShell(b).evaluate("\"$test\"");
  GString gs1=(GString)new GroovyShell(b).evaluate("\"$test1\"");
  args.clear();
  args.add(gs);
  args.add(gs1);
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests where firstName like ? and lastName like ?",args});
  assertNotNull(returnValue);
  assertTrue(returnValue instanceof List);
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  namedArgs.clear();
  namedArgs.put("firstName",gs);
  namedArgs.put("lastName",gs1);
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests where firstName like :firstName and lastName like :lastName",namedArgs});
  assertNotNull(returnValue);
  assertTrue(returnValue instanceof List);
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  b.setVariable("className","PersistentMethodTests");
  gs=(GString)new GroovyShell(b).evaluate("\"from ${className} where firstName like ? and lastName like ?\"");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{gs,args});
  assertNotNull(returnValue);
  namedArgs.clear();
  List namesList=new ArrayList();
  namesList.add("wilma");
  namesList.add("fred");
  namedArgs.put("namesList",namesList);
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(2,listResult.size());
  namedArgs.clear();
  namedArgs.put("namesList",new Object[]{"wilma","fred"});
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(2,listResult.size());
  namedArgs.clear();
  namedArgs.put("namesList",new Object[]{"wilma","fred"});
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs,new Integer(1)});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p",new Integer(1)});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  Map resultsMap=new HashMap();
  resultsMap.put("max",new Integer(1));
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs,resultsMap});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  namedArgs.put("max",new Integer(1));
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  namedArgs.clear();
  namedArgs.put("namesList",new Object[]{"wilma","fred"});
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs,new Integer(2),new Integer(1)});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p",new Integer(2),new Integer(1)});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  resultsMap=new HashMap();
  resultsMap.put("offset",new Integer(1));
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs,resultsMap});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  namedArgs.put("offset",new Integer(1));
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  try {
    namedArgs.clear();
    namedArgs.put(new Long(1),"wilma");
    obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{"from PersistentMethodTests as p where p.firstName = :name",namedArgs});
    fail("Should have thrown grails query exception");
  }
 catch (  GroovyRuntimeException gqe) {
  }
  GroovyObject example=(GroovyObject)domainClass.newInstance();
  example.setProperty("firstName","fred");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{example});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  listResult=(List)returnValue;
  assertEquals(1,listResult.size());
  try {
    obj.getMetaClass().invokeStaticMethod(obj,"findAll",new Object[]{new Date()});
    fail("Should have thrown an exception");
  }
 catch (  Exception e) {
  }
}
