{
  registerDependencyCommon(scope,descriptor);
  String plugin=descriptor.getPlugin();
  if (plugin != null) {
    DependencyDescriptor pluginDependencyDescriptor=getPluginDependencyDescriptor(plugin);
    if (pluginDependencyDescriptor != null) {
      ExcludeRule[] excludeRules=pluginDependencyDescriptor.getExcludeRules(scope);
      if (excludeRules != null) {
        for (        ExcludeRule excludeRule : excludeRules) {
          descriptor.addExcludeRule(scope,excludeRule);
        }
      }
    }
  }
  ModuleRevisionId revisionId=descriptor.getDependencyRevisionId();
  modules.add(revisionId.getModuleId());
  dependencies.add(revisionId);
  String org=revisionId.getOrganisation();
  if (orgToDepMap.containsKey(org)) {
    orgToDepMap.get(org).add(revisionId);
  }
 else {
    Collection<ModuleRevisionId> deps=new HashSet<ModuleRevisionId>();
    deps.add(revisionId);
    orgToDepMap.put(org,deps);
  }
  dependencyDescriptors.add(descriptor);
  if (descriptor.isExportedToApplication()) {
    moduleDescriptor.addDependency(descriptor);
  }
}
