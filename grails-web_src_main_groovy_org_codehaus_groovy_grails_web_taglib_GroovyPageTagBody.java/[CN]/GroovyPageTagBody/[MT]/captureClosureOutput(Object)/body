{
  final GroovyPageTagWriter capturedOut=new GroovyPageTagWriter(preferSubChunkWhenWritingToOtherBuffer);
  Binding currentBinding=originalBinding;
  boolean itChanged=false;
  Object originalIt=null;
  try {
    pushCapturedOut(capturedOut);
    Object bodyResult;
    if (args != null) {
      if (args instanceof Map && ((Map)args).size() > 0) {
        currentBinding=new GroovyPageBinding(originalBinding);
        ((GroovyPageBinding)currentBinding).addMap((Map)args);
        changeBinding(currentBinding);
      }
 else {
        Map variablesMap=(currentBinding instanceof AbstractGroovyPageBinding) ? ((AbstractGroovyPageBinding)currentBinding).getVariablesMap() : currentBinding.getVariables();
        originalIt=variablesMap.get("it");
        variablesMap.put("it",args);
        itChanged=true;
      }
      bodyResult=executeClosure(args);
    }
 else {
      bodyResult=executeClosure(null);
    }
    if (!capturedOut.isUsed() && bodyResult != null && !(bodyResult instanceof Writer)) {
      return bodyResult;
    }
    return capturedOut.getBuffer();
  }
  finally {
    if (currentBinding != originalBinding) {
      changeBinding(originalBinding);
    }
    if (itChanged) {
      Map variablesMap=(currentBinding instanceof AbstractGroovyPageBinding) ? ((AbstractGroovyPageBinding)currentBinding).getVariablesMap() : currentBinding.getVariables();
      variablesMap.put("it",originalIt);
    }
    popCapturedOut();
  }
}
