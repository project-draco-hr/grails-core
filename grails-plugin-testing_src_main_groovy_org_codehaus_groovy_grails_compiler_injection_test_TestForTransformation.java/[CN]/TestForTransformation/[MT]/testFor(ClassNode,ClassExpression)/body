{
  autoAnnotateSetupTeardown(classNode);
  boolean isJunit3Test=isJunit3Test(classNode);
  FieldNode log=classNode.getField("log");
  if (log == null || log.getDeclaringClass().equals(GROOVY_TEST_CASE_CLASS)) {
    LoggingTransformer.addLogField(classNode,classNode.getName());
  }
  boolean isSpockTest=isSpockTest(classNode);
  boolean isJunit4=!isSpockTest && !isJunit3Test;
  if (isJunit4) {
    Map<String,MethodNode> declaredMethodsMap=classNode.getDeclaredMethodsMap();
    boolean hasTestMethods=false;
    for (    String methodName : declaredMethodsMap.keySet()) {
      MethodNode methodNode=declaredMethodsMap.get(methodName);
      if (isCandidateMethod(methodNode) && methodNode.getName().startsWith("test")) {
        if (methodNode.getAnnotations().size() == 0) {
          methodNode.addAnnotation(TEST_ANNOTATION);
          hasTestMethods=true;
        }
      }
    }
    if (!hasTestMethods) {
      isJunit4=false;
    }
  }
  if (isJunit4 || isJunit3Test || isSpockTest) {
    final MethodNode methodToAdd=weaveMock(classNode,ce,true);
    if (methodToAdd != null && isJunit3Test) {
      addMethodCallsToMethod(classNode,SET_UP_METHOD,Arrays.asList(methodToAdd));
    }
  }
}
