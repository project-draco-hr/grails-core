{
  ClassPropertyFetcher cpf=ClassPropertyFetcher.forClass(relatedClassType);
  Object relatedBelongsTo=cpf.getPropertyValue(GrailsDomainClassProperty.BELONGS_TO);
  boolean owningSide=false;
  boolean relatedOwner=this.owners.contains(relatedClassType);
  final Class propertyClass=property.getDomainClass().getClazz();
  if (relatedBelongsTo instanceof Collection) {
    owningSide=((Collection)relatedBelongsTo).contains(propertyClass);
  }
 else   if (relatedBelongsTo != null) {
    owningSide=relatedBelongsTo.equals(propertyClass);
  }
  property.setOwningSide(owningSide);
  if (relatedOwner && property.isOwningSide()) {
    throw new GrailsDomainException("Domain classes [" + propertyClass + "] and ["+ relatedClassType+ "] cannot own each other in a many-to-many relationship. Both contain belongsTo definitions that reference each other.");
  }
 else   if (!relatedOwner && !property.isOwningSide() && !(property.isCircular() && property.isManyToMany())) {
    throw new GrailsDomainException("No owner defined between domain classes [" + propertyClass + "] and ["+ relatedClassType+ "] in a many-to-many relationship. Example: def belongsTo = "+ relatedClassType.getName());
  }
}
