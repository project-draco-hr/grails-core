{
  if (new File(location).exists()) {
    return "file:" + location;
  }
  if (HAS_SCHEME_PATTERN.matcher(location).matches())   return location;
  if (!location.startsWith(SLASH))   location=SLASH + location;
  if (HAS_SCHEME_PATTERN.matcher(location).matches())   return location;
  BuildSettings buildSettings=BuildSettingsHolder.getSettings();
  if (buildSettings != null && buildSettings.isInlinePluginLocation(new File(location.replaceAll(GRAILS_APP_DIR_PATTERN,"")))) {
    return "file:" + location;
  }
  if (!location.startsWith(GrailsResourceUtils.WEB_INF)) {
    return GrailsResourceUtils.WEB_APP_DIR + location;
  }
  final String noWebInf=location.substring(GrailsResourceUtils.WEB_INF.length() + 1);
  final String defaultPath="file:" + baseLocation + SLASH+ noWebInf;
  if (!noWebInf.startsWith(PLUGINS_PREFIX)) {
    return defaultPath;
  }
  if (application != null && buildSettings != null) {
    PluginBuildSettings pluginBuildSettings=GrailsPluginUtils.getPluginBuildSettings();
    String pluginPath=GrailsStringUtils.substringAfter(noWebInf,SLASH);
    String pluginName=GrailsStringUtils.substringBefore(pluginPath,SLASH);
    String remainingPath=GrailsStringUtils.substringAfter(pluginPath,SLASH);
    org.grails.io.support.Resource r=pluginBuildSettings.getPluginDirForName(pluginName);
    if (r != null) {
      try {
        return "file:" + r.getFile().getAbsolutePath() + SLASH+ remainingPath;
      }
 catch (      IOException e) {
        LOG.debug("Unable to locate plugin resource -- returning default path " + defaultPath + ".",e);
        return defaultPath;
      }
    }
    if (buildSettings != null) {
      return "file:" + buildSettings.getProjectPluginsDir().getAbsolutePath() + SLASH+ pluginName+ SLASH+ remainingPath;
    }
  }
  return defaultPath;
}
