{
  Constraint validatorConstraint=new ValidatorConstraint();
  assertEquals(ConstrainedProperty.VALIDATOR_CONSTRAINT,validatorConstraint.getName());
  assertTrue(validatorConstraint.supports(TestClass.class));
  assertFalse(validatorConstraint.supports(null));
  validatorConstraint.setOwningClass(TestClass.class);
  validatorConstraint.setPropertyName(PROP_NAME);
  try {
    getConstraint("testString","Test");
    fail("ValidatorConstraint must throw an exception for non-closure parameter.");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    getConstraint("{ param1, param2, param3, param4 -> return true}");
    fail("ValidatorConstraint must throw exception about closure with more that 3 params");
  }
 catch (  IllegalArgumentException iae) {
  }
}
