{
  GrailsDomainClass domainClass=(GrailsDomainClass)this.grailsApplication.getArtefact(DomainClassArtefactHandler.TYPE,"PersistentMethodTests");
  GroovyObject obj=(GroovyObject)domainClass.newInstance();
  obj.setProperty("id",new Long(1));
  obj.setProperty("firstName","fred");
  obj.setProperty("lastName","flintstone");
  obj.invokeMethod("save",null);
  obj=(GroovyObject)domainClass.newInstance();
  obj.setProperty("id",new Long(2));
  obj.setProperty("firstName","wilma");
  obj.setProperty("lastName","flintstone");
  obj.invokeMethod("save",null);
  MetaClass domain=obj.getMetaClass();
  try {
    domain.invokeStaticMethod(obj,"executeQuery",new Object[]{});
    fail("Should have thrown an exception");
  }
 catch (  Exception e) {
  }
  try {
    domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"query","param",new HashMap(),"4"});
    fail("Should have thrown an exception");
  }
 catch (  Exception e) {
  }
  try {
    domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"query","param","wrong third param"});
    fail("Should have thrown an exception");
  }
 catch (  Exception e) {
  }
  Object returnValue=domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p"});
  assertNotNull(returnValue);
  assertEquals(ArrayList.class,returnValue.getClass());
  List listResult=(List)returnValue;
  assertEquals(2,listResult.size());
  Map paginateParams=new HashMap();
  paginateParams.put("max",new Integer(1));
  listResult=(List)obj.getMetaClass().invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p order by p.firstName",paginateParams});
  assertEquals(1,listResult.size());
  assertEquals("fred",((GroovyObject)listResult.get(0)).getProperty("firstName"));
  paginateParams.put("offset",new Integer(1));
  listResult=(List)obj.getMetaClass().invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p order by p.firstName",paginateParams});
  assertEquals(1,listResult.size());
  assertEquals("wilma",((GroovyObject)listResult.get(0)).getProperty("firstName"));
  List args=new ArrayList();
  args.add("wilma");
  listResult=(List)domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p where p.firstName = ?",args});
  assertEquals(1,listResult.size());
  listResult=(List)domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p where p.firstName = ?","wilma"});
  assertEquals(1,listResult.size());
  Map namedArgs=new HashMap();
  namedArgs.put("name","wilma");
  listResult=(List)domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p where p.firstName = :name",namedArgs});
  assertEquals(1,listResult.size());
  namedArgs.clear();
  List namesList=new ArrayList();
  namesList.add("wilma");
  namesList.add("fred");
  namedArgs.put("namesList",namesList);
  listResult=(List)domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p where p.firstName in (:namesList) order by p.firstName",namedArgs});
  assertEquals(2,listResult.size());
  paginateParams.clear();
  paginateParams.put("max",new Integer(1));
  listResult=(List)domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p where p.firstName in (:namesList) order by p.firstName",namedArgs,paginateParams});
  assertEquals(1,listResult.size());
  assertEquals("fred",((GroovyObject)listResult.get(0)).getProperty("firstName"));
  paginateParams.put("offset",new Integer(1));
  listResult=(List)domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p where p.firstName in (:namesList) order by p.firstName",namedArgs,paginateParams});
  assertEquals(1,listResult.size());
  assertEquals("wilma",((GroovyObject)listResult.get(0)).getProperty("firstName"));
  try {
    namedArgs.clear();
    namedArgs.put(new Long(1),"wilma");
    domain.invokeStaticMethod(obj,"executeQuery",new Object[]{"select distinct p from PersistentMethodTests as p where p.firstName = :name",namedArgs});
    fail("Should have thrown grails query exception");
  }
 catch (  GrailsQueryException gqe) {
  }
}
