{
  Parameter[] parameterTypes=delegateMethod.getParameters();
  String declaredMethodName=delegateMethod.getName();
  if (METHOD_MISSING_METHOD_NAME.equals(declaredMethodName)) {
    declaredMethodName=STATIC_METHOD_MISSING_METHOD_NAME;
  }
  if (classNode.hasDeclaredMethod(declaredMethodName,copyParameters(parameterTypes,genericsPlaceholders))) {
    return null;
  }
  BlockStatement methodBody=new BlockStatement();
  ArgumentListExpression arguments=createArgumentListFromParameters(parameterTypes,false,genericsPlaceholders);
  MethodCallExpression methodCallExpression=new MethodCallExpression(delegate,delegateMethod.getName(),arguments);
  methodCallExpression.setMethodTarget(delegateMethod);
  if (!noNullCheck && !(delegate instanceof ClassExpression)) {
    ThrowStatement missingMethodException=createMissingMethodThrowable(classNode,delegateMethod);
    VariableExpression apiVar=addApiVariableDeclaration(delegate,delegateMethod,methodBody);
    IfStatement ifStatement=createIfElseStatementForApiMethodCall(methodCallExpression,apiVar,missingMethodException);
    methodBody.addStatement(ifStatement);
  }
 else {
    methodBody.addStatement(new ExpressionStatement(methodCallExpression));
  }
  ClassNode returnType=replaceGenericsPlaceholders(delegateMethod.getReturnType(),genericsPlaceholders);
  MethodNode methodNode=new MethodNode(declaredMethodName,Modifier.PUBLIC | Modifier.STATIC,returnType,copyParameters(parameterTypes,genericsPlaceholders),GrailsArtefactClassInjector.EMPTY_CLASS_ARRAY,methodBody);
  methodNode.addAnnotations(delegateMethod.getAnnotations());
  if (shouldAddMarkerAnnotation(markerAnnotation,methodNode)) {
    methodNode.addAnnotation(markerAnnotation);
  }
  classNode.addMethod(methodNode);
  return methodNode;
}
