{
  List<Resource> potentialScripts;
  List<Resource> allScripts=getAvailableScripts();
  GantBinding binding=new GantBinding();
  binding.setVariable("scriptName",scriptName);
  setDefaultInputStream(binding);
  potentialScripts=getPotentialScripts(scriptName,allScripts);
  if (potentialScripts.size() == 0) {
    try {
      File aliasFile=new File(settings.getUserHome(),".grails/.aliases");
      if (aliasFile.exists()) {
        Properties aliasProperties=new Properties();
        aliasProperties.load(new FileReader(aliasFile));
        if (aliasProperties.containsKey(commandLine.getCommandName())) {
          String aliasValue=(String)aliasProperties.get(commandLine.getCommandName());
          String[] aliasPieces=aliasValue.split(" ");
          String commandName=aliasPieces[0];
          String correspondingScriptName=GrailsNameUtils.getNameFromScript(commandName);
          potentialScripts=getPotentialScripts(correspondingScriptName,allScripts);
          if (potentialScripts.size() > 0) {
            String[] additionalArgs=new String[aliasPieces.length - 1];
            System.arraycopy(aliasPieces,1,additionalArgs,0,additionalArgs.length);
            insertArgumentsInFrontOfExistingArguments(commandLine,additionalArgs);
          }
        }
      }
    }
 catch (    Exception e) {
      console.error(e);
    }
  }
  if (potentialScripts.size() > 0) {
    potentialScripts=(List)DefaultGroovyMethods.unique(potentialScripts);
    final Resource scriptFile=potentialScripts.get(0);
    if (!isGrailsProject() && !isExternalScript(scriptFile)) {
      return handleScriptExecutedOutsideProjectError();
    }
    return executeScriptFile(commandLine,scriptName,env,binding,scriptFile);
  }
  return attemptPrecompiledScriptExecute(commandLine,scriptName,env,binding,allScripts);
}
