{
  List<PropertyNode> propertiesToAdd=new ArrayList<PropertyNode>();
  for (  PropertyNode propertyNode : classNode.getProperties()) {
    final String name=propertyNode.getName();
    final boolean isHasManyProperty=name.equals(GrailsDomainClassProperty.RELATES_TO_MANY) || name.equals(GrailsDomainClassProperty.HAS_MANY);
    if (isHasManyProperty) {
      Expression e=propertyNode.getInitialExpression();
      propertiesToAdd.addAll(createPropertiesForHasManyExpression(e,classNode));
    }
    final boolean isBelongsToOrHasOne=name.equals(GrailsDomainClassProperty.BELONGS_TO) || name.equals(GrailsDomainClassProperty.HAS_ONE);
    if (isBelongsToOrHasOne) {
      Expression initialExpression=propertyNode.getInitialExpression();
      if ((!(initialExpression instanceof MapExpression)) && (!(initialExpression instanceof ClassExpression))) {
        if (name.equals(GrailsDomainClassProperty.HAS_ONE)) {
          final String message="WARNING: The hasOne property in class [" + classNode.getName() + "] should have an initial expression of type Map or Class.";
          System.err.println(message);
        }
 else         if (!(initialExpression instanceof ListExpression)) {
          final String message="WARNING: The belongsTo property in class [" + classNode.getName() + "] should have an initial expression of type List, Map or Class.";
          System.err.println(message);
        }
      }
      propertiesToAdd.addAll(createPropertiesForBelongsToOrHasOneExpression(initialExpression,classNode));
    }
  }
  injectAssociationProperties(classNode,propertiesToAdd);
}
