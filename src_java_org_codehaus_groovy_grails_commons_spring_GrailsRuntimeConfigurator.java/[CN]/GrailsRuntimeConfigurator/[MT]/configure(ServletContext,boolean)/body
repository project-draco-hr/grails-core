{
  Assert.notNull(application);
  WebApplicationContext ctx;
  try {
    WebRuntimeSpringConfiguration springConfig=new WebRuntimeSpringConfiguration(parent,application.getClassLoader());
    springConfig.setBeanFactory(new ReloadAwareAutowireCapableBeanFactory());
    if (context != null) {
      springConfig.setServletContext(context);
      this.pluginManager.setServletContext(context);
    }
    if (!this.pluginManager.isInitialised()) {
      this.pluginManager.loadPlugins();
    }
    if (!application.isInitialised()) {
      pluginManager.doArtefactConfiguration();
      application.initialise();
    }
    this.pluginManager.registerProvidedArtefacts(application);
    registerParentBeanFactoryPostProcessors(springConfig);
    this.pluginManager.doRuntimeConfiguration(springConfig);
    LOG.debug("[RuntimeConfiguration] Processing additional external configurations");
    if (loadExternalBeans) {
      doPostResourceConfiguration(application,springConfig);
    }
    reset();
    ctx=(WebApplicationContext)springConfig.getApplicationContext();
    this.application.setMainContext(ctx);
    this.pluginManager.setApplicationContext(ctx);
    this.pluginManager.doDynamicMethods();
    ctx.publishEvent(new GrailsContextEvent(ctx,GrailsContextEvent.DYNAMIC_METHODS_REGISTERED));
    performPostProcessing(ctx);
    application.refreshConstraints();
  }
  finally {
    ClassPropertyFetcher.clearClassPropertyFetcherCache();
  }
  return ctx;
}
