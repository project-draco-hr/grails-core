{
  Object[] fields=new Object[]{action,actionClass,actionClosure,actionFormDetails,decisionClosure,decisionExpression,subFlowId,viewClosure,viewName};
  boolean oneNotNull=false;
  if (StringUtils.isBlank(id)) {
    throw new IllegalStateException("State id must be specified!");
  }
  for (int i=0; i < fields.length; i++) {
    if (oneNotNull) {
      if (fields[i] != null) {
        throw new IllegalStateException("Could not determine state type, more than one discriminator field was specified!");
      }
    }
 else {
      oneNotNull=fields[i] != null;
    }
  }
  if (isSubflowState()) {
    if ((subFlowInput != null || subFlowOutput != null) && (attributeMapper != null || attributeMapperClass != null)) {
      throw new IllegalStateException("attribute mapper and attribute mapper class must be null if either subflow input or subflow output are set!");
    }
 else     if (attributeMapper != null && (subFlowInput != null || subFlowOutput != null || attributeMapperClass != null)) {
      throw new IllegalStateException("subflow input and subflow output and attribute mapper class must be null if attribute mapper is set!");
    }
 else     if (attributeMapperClass != null && (subFlowInput != null || subFlowOutput != null || attributeMapper != null)) {
      throw new IllegalStateException("subflow input and subflow output and attribute mapper class must be null if attribute mapper class is set!");
    }
  }
  if (isDecisionState()) {
    if (StringUtils.isBlank(decisionTrueStateId)) {
      throw new IllegalStateException("Decision true state id must be set!");
    }
 else     if (StringUtils.isBlank(decisionFalseStateId)) {
      throw new IllegalStateException("Decision false state id must be set!");
    }
  }
  if (actionClass != null) {
    if (!Action.class.isAssignableFrom(actionClass) && !ClassUtils.hasMethod(actionClass,"execute",new Class[]{RequestContext.class})) {
      throw new IllegalStateException("Action class [" + actionClass.getName() + "] does not implement ["+ Action.class.getName()+ "] and has no public method [execute("+ RequestContext.class.getName()+ ")]!");
    }
 else     if (Modifier.isAbstract(actionClass.getModifiers())) {
      throw new IllegalStateException("Action class [" + actionClass.getName() + "] is abstract!");
    }
  }
  if (attributeMapperClass != null) {
    if (!FlowAttributeMapper.class.isAssignableFrom(attributeMapperClass)) {
      throw new IllegalStateException("Flow attribute mapper class [" + attributeMapperClass.getName() + "] does not implement ["+ FlowAttributeMapper.class.getName()+ "]!");
    }
 else     if (Modifier.isAbstract(attributeMapperClass.getModifiers())) {
      throw new IllegalStateException("Flow attribute mapper class [" + attributeMapperClass.getName() + "] is abstract!");
    }
  }
}
