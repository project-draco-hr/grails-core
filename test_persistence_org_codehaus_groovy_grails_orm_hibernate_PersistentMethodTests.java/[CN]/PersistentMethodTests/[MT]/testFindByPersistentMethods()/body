{
  GrailsDomainClass domainClass=(GrailsDomainClass)this.grailsApplication.getArtefact(DomainClassArtefactHandler.TYPE,"PersistentMethodTests");
  GroovyObject obj=(GroovyObject)domainClass.newInstance();
  obj.setProperty("id",new Long(1));
  obj.setProperty("firstName","fred");
  obj.setProperty("lastName","flintstone");
  obj.setProperty("age",new Integer(45));
  obj.invokeMethod("save",null);
  GroovyObject obj2=(GroovyObject)domainClass.newInstance();
  obj2.setProperty("id",new Long(2));
  obj2.setProperty("firstName","wilma");
  obj2.setProperty("lastName","flintstone");
  obj2.setProperty("age",new Integer(42));
  obj2.invokeMethod("save",null);
  GroovyObject obj3=(GroovyObject)domainClass.newInstance();
  obj3.setProperty("id",new Long(3));
  obj3.setProperty("firstName","dino");
  obj3.setProperty("lastName","dinosaur");
  obj3.setProperty("age",new Integer(12));
  obj3.invokeMethod("save",null);
  Object returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAllByFirstName",new Object[]{"fred",new Integer(10)});
  assertNotNull(returnValue);
  assertTrue(returnValue instanceof List);
  List returnList=(List)returnValue;
  assertEquals(1,returnList.size());
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findAllByFirstNameAndLastName",new Object[]{"fred","flintstone"});
  assertNotNull(returnValue);
  assertTrue(returnValue instanceof List);
  returnList=(List)returnValue;
  assertEquals(1,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByFirstNameNotEqual",new Object[]{"fred"});
  assertEquals(2,returnList.size());
  obj=(GroovyObject)returnList.get(0);
  obj2=(GroovyObject)returnList.get(1);
  assertFalse("fred".equals(obj.getProperty("firstName")));
  assertFalse("fred".equals(obj2.getProperty("firstName")));
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByAgeLessThan",new Object[]{new Integer(20)});
  assertEquals(1,returnList.size());
  obj=(GroovyObject)returnList.get(0);
  assertEquals("dino",obj.getProperty("firstName"));
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByAgeLessThanEquals",new Object[]{new Integer(12)});
  assertEquals(1,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByAgeGreaterThan",new Object[]{new Integer(20)});
  assertEquals(2,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByAgeGreaterThanEquals",new Object[]{new Integer(42)});
  assertEquals(2,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByAgeGreaterThanAndLastName",new Object[]{new Integer(20),"flintstone"});
  assertEquals(2,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByLastNameLike",new Object[]{"flint%"});
  assertEquals(2,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByLastNameIlike",new Object[]{"FLINT%"});
  assertEquals(2,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByAgeBetween",new Object[]{new Integer(10),new Integer(43)});
  assertEquals(2,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllByActive",new Object[]{Boolean.TRUE});
  assertEquals(3,returnList.size());
  Map queryMap=new HashMap();
  queryMap.put("firstName","wilma");
  queryMap.put("lastName","flintstone");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"findWhere",new Object[]{queryMap});
  assertNotNull(returnValue);
  queryMap=new HashMap();
  queryMap.put("lastName","flintstone");
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllWhere",new Object[]{queryMap});
  assertEquals(2,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllById",new Object[]{"1"});
  assertEquals(1,returnList.size());
  returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllById",new Object[]{new Integer("1")});
  assertEquals(1,returnList.size());
  try {
    returnList=(List)obj.getMetaClass().invokeStaticMethod(obj,"findAllById",new Object[]{"1.1"});
  }
 catch (  MissingMethodException iae) {
  }
catch (  InvokerInvocationException iie) {
  }
  try {
    obj.getMetaClass().invokeStaticMethod(obj,"findAllByAgeBetween",new Object[]{new Integer(10)});
    fail("Should have thrown an exception for invalid argument count");
  }
 catch (  MissingMethodException mme) {
  }
catch (  InvokerInvocationException iie) {
  }
}
