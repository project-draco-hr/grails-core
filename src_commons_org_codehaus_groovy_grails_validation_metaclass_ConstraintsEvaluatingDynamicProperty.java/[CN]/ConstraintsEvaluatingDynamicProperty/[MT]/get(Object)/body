{
  if (object instanceof GroovyObject) {
    GroovyObject go=(GroovyObject)object;
    if (go.getMetaClass() instanceof ProxyMetaClass) {
      go.setMetaClass(((ProxyMetaClass)go.getMetaClass()).getAdaptee());
    }
  }
  try {
    Closure c=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(object,PROPERTY_NAME);
    if (c == null)     throw new InvalidPropertyException(object.getClass(),PROPERTY_NAME,"[constraints] property not found");
    ConstrainedPropertyBuilder delegate=new ConstrainedPropertyBuilder(object);
    c.setDelegate(delegate);
    c.call();
    Map constrainedProperties=delegate.getConstrainedProperties();
    if (this.persistentProperties != null) {
      for (int i=0; i < this.persistentProperties.length; i++) {
        GrailsDomainClassProperty p=this.persistentProperties[i];
        if (!p.isOptional()) {
          ConstrainedProperty cp=(ConstrainedProperty)constrainedProperties.get(p.getName());
          if (cp == null) {
            cp=new ConstrainedPersistentProperty(p.getDomainClass().getClazz(),p.getName(),p.getType());
            cp.setOrder(constrainedProperties.size() + 1);
            constrainedProperties.put(p.getName(),cp);
          }
          if (!p.isAssociation())           cp.applyConstraint(ConstrainedProperty.NULLABLE_CONSTRAINT,Boolean.FALSE);
        }
      }
    }
    return constrainedProperties;
  }
 catch (  BeansException be) {
    String className=object.getClass().getName();
    String constraintsScript=className.replaceAll("\\.","/") + CONSTRAINTS_GROOVY;
    InputStream stream=getClass().getClassLoader().getResourceAsStream(constraintsScript);
    if (stream != null) {
      GroovyClassLoader gcl=new GroovyClassLoader();
      try {
        Class scriptClass=gcl.parseClass(stream);
        Script script=(Script)scriptClass.newInstance();
        script.run();
        Binding binding=script.getBinding();
        if (binding.getVariables().containsKey(PROPERTY_NAME)) {
          Closure c=(Closure)binding.getVariable(PROPERTY_NAME);
          ConstrainedPropertyBuilder delegate=new ConstrainedPropertyBuilder(object);
          c.setDelegate(delegate);
          c.call();
          return delegate.getConstrainedProperties();
        }
 else {
          LOG.warn("Unable to evaluate constraints from [" + constraintsScript + "], constraints closure not found!");
          return Collections.EMPTY_MAP;
        }
      }
 catch (      CompilationFailedException e) {
        LOG.error("Compilation error evaluating constraints for class [" + object.getClass() + "]: "+ e.getMessage(),e);
        return Collections.EMPTY_MAP;
      }
catch (      InstantiationException e) {
        LOG.error("Instantiation error evaluating constraints for class [" + object.getClass() + "]: "+ e.getMessage(),e);
        return Collections.EMPTY_MAP;
      }
catch (      IllegalAccessException e) {
        LOG.error("Illegal access error evaluating constraints for class [" + object.getClass() + "]: "+ e.getMessage(),e);
        return Collections.EMPTY_MAP;
      }
    }
 else {
      return Collections.EMPTY_MAP;
    }
  }
}
