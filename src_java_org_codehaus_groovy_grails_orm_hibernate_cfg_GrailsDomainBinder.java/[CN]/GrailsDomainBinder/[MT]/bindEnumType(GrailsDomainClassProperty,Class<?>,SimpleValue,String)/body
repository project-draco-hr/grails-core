{
  Properties enumProperties=new Properties();
  enumProperties.put(ENUM_CLASS_PROP,propertyType.getName());
  PropertyConfig pc=getPropertyConfig(property);
  String enumType=pc != null ? pc.getEnumType() : DEFAULT_ENUM_TYPE;
  if (enumType.equals(DEFAULT_ENUM_TYPE) && IdentityEnumType.supports(propertyType)) {
    simpleValue.setTypeName(IdentityEnumType.class.getName());
  }
 else {
    simpleValue.setTypeName(ENUM_TYPE_CLASS);
    if (enumType.equals(DEFAULT_ENUM_TYPE) || "string".equalsIgnoreCase(enumType)) {
      enumProperties.put(ENUM_TYPE_PROP,String.valueOf(Types.VARCHAR));
    }
 else     if (!"ordinal".equalsIgnoreCase(enumType)) {
      LOG.warn("Invalid enumType specified when mapping property [" + property.getName() + "] of class ["+ property.getDomainClass().getClazz().getName()+ "]. Using defaults instead.");
    }
  }
  simpleValue.setTypeParameters(enumProperties);
  Table t=simpleValue.getTable();
  Column column=new Column();
  if (property.getDomainClass().isRoot()) {
    column.setNullable(property.isOptional());
  }
 else {
    if (LOG.isDebugEnabled())     LOG.debug("[GrailsDomainBinder] Sub class property [" + property.getName() + "] for column name ["+ column.getName()+ "] set to nullable");
    column.setNullable(true);
  }
  column.setValue(simpleValue);
  column.setName(columnName);
  if (t != null)   t.addColumn(column);
  simpleValue.addColumn(column);
}
