{
  RegexValidator sensitive=new RegexValidator(REGEX);
  RegexValidator insensitive=new RegexValidator(REGEX,false);
  assertEquals("Sensitive isValid() valid",true,sensitive.isValid("ac-DE-1"));
  assertEquals("Sensitive isValid() invalid",false,sensitive.isValid("AB-de-1"));
  assertEquals("Insensitive isValid() valid",true,insensitive.isValid("AB-de-1"));
  assertEquals("Insensitive isValid() invalid",false,insensitive.isValid("ABd-de-1"));
  assertEquals("Sensitive validate() valid","acDE1",sensitive.validate("ac-DE-1"));
  assertEquals("Sensitive validate() invalid",null,sensitive.validate("AB-de-1"));
  assertEquals("Insensitive validate() valid","ABde1",insensitive.validate("AB-de-1"));
  assertEquals("Insensitive validate() invalid",null,insensitive.validate("ABd-de-1"));
  checkArray("Sensitive match() valid",new String[]{"ac","DE","1"},sensitive.match("ac-DE-1"));
  checkArray("Sensitive match() invalid",null,sensitive.match("AB-de-1"));
  checkArray("Insensitive match() valid",new String[]{"AB","de","1"},insensitive.match("AB-de-1"));
  checkArray("Insensitive match() invalid",null,insensitive.match("ABd-de-1"));
  assertEquals("validate one","ABC",(new RegexValidator("^([A-Z]*)$")).validate("ABC"));
  checkArray("match one",new String[]{"ABC"},(new RegexValidator("^([A-Z]*)$")).match("ABC"));
}
