{
  if (arguments.length == 0)   throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  boolean renderView=true;
  GroovyObject controller=(GroovyObject)target;
  if ((arguments[0] instanceof String) || (arguments[0] instanceof GString)) {
    try {
      response.getWriter().write(arguments[0].toString());
      renderView=false;
    }
 catch (    IOException e) {
      throw new ControllerExecutionException(e.getMessage(),e);
    }
  }
 else   if (arguments[0] instanceof Closure) {
    StreamingMarkupBuilder b=new StreamingMarkupBuilder();
    Writable markup=(Writable)b.bind(arguments[arguments.length - 1]);
    try {
      markup.writeTo(response.getWriter());
    }
 catch (    IOException e) {
      throw new ControllerExecutionException("I/O error executing render method for arguments [" + arguments[0] + "]: "+ e.getMessage(),e);
    }
    renderView=false;
  }
 else   if (arguments[0] instanceof Map) {
    Map argMap=(Map)arguments[0];
    PrintWriter out;
    try {
      if (argMap.containsKey(ARGUMENT_CONTENT_TYPE) && argMap.containsKey(ARGUMENT_ENCODING)) {
        out=response.getWriter(argMap.get(ARGUMENT_CONTENT_TYPE).toString(),argMap.get(ARGUMENT_ENCODING).toString());
      }
 else       if (argMap.containsKey(ARGUMENT_CONTENT_TYPE)) {
        out=response.getWriter(argMap.get(ARGUMENT_CONTENT_TYPE).toString());
      }
 else {
        out=response.getWriter();
      }
    }
 catch (    IOException ioe) {
      throw new ControllerExecutionException("I/O creating write in method [render] on class [" + target.getClass() + "]: "+ ioe.getMessage(),ioe);
    }
    if (arguments[arguments.length - 1] instanceof Closure) {
      if (BUILDER_TYPE_RICO.equals(argMap.get(ARGUMENT_BUILDER))) {
        OpenRicoBuilder orb;
        try {
          orb=new OpenRicoBuilder(response);
          renderView=false;
        }
 catch (        IOException e) {
          throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ e.getMessage(),e);
        }
        orb.invokeMethod("ajax",new Object[]{arguments[arguments.length - 1]});
      }
 else {
        StreamingMarkupBuilder b=new StreamingMarkupBuilder();
        Writable markup=(Writable)b.bind(arguments[arguments.length - 1]);
        try {
          markup.writeTo(out);
        }
 catch (        IOException e) {
          throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ e.getMessage(),e);
        }
        renderView=false;
      }
    }
 else     if (arguments[arguments.length - 1] instanceof String) {
      out.write((String)arguments[arguments.length - 1]);
      renderView=false;
    }
 else     if (argMap.containsKey(ARGUMENT_TEXT)) {
      String text=argMap.get(ARGUMENT_TEXT).toString();
      out.write(text);
      renderView=false;
    }
 else     if (argMap.containsKey(ARGUMENT_VIEW)) {
      String viewName=argMap.get(ARGUMENT_VIEW).toString();
      String viewUri;
      if (viewName.indexOf('/') > -1) {
        if (!viewName.startsWith("/"))         viewName='/' + viewName;
        viewUri=viewName;
      }
 else {
        GrailsControllerClass controllerClass=helper.getControllerClassByName(target.getClass().getName());
        viewUri=controllerClass.getViewByName(viewName);
      }
      Map model;
      Object modelObject=argMap.get(ARGUMENT_MODEL);
      if (modelObject instanceof Map) {
        model=(Map)modelObject;
      }
 else {
        model=new BeanMap(target);
      }
      controller.setProperty(ControllerDynamicMethods.MODEL_AND_VIEW_PROPERTY,new ModelAndView(viewUri,model));
    }
 else     if (argMap.containsKey(ARGUMENT_TEMPLATE)) {
      String templateName=argMap.get(ARGUMENT_TEMPLATE).toString();
      String var=(String)argMap.get(ARGUMENT_VAR);
      GrailsApplicationAttributes attrs=(GrailsApplicationAttributes)controller.getProperty(ControllerDynamicMethods.GRAILS_ATTRIBUTES);
      String templateUri;
      if (templateName.indexOf('/') > -1) {
        if (!templateName.startsWith("/"))         templateName='/' + templateName;
        templateUri=templateName;
      }
 else {
        templateUri=attrs.getTemplateUri(templateName,request);
      }
      GroovyPagesTemplateEngine engine=attrs.getPagesTemplateEngine();
      try {
        Template t=engine.createTemplate(templateUri,attrs.getServletContext(),request,response);
        Map binding=new HashMap();
        if (argMap.containsKey(ARGUMENT_BEAN)) {
          if (StringUtils.isBlank(var))           binding.put(DEFAULT_ARGUMENT,argMap.get(ARGUMENT_BEAN));
 else           binding.put(var,argMap.get(ARGUMENT_BEAN));
          Writable w=t.make(binding);
          w.writeTo(out);
        }
 else         if (argMap.containsKey(ARGUMENT_COLLECTION)) {
          Object colObject=argMap.get(ARGUMENT_COLLECTION);
          if (colObject instanceof Collection) {
            Collection c=(Collection)colObject;
            for (Iterator i=c.iterator(); i.hasNext(); ) {
              Object o=i.next();
              if (StringUtils.isBlank(var))               binding.put(DEFAULT_ARGUMENT,o);
 else               binding.put(var,o);
              Writable w=t.make(binding);
              w.writeTo(out);
            }
          }
 else {
            if (StringUtils.isBlank(var))             binding.put(DEFAULT_ARGUMENT,argMap.get(ARGUMENT_BEAN));
 else             binding.put(var,colObject);
            Writable w=t.make(binding);
            w.writeTo(out);
          }
        }
 else         if (argMap.containsKey(ARGUMENT_MODEL)) {
          Object modelObject=argMap.get(ARGUMENT_MODEL);
          if (modelObject instanceof Map) {
            Writable w=t.make((Map)argMap.get(ARGUMENT_MODEL));
            w.writeTo(out);
          }
 else {
            Writable w=t.make(new BeanMap(target));
            w.writeTo(out);
          }
        }
 else {
          Writable w=t.make(new BeanMap(target));
          w.writeTo(out);
        }
        renderView=false;
      }
 catch (      IOException ioex) {
        throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ ioex.getMessage(),ioex);
      }
catch (      ServletException e) {
        throw new ControllerExecutionException("Servlet exception executing render method for arguments [" + argMap + "]: "+ e.getMessage(),e);
      }
    }
 else {
      throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
    }
  }
 else {
    throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  }
  controller.setProperty(ControllerDynamicMethods.RENDER_VIEW_PROPERTY,Boolean.valueOf(renderView));
  return null;
}
