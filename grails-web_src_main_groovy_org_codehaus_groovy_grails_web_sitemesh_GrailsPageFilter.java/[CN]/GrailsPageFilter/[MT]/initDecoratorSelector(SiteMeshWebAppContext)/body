{
  final Factory factory=Factory.getInstance(new Config(filterConfig));
  factory.refresh();
  return new DecoratorMapper2DecoratorSelector(factory.getDecoratorMapper()){
    @Override public Decorator selectDecorator(    Content content,    final SiteMeshContext context){
      SiteMeshWebAppContext siteMeshWebAppContext=(SiteMeshWebAppContext)context;
      final com.opensymphony.module.sitemesh.Decorator decorator=factory.getDecoratorMapper().getDecorator(siteMeshWebAppContext.getRequest(),content2htmlPage(content));
      if (decorator == null || decorator.getPage() == null) {
        return new GrailsNoDecorator();
      }
      return new Decorator(){
        private void render(        @SuppressWarnings("hiding") Content content,        HttpServletRequest request,        HttpServletResponse response,        ServletContext servletContext) throws IOException, ServletException {
          HTMLPage htmlPage=content2htmlPage(content);
          request.setAttribute(RequestConstants.PAGE,htmlPage);
          if (decorator.getURIPath() != null) {
            if (servletContext.getContext(decorator.getURIPath()) != null) {
              servletContext=servletContext.getContext(decorator.getURIPath());
            }
          }
          if (!response.isCommitted()) {
            boolean dispatched=false;
            try {
              request.setAttribute(ALREADY_APPLIED_KEY,Boolean.TRUE);
              GroovyPageView gspSpringView=new GroovyPageView();
              gspSpringView.setServletContext(servletContext);
              gspSpringView.setUrl(decorator.getPage());
              gspSpringView.setApplicationContext(applicationContext);
              gspSpringView.setTemplateEngine(templateEngine);
              try {
                gspSpringView.render(Collections.<String,Object>emptyMap(),request,response);
                dispatched=true;
                if (!response.isCommitted()) {
                  response.getWriter().flush();
                }
              }
 catch (              Exception e) {
                cleanRequestAttributes(request);
                throw new GroovyPagesException("Error applying layout : " + decorator.getPage(),e);
              }
            }
  finally {
              if (!dispatched) {
                cleanRequestAttributes(request);
              }
            }
          }
          request.removeAttribute(RequestConstants.PAGE);
        }
        public void render(        Content content,        SiteMeshContext siteMeshContext){
          SiteMeshWebAppContext webAppContext=(SiteMeshWebAppContext)siteMeshContext;
          try {
            render(content,webAppContext.getRequest(),webAppContext.getResponse(),webAppContext.getServletContext());
          }
 catch (          IOException e) {
            throw new GroovyPagesException("Error applying layout : " + decorator.getURIPath(),e);
          }
catch (          ServletException e) {
            throw new GroovyPagesException("Error applying layout : " + decorator.getURIPath(),e);
          }
        }
      }
;
    }
  }
;
}
