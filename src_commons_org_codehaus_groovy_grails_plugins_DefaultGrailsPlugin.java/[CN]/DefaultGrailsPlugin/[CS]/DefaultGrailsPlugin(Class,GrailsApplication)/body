{
  super(pluginClass,application);
  this.pluginGrailsClass=new GrailsPluginClass(pluginClass);
  this.plugin=(GroovyObject)this.pluginGrailsClass.newInstance();
  this.pluginBean=new BeanWrapperImpl(this.plugin);
  this.dependencies=Collections.EMPTY_MAP;
  this.parentCtx=application.getParentContext();
  if (this.pluginBean.isReadableProperty(DEPENDS_ON)) {
    this.dependencies=(Map)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,DEPENDS_ON);
    this.dependencyNames=(String[])this.dependencies.keySet().toArray(new String[this.dependencies.size()]);
  }
  if (this.pluginBean.isReadableProperty(VERSION)) {
    BigDecimal bd=(BigDecimal)this.plugin.getProperty("version");
    this.version=bd;
  }
 else {
    throw new PluginException("Plugin [" + getName() + "] must specify a version!");
  }
  if (this.pluginBean.isReadableProperty(ON_CHANGE)) {
    this.onChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,ON_CHANGE);
    Object referencedResources=GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,WATCHED_RESOURCES);
    this.resolver=new PathMatchingResourcePatternResolver();
    try {
      if (referencedResources instanceof String) {
        this.resourcesReference=referencedResources.toString();
        watchedResources=resolver.getResources(resourcesReference);
      }
 else       if (referencedResources instanceof List) {
        List resourceList=(List)referencedResources;
        watchedResources=new Resource[resourceList.size()];
        for (int i=0; i < resourceList.size(); i++) {
          String res=resourceList.get(i).toString();
          watchedResources[i]=resolver.getResource(res);
        }
      }
      initializeModifiedTimes();
    }
 catch (    IOException e) {
      LOG.warn("I/O exception loading plug-in resource watch list: " + e.getMessage(),e);
    }
  }
}
