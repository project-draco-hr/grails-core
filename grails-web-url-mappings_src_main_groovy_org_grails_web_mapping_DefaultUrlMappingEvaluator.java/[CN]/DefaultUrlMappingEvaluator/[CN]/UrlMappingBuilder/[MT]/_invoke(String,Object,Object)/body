{
  try {
    MetaMappingInfo mappingInfo=pushNewMetaMappingInfo();
    List<ConstrainedProperty> currentConstraints=mappingInfo.getConstraints();
    Object[] args=(Object[])arg;
    String mappedURI=establishFullURI(methodName,currentConstraints);
    final boolean isResponseCode=isResponseCode(mappedURI);
    if (mappedURI.startsWith(SLASH) || isResponseCode) {
      parameterValues=new HashMap<String,Object>();
      Map variables=binding != null ? binding.getVariables() : null;
      boolean hasParent=!parentResources.isEmpty();
      try {
        if (!hasParent) {
          urlDefiningMode=false;
        }
        args=args != null && args.length > 0 ? args : new Object[]{Collections.emptyMap()};
        if (args[0] instanceof Closure) {
          UrlMappingData urlData=createUrlMappingData(mappedURI,isResponseCode);
          Closure callable=(Closure)args[0];
          if (delegate != null) {
            callable.setDelegate(delegate);
          }
          callable.call();
          if (binding != null) {
            mappingInfo.setController(variables.get(GrailsControllerClass.CONTROLLER));
            mappingInfo.setAction(variables.get(GrailsControllerClass.ACTION));
            mappingInfo.setView(variables.get(GrailsControllerClass.VIEW));
            mappingInfo.setUri(variables.get(UrlMapping.URI));
            mappingInfo.setPlugin(variables.get(UrlMapping.PLUGIN));
            mappingInfo.setNamespace(variables.get(UrlMapping.NAMESPACE));
            if (variables.containsKey(UrlMapping.HTTP_METHOD)) {
              mappingInfo.setHttpMethod(variables.get(UrlMapping.HTTP_METHOD).toString());
            }
          }
          ConstrainedProperty[] constraints=currentConstraints.toArray(new ConstrainedProperty[currentConstraints.size()]);
          UrlMapping urlMapping;
          if (mappingInfo.getUri() != null) {
            try {
              urlMapping=new RegexUrlMapping(urlData,new URI(mappingInfo.getUri().toString()),constraints,grailsApplication);
            }
 catch (            URISyntaxException e) {
              throw new UrlMappingException("Cannot map to invalid URI: " + e.getMessage(),e);
            }
          }
 else {
            urlMapping=createURLMapping(urlData,isResponseCode,mappingInfo.getRedirectInfo(),mappingInfo.getController(),mappingInfo.getAction(),mappingInfo.getNamespace(),mappingInfo.getPlugin(),mappingInfo.getView(),mappingInfo.getHttpMethod(),null,constraints);
          }
          if (binding != null) {
            Map bindingVariables=variables;
            Object parse=getParseRequest(Collections.emptyMap(),bindingVariables);
            if (parse instanceof Boolean) {
              urlMapping.setParseRequest((Boolean)parse);
            }
          }
          configureUrlMapping(urlMapping);
          return urlMapping;
        }
        if (args[0] instanceof Map) {
          Map namedArguments=(Map)args[0];
          String uri=mappedURI;
          String version=null;
          if (namedArguments.containsKey(UrlMapping.VERSION)) {
            version=namedArguments.get(UrlMapping.VERSION).toString();
          }
          if (namedArguments.containsKey(UrlMapping.NAMESPACE)) {
            mappingInfo.setNamespace(namedArguments.get(UrlMapping.NAMESPACE).toString());
          }
          if (namedArguments.containsKey(UrlMapping.PLUGIN)) {
            mappingInfo.setPlugin(namedArguments.get(UrlMapping.PLUGIN).toString());
          }
          UrlMappingData urlData=createUrlMappingData(uri,isResponseCode);
          if (namedArguments.containsKey(RESOURCE) || namedArguments.containsKey(SINGLE)) {
            Object controller;
            if (namedArguments.containsKey(RESOURCE)) {
              GrailsUtil.deprecated("The ${RESOURCE} syntax is deprecated and will be removed in a future release. Use ${SINGLE} instead.");
              controller=namedArguments.get(RESOURCE);
            }
 else {
              controller=namedArguments.get(SINGLE);
            }
            String controllerName=controller.toString();
            mappingInfo.setController(controllerName);
            parentResources.push(new ParentResource(controllerName,uri,true));
            try {
              invokeLastArgumentIfClosure(args);
            }
  finally {
              parentResources.pop();
            }
            if (controller != null) {
              createSingleResourceRestfulMappings(controllerName,mappingInfo.getPlugin(),mappingInfo.getNamespace(),version,urlData,currentConstraints,calculateIncludes(namedArguments,DEFAULT_RESOURCE_INCLUDES));
            }
          }
 else           if (namedArguments.containsKey(RESOURCES)) {
            Object controller=namedArguments.get(RESOURCES);
            String controllerName=controller.toString();
            mappingInfo.setController(controllerName);
            parentResources.push(new ParentResource(controllerName,uri,false));
            try {
              invokeLastArgumentIfClosure(args);
            }
  finally {
              parentResources.pop();
            }
            if (controller != null) {
              createResourceRestfulMappings(controllerName,mappingInfo.getPlugin(),mappingInfo.getNamespace(),version,urlData,currentConstraints,calculateIncludes(namedArguments,DEFAULT_RESOURCES_INCLUDES));
            }
          }
 else {
            invokeLastArgumentIfClosure(args);
            UrlMapping urlMapping=getURLMappingForNamedArgs(namedArguments,urlData,mappedURI,isResponseCode,currentConstraints);
            configureUrlMapping(urlMapping);
            return urlMapping;
          }
        }
        return null;
      }
  finally {
        if (binding != null) {
          variables.clear();
        }
        if (!hasParent) {
          urlDefiningMode=true;
        }
      }
    }
 else     if ((!urlDefiningMode || (parentResources.size() > 0 && parentResources.peek().isGroup)) && CONSTRAINTS.equals(mappedURI)) {
      ConstrainedPropertyBuilder builder=new ConstrainedPropertyBuilder(this);
      if (args.length > 0 && (args[0] instanceof Closure)) {
        Closure callable=(Closure)args[0];
        callable.setDelegate(builder);
        callable.setResolveStrategy(Closure.DELEGATE_FIRST);
        for (        ConstrainedProperty constrainedProperty : currentConstraints) {
          builder.getConstrainedProperties().put(constrainedProperty.getPropertyName(),constrainedProperty);
        }
        callable.call();
      }
      return builder.getConstrainedProperties();
    }
 else {
      return super.invokeMethod(mappedURI,arg);
    }
  }
  finally {
    mappingInfoDeque.pop();
  }
}
