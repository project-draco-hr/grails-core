{
  if (arguments.length == 0)   throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  Object actionRef;
  String controllerName;
  Object id;
  Map params;
  Map model;
  Errors errors;
  GroovyObject controller=(GroovyObject)target;
  if (arguments[0] instanceof Map) {
    Map argMap=(Map)arguments[0];
    actionRef=argMap.get(ARGUMENT_ACTION);
    controllerName=(String)argMap.get(ARGUMENT_CONTROLLER);
    id=argMap.get(ARGUMENT_ID);
    params=(Map)argMap.get(ARGUMENT_PARAMS);
    model=(Map)argMap.get(ARGUMENT_MODEL);
    errors=(Errors)argMap.get(ARGUMENT_ERRORS);
  }
 else {
    throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  }
  GrailsApplicationAttributes attrs=helper.getGrailsAttributes();
  FlashScope fs=attrs.getFlashScope(request);
  if (fs.containsKey(PROPERTY_CHAIN_MODEL)) {
    Map chainModel=(Map)fs.get(PROPERTY_CHAIN_MODEL);
    if (chainModel != null) {
      chainModel.putAll(model);
      model=chainModel;
    }
  }
  fs.put(PROPERTY_CHAIN_MODEL,model);
  Errors controllerErrors=(Errors)controller.getProperty(ControllerDynamicMethods.ERRORS_PROPERTY);
  if (controllerErrors != null) {
    controllerErrors.addAllErrors(errors);
  }
 else {
    controller.setProperty(ControllerDynamicMethods.ERRORS_PROPERTY,errors);
  }
  String actionName=null;
  if (actionRef instanceof String) {
    actionName=(String)actionRef;
  }
 else   if (actionRef instanceof Closure) {
    Closure c=(Closure)actionRef;
    PropertyDescriptor prop=GrailsClassUtils.getPropertyDescriptorForValue(target,c);
    if (prop != null) {
      actionName=prop.getName();
    }
 else {
      GrailsScaffolder scaffolder=helper.getScaffolderForController(target.getClass().getName());
      if (scaffolder != null) {
        actionName=scaffolder.getActionName(c);
      }
    }
  }
  if (actionName != null) {
    StringBuffer actualUri=new StringBuffer(attrs.getApplicationUri(request));
    if (controllerName != null) {
      actualUri.append('/').append(controllerName);
    }
 else {
      actualUri.append(attrs.getControllerUri(request));
    }
    actualUri.append('/').append(actionName);
    if (id != null) {
      actualUri.append('/').append(id);
    }
    if (params != null) {
      actualUri.append('?');
      for (Iterator i=params.keySet().iterator(); i.hasNext(); ) {
        Object name=i.next();
        actualUri.append(name).append('=').append(params.get(name));
        if (i.hasNext())         actualUri.append('&');
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Dynamic method [chain] redirecting request to [" + actualUri + "]");
    }
    try {
      response.sendRedirect(response.encodeRedirectURL(actualUri.toString()));
    }
 catch (    IOException e) {
      throw new ControllerExecutionException("Error redirecting request for url [" + actualUri + "]: "+ e.getMessage(),e);
    }
  }
 else {
    throw new ControllerExecutionException("Action not found in redirect for name [" + actionName + "]");
  }
  return null;
}
