{
  if (this.pluginBean.isReadableProperty(ON_SHUTDOWN)) {
    this.onShutdownListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,ON_SHUTDOWN);
  }
  if (this.pluginBean.isReadableProperty(ON_CONFIG_CHANGE)) {
    this.onConfigChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,ON_CONFIG_CHANGE);
  }
  if (this.pluginBean.isReadableProperty(ON_CHANGE)) {
    this.onChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,ON_CHANGE);
  }
  if (Environment.getCurrent().isReloadEnabled()) {
    if (this.onChangeListener != null) {
      Object referencedResources=GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,WATCHED_RESOURCES);
      try {
        List resourceList=null;
        if (referencedResources instanceof String) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Configuring plugin " + this + " to watch resources with pattern: "+ referencedResources);
          }
          resourceList=new ArrayList();
          resourceList.add(referencedResources.toString());
        }
 else         if (referencedResources instanceof List) {
          resourceList=(List)referencedResources;
        }
        if (resourceList != null) {
          this.resourcesReferences=new String[resourceList.size()];
          this.resourceCount=new int[resourceList.size()];
          for (int i=0; i < resourcesReferences.length; i++) {
            String resRef=resourceList.get(i).toString();
            resourcesReferences[i]=resRef;
          }
          final Resource[] pluginDirs=GrailsPluginUtils.getPluginDirectories();
          for (int i=0; i < resourcesReferences.length; i++) {
            String res=resourcesReferences[i];
            Resource[] tmp=new Resource[0];
            try {
              final Environment env=Environment.getCurrent();
              if (Metadata.getCurrent().isWarDeployed() && env.isReloadEnabled()) {
                res=getResourcePatternForBaseLocation(env.getReloadLocation(),res);
                tmp=resolver.getResources(res);
              }
 else {
                for (                Resource pluginDir : pluginDirs) {
                  if (pluginDir != null) {
                    String pluginResources=getResourcePatternForBaseLocation(pluginDir.getFile().getCanonicalPath(),res);
                    try {
                      final Resource[] pluginResourceInstances=resolver.getResources(pluginResources);
                      tmp=(Resource[])ArrayUtils.addAll(tmp,pluginResourceInstances);
                    }
 catch (                    IOException e) {
                    }
                  }
                }
                tmp=(Resource[])ArrayUtils.addAll(tmp,resolver.getResources(res));
              }
            }
 catch (            Exception ex) {
              LOG.debug("Resource pattern [" + res + "] is not valid - maybe base directory does not exist?");
            }
            resourceCount[i]=tmp.length;
            if (LOG.isDebugEnabled()) {
              LOG.debug("Watching resource set [" + (i + 1) + "]: "+ ArrayUtils.toString(tmp));
            }
            if (tmp.length == 0)             tmp=resolver.getResources("classpath*:" + res);
            if (tmp.length > 0) {
              watchedResources=(Resource[])ArrayUtils.addAll(this.watchedResources,tmp);
            }
          }
        }
      }
 catch (      IllegalArgumentException e) {
        if (GrailsUtil.isDevelopmentEnv())         LOG.debug("Cannot load plug-in resource watch list from [" + ArrayUtils.toString(resourcesReferences) + "]. This means that the plugin "+ this+ ", will not be able to auto-reload changes effectively. Try runnng grails upgrade.: "+ e.getMessage());
      }
catch (      IOException e) {
        if (GrailsUtil.isDevelopmentEnv())         LOG.debug("Cannot load plug-in resource watch list from [" + ArrayUtils.toString(resourcesReferences) + "]. This means that the plugin "+ this+ ", will not be able to auto-reload changes effectively. Try runnng grails upgrade.: "+ e.getMessage());
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Plugin " + this + " found ["+ watchedResources.length+ "] to watch");
      }
      try {
        initializeModifiedTimes();
      }
 catch (      IOException e) {
        LOG.warn("I/O exception initializing modified times for watched resources: " + e.getMessage(),e);
      }
    }
  }
}
