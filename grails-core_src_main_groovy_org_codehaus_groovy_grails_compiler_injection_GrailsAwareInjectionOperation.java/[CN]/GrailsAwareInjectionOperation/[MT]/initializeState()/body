{
  if (classInjectors != null) {
    return;
  }
  BeanDefinitionRegistry registry=new SimpleBeanDefinitionRegistry();
  ClassPathBeanDefinitionScanner scanner=new ClassPathBeanDefinitionScanner(registry,false);
  scanner.setIncludeAnnotationConfig(false);
  scanner.addIncludeFilter(new AnnotationTypeFilter(AstTransformer.class));
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  scanner.setResourceLoader(new DefaultResourceLoader(classLoader));
  scanner.scan(INJECTOR_SCAN_PACKAGE);
  if (registry.getBeanDefinitionCount() == 0) {
    classLoader=GrailsAwareInjectionOperation.class.getClassLoader();
    scanner.setResourceLoader(new DefaultResourceLoader(classLoader));
    scanner.scan(INJECTOR_SCAN_PACKAGE);
  }
  List<ClassInjector> injectors=new ArrayList<ClassInjector>();
  for (  String beanName : registry.getBeanDefinitionNames()) {
    try {
      Class<?> injectorClass=classLoader.loadClass(registry.getBeanDefinition(beanName).getBeanClassName());
      if (ClassInjector.class.isAssignableFrom(injectorClass))       injectors.add((ClassInjector)injectorClass.newInstance());
    }
 catch (    ClassNotFoundException e) {
    }
catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
  }
  Collections.sort(injectors,new Comparator<ClassInjector>(){
    @SuppressWarnings({"unchecked","rawtypes"}) public int compare(    ClassInjector classInjectorA,    ClassInjector classInjectorB){
      if (classInjectorA instanceof Comparable) {
        return ((Comparable)classInjectorA).compareTo(classInjectorB);
      }
      return 0;
    }
  }
);
  classInjectors=injectors.toArray(new ClassInjector[injectors.size()]);
}
