{
  GrailsDomainClass domainClass=(GrailsDomainClass)this.grailsApplication.getArtefact(DomainClassArtefactHandler.TYPE,"PersistentMethodTests");
  GroovyObject obj=(GroovyObject)domainClass.newInstance();
  obj.setProperty("id",new Long(1));
  obj.setProperty("firstName","fred");
  obj.setProperty("lastName","flintstone");
  obj.setProperty("age",new Integer(45));
  obj.invokeMethod("save",null);
  try {
    obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{});
    fail("Should have thrown an exception");
  }
 catch (  Exception e) {
  }
  try {
    obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from AnotherClass"});
    fail("Should have thrown grails query exception");
  }
 catch (  GrailsQueryException gqe) {
  }
  List params=new ArrayList();
  params.add("fre%");
  Object returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests where firstName like ?",params});
  assertNotNull(returnValue);
  params.clear();
  params.add("bre%");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests where firstName like ?",params});
  assertNull(returnValue);
  Object[] paramsArray=new Object[]{"fre%"};
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests where firstName like ?",paramsArray});
  assertNotNull(returnValue);
  Binding b=new Binding();
  b.setVariable("test","fre%");
  b.setVariable("test1","flint%");
  GString gs=(GString)new GroovyShell(b).evaluate("\"$test\"");
  GString gs1=(GString)new GroovyShell(b).evaluate("\"$test1\"");
  params.clear();
  params.add(gs);
  params.add(gs1);
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests where firstName like ? and lastName like ?",params});
  assertNotNull(returnValue);
  Map namedArgs=new HashMap();
  namedArgs.put("name",gs);
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests where firstName like :name",namedArgs});
  assertNotNull(returnValue);
  b.setVariable("className","PersistentMethodTests");
  gs=(GString)new GroovyShell(b).evaluate("\"from ${className} where firstName like ? and lastName like ?\"");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{gs,params});
  assertNotNull(returnValue);
  namedArgs.clear();
  namedArgs.put("name","fred");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests as p where p.firstName = :name",namedArgs});
  assertNotNull(returnValue);
  namedArgs.clear();
  List namesList=new ArrayList();
  namesList.add("fred");
  namesList.add("anothername");
  namedArgs.put("namesList",namesList);
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs});
  assertNotNull(returnValue);
  namedArgs.clear();
  namedArgs.put("namesList",new Object[]{"fred","anothername"});
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests as p where p.firstName in (:namesList)",namedArgs});
  assertNotNull(returnValue);
  try {
    namedArgs.clear();
    namedArgs.put(new Long(1),"fred");
    obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{"from PersistentMethodTests as p where p.firstName = :name",namedArgs});
    fail("Should have thrown grails query exception");
  }
 catch (  GrailsQueryException gqe) {
  }
  GroovyObject example=(GroovyObject)domainClass.newInstance();
  example.setProperty("firstName","fred");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{example});
  assertNotNull(returnValue);
  example=(GroovyObject)domainClass.newInstance();
  example.setProperty("firstName","someone");
  returnValue=obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{example});
  assertNull(returnValue);
  try {
    obj.getMetaClass().invokeStaticMethod(obj,"find",new Object[]{new Date()});
    fail("Should have thrown an exception");
  }
 catch (  Exception e) {
  }
}
