{
  Object[] args=(Object[])arg;
  if (CREATE_APPCTX.equals(name)) {
    finalizeDeferredProperties();
    return springConfig.getApplicationContext();
  }
 else   if (REGISTER_BEANS.equals(name) && args.length == 1 && args[0] instanceof StaticApplicationContext) {
    finalizeDeferredProperties();
    StaticApplicationContext ctx=(StaticApplicationContext)args[0];
    springConfig.registerBeansWithContext(ctx);
    return null;
  }
 else   if (BEANS.equals(name) && args.length == 1 && args[0] instanceof Closure) {
    return invokeBeanDefiningClosure(args[0]);
  }
  if (args.length == 0)   throw new MissingMethodException(name,getClass(),args);
  if (REF.equals(name)) {
    String refName;
    if (args[0] == null)     throw new IllegalArgumentException("Argument to ref() is not a valid bean or was not found");
    if (args[0] instanceof RuntimeBeanReference) {
      refName=((RuntimeBeanReference)args[0]).getBeanName();
    }
 else {
      refName=args[0].toString();
    }
    boolean parentRef=false;
    if (args.length > 1) {
      if (args[1] instanceof Boolean) {
        parentRef=((Boolean)args[1]).booleanValue();
      }
    }
    return new RuntimeBeanReference(refName,parentRef);
  }
  if (args[0] instanceof Closure) {
    invokeBeanDefiningMethod(name,args);
  }
 else   if (args[0] instanceof Class || args[0] instanceof RuntimeBeanReference || args[0] instanceof Map) {
    return invokeBeanDefiningMethod(name,args);
  }
 else   if (args.length > 1 && args[args.length - 1] instanceof Closure) {
    return invokeBeanDefiningMethod(name,args);
  }
  WebApplicationContext ctx=springConfig.getUnrefreshedApplicationContext();
  MetaClass mc=DefaultGroovyMethods.getMetaClass(ctx);
  if (mc.respondsTo(ctx,name,args) != null) {
    return mc.invokeMethod(ctx,name,args);
  }
  return this;
}
