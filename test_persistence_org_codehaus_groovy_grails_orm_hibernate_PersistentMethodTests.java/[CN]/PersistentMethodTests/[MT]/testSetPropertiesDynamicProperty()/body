{
  GroovyClassLoader gcl=new GroovyClassLoader();
  MockHttpServletRequest request=new MockHttpServletRequest();
  MockHttpServletResponse response=new MockHttpServletResponse();
  Class groovyClass=gcl.parseClass("class TestController {\n" + "@Property domainClass\n" + "def testMethod() {\n"+ "domainClass.properties = this.params;\n"+ "}\n"+ "}");
  ProxyMetaClass pmc=PropertyAccessProxyMetaClass.getInstance(groovyClass);
  GrailsControllerHelper helper=new SimpleGrailsControllerHelper(this.grailsApplication,this.applicationContext);
  GroovyObject go=(GroovyObject)groovyClass.newInstance();
  pmc.setInterceptor(new ControllerDynamicMethodsInterceptor(go,helper,request,response));
  go.setMetaClass(pmc);
  GrailsDomainClass domainClass=this.grailsApplication.getGrailsDomainClass("org.codehaus.groovy.grails.orm.hibernate.PersistentMethodTestClass");
  GroovyObject dco=domainClass.newInstance();
  request.addParameter("id","1");
  request.addParameter("firstName","fred");
  request.addParameter("lastName","flintstone");
  request.addParameter("age","45");
  try {
    go.setProperty("domainClass",dco);
    go.invokeMethod("testMethod",new Object[]{});
    dco=(GroovyObject)go.getProperty("domainClass");
    assertEquals(new Integer(45),dco.getProperty("age"));
    assertEquals(new Long(1),dco.getProperty("id"));
    assertEquals("fred",dco.getProperty("firstName"));
    assertEquals("flintstone",dco.getProperty("lastName"));
  }
 catch (  MissingMethodException mme) {
    fail("Missing method exception should not have been thrown!");
  }
}
