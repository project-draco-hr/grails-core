{
  Errors errors=new BindException(target,target.getClass().getName());
  GrailsDomainClass domainClass=application.getGrailsDomainClass(target.getClass().getName());
  Validator validator=null;
  boolean doValidation=true;
  Boolean success=Boolean.TRUE;
  if (domainClass != null) {
    validator=domainClass.getValidator();
    doValidation=true;
    if (arguments.length > 0) {
      if (arguments[0] instanceof Boolean) {
        doValidation=((Boolean)arguments[0]).booleanValue();
      }
    }
  }
  if (doValidation) {
    if (validator != null) {
      if (validator instanceof GrailsDomainClassValidator) {
        ((GrailsDomainClassValidator)validator).setHibernateTemplate(getHibernateTemplate());
      }
      validator.validate(target,errors);
      if (errors.hasErrors()) {
        DelegatingMetaClass metaClass=(DelegatingMetaClass)InvokerHelper.getInstance().getMetaRegistry().getMetaClass(target.getClass());
        metaClass.setProperty(target,DomainClassMethods.ERRORS_PROPERTY,errors);
        return Boolean.valueOf(!errors.hasErrors());
      }
    }
  }
  HibernateTemplate t=getHibernateTemplate();
  t.setFlushMode(HibernateTemplate.FLUSH_COMMIT);
  if (domainClass != null) {
    BeanWrapper bean=new BeanWrapperImpl(target);
    GrailsDomainClassProperty[] props=domainClass.getPersistantProperties();
    for (int i=0; i < props.length; i++) {
      GrailsDomainClassProperty prop=props[i];
      if (prop.isManyToOne() || prop.isOneToOne()) {
        Object propValue=bean.getPropertyValue(prop.getName());
        if (propValue != null && !t.contains(propValue)) {
          GrailsDomainClass otherSide=application.getGrailsDomainClass(prop.getType().getName());
          if (otherSide != null) {
            BeanWrapper propBean=new BeanWrapperImpl(propValue);
            Serializable id=(Serializable)propBean.getPropertyValue(otherSide.getIdentifier().getName());
            if (id != null) {
              bean.setPropertyValue(prop.getName(),t.get(prop.getType(),id));
            }
          }
        }
      }
    }
  }
  if (t.contains(target)) {
    t.update(target);
  }
 else {
    t.saveOrUpdate(target);
  }
  return success;
}
