{
  ClassCodeVisitorSupport visitor=new ClassCodeVisitorSupport(){
    @Override public void visitProperty(    PropertyNode node){
      String name=node.getName();
      final Expression expr=node.getField().getInitialExpression();
      Object value;
      if (expr instanceof ListExpression) {
        final ArrayList list=new ArrayList();
        value=list;
        for (        Expression i : ((ListExpression)expr).getExpressions()) {
          list.add(i.getText());
        }
      }
 else       if (expr instanceof MapExpression) {
        final Map map=new LinkedHashMap<String,String>();
        value=map;
        for (        MapEntryExpression mee : ((MapExpression)expr).getMapEntryExpressions()) {
          map.put(mee.getKeyExpression().getText(),mee.getValueExpression().getText());
        }
      }
 else {
        value=expr.getText();
      }
      if (wrapper.isWritableProperty(name)) {
        wrapper.setPropertyValue(name,value);
      }
 else {
        pluginInfo.setProperty(name,value);
      }
      super.visitProperty(node);
    }
    @Override protected SourceUnit getSourceUnit(){
      return source;
    }
  }
;
  classNode.visitContents(visitor);
  String className=classNode.getNameWithoutPackage();
  wrapper.setPropertyValue("name",GrailsNameUtils.getPluginName(className + ".groovy"));
}
