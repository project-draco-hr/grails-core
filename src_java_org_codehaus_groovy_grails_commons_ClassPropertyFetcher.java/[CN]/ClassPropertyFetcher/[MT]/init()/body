{
  FieldCallback fieldCallback=new ReflectionUtils.FieldCallback(){
    public void doWith(    Field field){
      if (field.getName().indexOf('$') == -1) {
        boolean staticField=Modifier.isStatic(field.getModifiers());
        if (staticField) {
          staticFetchers.put(field.getName(),new FieldReaderFetcher(field,staticField));
        }
 else {
          instanceFetchers.put(field.getName(),new FieldReaderFetcher(field,staticField));
        }
      }
    }
  }
;
  MethodCallback methodCallback=new ReflectionUtils.MethodCallback(){
    public void doWith(    Method method) throws IllegalArgumentException, IllegalAccessException {
      if (Modifier.isStatic(method.getModifiers()) && method.getReturnType() != Void.class) {
        if (method.getParameterTypes().length == 0) {
          String name=method.getName();
          if (name.indexOf('$') == -1) {
            if (name.startsWith("get")) {
              name=name.substring(3);
            }
            PropertyFetcher fetcher=new GetterPropertyFetcher(method,true);
            staticFetchers.put(name,fetcher);
            staticFetchers.put(StringUtils.uncapitalize(name),fetcher);
          }
        }
      }
    }
  }
;
  List<Class> allClasses=resolveAllClasses(clazz);
  for (  Class c : allClasses) {
    Field[] fields=c.getDeclaredFields();
    for (    Field field : fields) {
      try {
        fieldCallback.doWith(field);
      }
 catch (      IllegalAccessException ex) {
        throw new IllegalStateException("Shouldn't be illegal to access field '" + field.getName() + "': "+ ex);
      }
    }
    Method[] methods=c.getDeclaredMethods();
    for (    Method method : methods) {
      try {
        methodCallback.doWith(method);
      }
 catch (      IllegalAccessException ex) {
        throw new IllegalStateException("Shouldn't be illegal to access method '" + method.getName() + "': "+ ex);
      }
    }
  }
  PropertyDescriptor[] descriptors=BeanUtils.getPropertyDescriptors(clazz);
  for (  PropertyDescriptor desc : descriptors) {
    Method readMethod=desc.getReadMethod();
    if (readMethod != null) {
      boolean staticReadMethod=Modifier.isStatic(readMethod.getModifiers());
      if (staticReadMethod) {
        staticFetchers.put(desc.getName(),new GetterPropertyFetcher(readMethod,staticReadMethod));
      }
 else {
        instanceFetchers.put(desc.getName(),new GetterPropertyFetcher(readMethod,staticReadMethod));
      }
    }
  }
}
