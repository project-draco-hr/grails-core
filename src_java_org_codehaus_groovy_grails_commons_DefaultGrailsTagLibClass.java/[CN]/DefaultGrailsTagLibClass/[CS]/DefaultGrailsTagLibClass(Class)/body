{
  super(clazz,TAG_LIB);
  Class supportedControllerClass=getStaticPropertyValue(SUPPORTS_CONTROLLER,Class.class);
  if (supportedControllerClass != null) {
    supportedControllers=new ArrayList();
    supportedControllers.add(supportedControllerClass);
  }
 else {
    List tmp=getStaticPropertyValue(SUPPORTS_CONTROLLER,List.class);
    if (tmp != null) {
      supportedControllers=tmp;
    }
  }
  PropertyDescriptor[] props=getPropertyDescriptors();
  for (int i=0; i < props.length; i++) {
    PropertyDescriptor prop=props[i];
    Method readMethod=prop.getReadMethod();
    if (readMethod != null) {
      if (!Modifier.isStatic(readMethod.getModifiers())) {
        if (getPropertyValue(prop.getName(),Closure.class) != null) {
          tags.add(prop.getName());
        }
      }
    }
  }
  String ns=getStaticPropertyValue(NAMESPACE_FIELD_NAME,String.class);
  if (ns != null && !"".equals(ns.trim())) {
    namespace=ns.trim();
  }
  List returnObjectForTagsList=getStaticPropertyValue(RETURN_OBJECT_FOR_TAGS_FIELD_NAME,List.class);
  if (returnObjectForTagsList != null) {
    for (    Object tagName : returnObjectForTagsList) {
      returnObjectForTagsSet.add(String.valueOf(tagName));
    }
  }
}
