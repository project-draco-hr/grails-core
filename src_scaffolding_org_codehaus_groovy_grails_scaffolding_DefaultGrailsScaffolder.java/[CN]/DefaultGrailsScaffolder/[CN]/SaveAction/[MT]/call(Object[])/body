{
  if (!"POST".equals(request.getMethod())) {
    try {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
      return null;
    }
 catch (    IOException e) {
      throw new ControllerExecutionException("I/O error sending 403 error",e);
    }
  }
  ScaffoldCallback callback=new DefaultScaffoldCallback();
  Map model=this.scaffoldRequestHandler.handleSave(request,response,callback);
  if (callback.isInvoked()) {
    Closure showAction=(Closure)controller.getProperty(SHOW_ACTION);
    Map arguments=new HashMap();
    arguments.put(RedirectDynamicMethod.ARGUMENT_ACTION,showAction);
    arguments.put(RedirectDynamicMethod.ARGUMENT_ID,model.get(ChainDynamicMethod.ARGUMENT_ID));
    return controller.invokeMethod(RedirectDynamicMethod.METHOD_SIGNATURE,new Object[]{arguments});
  }
 else {
    Map arguments=new HashMap();
    arguments.put(RenderDynamicMethod.ARGUMENT_VIEW,CREATE_ACTION);
    arguments.put(RenderDynamicMethod.ARGUMENT_MODEL,model);
    controller.invokeMethod(RenderDynamicMethod.METHOD_SIGNATURE,new Object[]{arguments});
    ModelAndView mv=this.scaffoldResponseHandler.handleResponse(request,response,CREATE_ACTION,model);
    controller.setProperty(ControllerDynamicMethods.MODEL_AND_VIEW_PROPERTY,mv);
    return mv;
  }
}
