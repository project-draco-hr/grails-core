{
  if (arguments == null || arguments.length == 0) {
    return super.getHibernateTemplate().loadAll(clazz);
  }
  if (arguments.length == 1 && List.class.isAssignableFrom(arguments[0].getClass())) {
    arguments=((List)arguments[0]).toArray();
  }
  List result=new ArrayList();
  final GrailsDomainClass domainClass=(GrailsDomainClass)this.application.getArtefact(DomainClassArtefactHandler.TYPE,clazz.getName());
  if (domainClass != null) {
    Class identityType=domainClass.getIdentifier().getType();
    final List args=new ArrayList();
    for (int i=0; i < arguments.length; i++) {
      if (!identityType.isAssignableFrom(arguments[i].getClass())) {
        args.add(typeConverter.convertIfNecessary(arguments[i],identityType));
      }
 else {
        args.add(arguments[i]);
      }
    }
    result=super.getHibernateTemplate().executeFind(new HibernateCallback(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Criteria c=session.createCriteria(clazz);
        c.add(Restrictions.in(domainClass.getIdentifier().getName(),args));
        return c.list();
      }
    }
);
    Map idMap=new HashMap();
    for (Iterator it=result.iterator(); it.hasNext(); ) {
      GroovyObject obj=(GroovyObject)it.next();
      idMap.put(obj.getProperty(domainClass.getIdentifier().getName()),obj);
    }
    result.clear();
    for (Iterator it=args.iterator(); it.hasNext(); ) {
      Object identifier=it.next();
      result.add(idMap.get(identifier));
    }
  }
  return result;
}
