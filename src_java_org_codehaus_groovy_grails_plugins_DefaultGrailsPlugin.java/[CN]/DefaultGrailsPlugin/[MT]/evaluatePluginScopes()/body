{
  pluginScopes=evaluateIncludeExcludeProperty(SCOPES,new Closure(this){
    private static final long serialVersionUID=1;
    @Override public Object call(    Object arguments){
      final String scopeName=((String)arguments).toUpperCase();
      try {
        return BuildScope.valueOf(scopeName);
      }
 catch (      IllegalArgumentException e) {
        throw new GrailsConfigurationException("Plugin " + this + " specifies invalid scope ["+ scopeName+ "]");
      }
    }
  }
);
  pluginEnvs=evaluateIncludeExcludeProperty(ENVIRONMENTS,new Closure(this){
    private static final long serialVersionUID=1;
    @Override public Object call(    Object arguments){
      String envName=(String)arguments;
      Environment env=Environment.getEnvironment(envName);
      if (env != null)       return env.getName();
      return arguments;
    }
  }
);
}
