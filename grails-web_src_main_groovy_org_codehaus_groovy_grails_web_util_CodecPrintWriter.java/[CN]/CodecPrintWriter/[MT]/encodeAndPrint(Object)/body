{
  if (trouble || obj == null) {
    usageFlag=true;
    return;
  }
  Writer writer=findStreamCharBufferTarget(true);
  if (writer instanceof EncodedAppender) {
    EncodedAppender appender=(EncodedAppender)writer;
    Class<?> clazz=obj.getClass();
    try {
      if (clazz == StreamCharBuffer.class) {
        ((StreamEncodeable)obj).encodeTo(appender,encoder);
        return;
      }
 else       if (clazz == GStringImpl.class || clazz == String.class || obj instanceof CharSequence) {
        CharSequence source=(CharSequence)obj;
        EncodingState encodingState=null;
        if (encodingStateRegistry != null) {
          encodingState=encodingStateRegistry.getEncodingStateFor(source);
        }
        appender.append(encoder,encodingState,source,0,source.length());
        return;
      }
 else       if (obj instanceof StreamEncodeable) {
        ((StreamEncodeable)obj).encodeTo(appender,encoder);
        return;
      }
    }
 catch (    IOException e) {
      handleIOException(e);
      return;
    }
  }
  Object encoded=encodeObject(obj);
  if (encoded == null)   return;
  Class<?> clazz=encoded.getClass();
  if (clazz == String.class) {
    super.write((String)encoded);
  }
 else   if (clazz == StreamCharBuffer.class) {
    super.write((StreamCharBuffer)encoded);
  }
 else   if (clazz == GStringImpl.class) {
    super.write((Writable)encoded);
  }
 else   if (encoded instanceof Writable) {
    super.write((Writable)encoded);
  }
 else   if (obj instanceof CharSequence) {
    try {
      usageFlag=true;
      out.append((CharSequence)encoded);
    }
 catch (    IOException e) {
      handleIOException(e);
    }
  }
 else {
    super.write(String.valueOf(encoded));
  }
}
