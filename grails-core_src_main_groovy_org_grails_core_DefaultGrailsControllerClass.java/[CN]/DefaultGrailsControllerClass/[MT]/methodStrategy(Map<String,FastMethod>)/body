{
  Class superClass=getClazz();
  FastClass fastClass=FastClass.create(superClass);
  while (superClass != null && superClass != Object.class && superClass != GroovyObject.class) {
    for (    Method method : superClass.getMethods()) {
      if (Modifier.isPublic(method.getModifiers()) && method.getAnnotation(Action.class) != null) {
        String methodName=method.getName();
        ReflectionUtils.makeAccessible(method);
        methodNames.put(methodName,fastClass.getMethod(method));
      }
    }
    superClass=superClass.getSuperclass();
    fastClass=FastClass.create(superClass);
  }
  if (!isActionMethod(defaultActionName) && methodNames.size() == 1 && !isReadableProperty("scaffold")) {
    defaultActionName=methodNames.keySet().iterator().next();
  }
}
