{
  if (springGroovyResourcesBeanBuilder == null) {
    try {
      Class groovySpringResourcesClass=null;
      try {
        groovySpringResourcesClass=ClassUtils.forName(GrailsRuntimeConfigurator.SPRING_RESOURCES_CLASS,classLoader);
      }
 catch (      ClassNotFoundException e) {
      }
      if (groovySpringResourcesClass != null) {
        springGroovyResourcesBeanBuilder=new BeanBuilder(Thread.currentThread().getContextClassLoader());
        springGroovyResourcesBeanBuilder.setSpringConfig(config);
        Script script=(Script)groovySpringResourcesClass.newInstance();
        script.run();
        Object beans=script.getProperty("beans");
        springGroovyResourcesBeanBuilder.beans((Closure)beans);
      }
    }
 catch (    Exception ex) {
      LOG.warn("[RuntimeConfiguration] Unable to perform load beans from resources.groovy",ex);
    }
  }
 else {
    RuntimeSpringConfiguration existingSpringConfig=springGroovyResourcesBeanBuilder.getSpringConfig();
    List beanNames=existingSpringConfig.getBeanNames();
    for (Iterator i=beanNames.iterator(); i.hasNext(); ) {
      String beanName=i.next().toString();
      BeanConfiguration beanConfig=existingSpringConfig.getBeanConfig(beanName);
      if (beanConfig != null) {
        config.addBeanConfiguration(beanName,beanConfig);
      }
 else {
        BeanDefinition definition=existingSpringConfig.getBeanDefinition(beanName);
        if (definition != null)         config.addBeanDefinition(beanName,definition);
      }
    }
  }
  if (context != null) {
    springGroovyResourcesBeanBuilder.registerBeans(context);
  }
}
