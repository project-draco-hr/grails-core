{
  propertyName=PropertyAccessorUtils.canonicalPropertyName(propertyName);
  int currentKeyStart=propertyName.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR);
  int currentKeyEnd=propertyName.indexOf(PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR);
  String propertyNameWithIndex=propertyName;
  if (currentKeyStart > -1) {
    propertyName=propertyName.substring(0,currentKeyStart);
  }
  Class<?> type=wrapper.getPropertyType(propertyName);
  Object val=wrapper.isReadableProperty(propertyName) ? wrapper.getPropertyValue(propertyName) : null;
  LOG.debug("Checking if auto-create is possible for property [" + propertyName + "] and type ["+ type+ "]");
  if (type != null && val == null && (isDomainClass(type) || isEmbedded(wrapper,propertyName))) {
    if (!shouldPropertyValueSkipAutoCreate(propertyValue) && isNullAndWritableProperty(wrapper,propertyName)) {
      if (isDomainClass(type)) {
        Object created=autoInstantiateDomainInstance(type);
        if (created != null) {
          val=created;
          wrapper.setPropertyValue(propertyName,created);
        }
      }
 else       if (isEmbedded(wrapper,propertyName)) {
        Object created=autoInstantiateEmbeddedInstance(type);
        if (created != null) {
          val=created;
          wrapper.setPropertyValue(propertyName,created);
        }
      }
    }
  }
 else {
    final Object beanInstance=wrapper.getWrappedInstance();
    if (type != null && Collection.class.isAssignableFrom(type)) {
      Collection<?> c=null;
      final Class<?> referencedType=getReferencedTypeForCollection(propertyName,beanInstance);
      if (isNullAndWritableProperty(wrapper,propertyName)) {
        c=decorateCollectionForDomainAssociation(GrailsClassUtils.createConcreteCollection(type),referencedType);
      }
 else {
        if (wrapper.isReadableProperty(propertyName)) {
          c=decorateCollectionForDomainAssociation((Collection<?>)wrapper.getPropertyValue(propertyName),referencedType);
        }
      }
      if (wrapper.isWritableProperty(propertyName) && c != null) {
        wrapper.setPropertyValue(propertyName,c);
      }
      val=c;
      if (c != null && currentKeyStart > -1 && currentKeyEnd > -1) {
        String indexString=propertyNameWithIndex.substring(currentKeyStart + 1,currentKeyEnd);
        int index=Integer.parseInt(indexString);
        if (isDomainClass(referencedType)) {
          Object instance=findIndexedValue(c,index);
          if (instance != null) {
            val=instance;
          }
 else {
            instance=autoInstantiateDomainInstance(referencedType);
            if (instance != null) {
              val=instance;
              if (index == c.size()) {
                addAssociationToTarget(propertyName,beanInstance,instance);
              }
 else               if (index > c.size()) {
                while (index > c.size()) {
                  addAssociationToTarget(propertyName,beanInstance,autoInstantiateDomainInstance(referencedType));
                }
                addAssociationToTarget(propertyName,beanInstance,instance);
              }
            }
          }
        }
      }
    }
 else     if (type != null && Map.class.isAssignableFrom(type)) {
      Map<String,Object> map;
      if (isNullAndWritableProperty(wrapper,propertyName)) {
        map=new HashMap<String,Object>();
        wrapper.setPropertyValue(propertyName,map);
      }
 else {
        map=(Map)wrapper.getPropertyValue(propertyName);
      }
      val=map;
      wrapper.setPropertyValue(propertyName,val);
      if (currentKeyStart > -1 && currentKeyEnd > -1) {
        String indexString=propertyNameWithIndex.substring(currentKeyStart + 1,currentKeyEnd);
        Class<?> referencedType=getReferencedTypeForCollection(propertyName,beanInstance);
        if (isDomainClass(referencedType)) {
          final Object domainInstance=autoInstantiateDomainInstance(referencedType);
          val=domainInstance;
          map.put(indexString,domainInstance);
        }
      }
    }
  }
  return val;
}
