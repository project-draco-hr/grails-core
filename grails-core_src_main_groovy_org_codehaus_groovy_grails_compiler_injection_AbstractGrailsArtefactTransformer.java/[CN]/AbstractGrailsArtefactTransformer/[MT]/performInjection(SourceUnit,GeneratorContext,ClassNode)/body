{
  Class instanceImplementation=getInstanceImplementation();
  if (instanceImplementation != null) {
    ClassNode implementationNode=new ClassNode(instanceImplementation);
    String apiInstanceProperty=INSTANCE_PREFIX + instanceImplementation.getSimpleName();
    Expression apiInstance=new VariableExpression(apiInstanceProperty);
    if (requiresStaticLookupMethod()) {
      final String lookupMethodName=CURRENT_PREFIX + instanceImplementation.getSimpleName();
      createStaticLookupMethod(classNode,implementationNode,apiInstanceProperty,lookupMethodName);
      apiInstance=new MethodCallExpression(new ClassExpression(classNode),lookupMethodName,ZERO_ARGS);
    }
 else     if (requiresAutowiring()) {
      PropertyNode propertyNode=new PropertyNode(apiInstanceProperty,Modifier.PUBLIC,implementationNode,classNode,new ConstructorCallExpression(implementationNode,ZERO_ARGS),null,null);
      propertyNode.addAnnotation(AUTO_WIRED_ANNOTATION);
      classNode.addProperty(propertyNode);
    }
 else {
      final ConstructorCallExpression constructorCallExpression=new ConstructorCallExpression(implementationNode,ZERO_ARGS);
      FieldNode fieldNode=new FieldNode(apiInstanceProperty,PRIVATE_STATIC_MODIFIER,implementationNode,classNode,constructorCallExpression);
      classNode.addField(fieldNode);
    }
    while (!implementationNode.equals(OBJECT_CLASS)) {
      List<MethodNode> declaredMethods=implementationNode.getMethods();
      for (      MethodNode declaredMethod : declaredMethods) {
        if (isConstructor(declaredMethod)) {
          BlockStatement constructorBody=new BlockStatement();
          Parameter[] constructorParams=GrailsASTUtils.getRemainingParameterTypes(declaredMethod.getParameters());
          ArgumentListExpression arguments=GrailsASTUtils.createArgumentListFromParameters(constructorParams,true);
          constructorBody.addStatement(new ExpressionStatement(new MethodCallExpression(new ClassExpression(implementationNode),"initialize",arguments)));
          if (constructorParams.length == 0) {
            ConstructorNode constructorNode=getDefaultConstructor(classNode);
            if (constructorNode != null) {
              constructorBody.addStatement(constructorNode.getCode());
              constructorNode.setCode(constructorBody);
            }
 else {
              classNode.addConstructor(new ConstructorNode(Modifier.PUBLIC,constructorBody));
            }
          }
 else {
            ConstructorNode cn=findConstructor(classNode,constructorParams);
            if (cn != null) {
              Statement code=cn.getCode();
              constructorBody.addStatement(code);
              cn.setCode(constructorBody);
            }
 else {
              cn=new ConstructorNode(Modifier.PUBLIC,constructorParams,null,constructorBody);
              classNode.addConstructor(cn);
            }
          }
        }
 else         if (isCandidateInstanceMethod(declaredMethod)) {
          GrailsASTUtils.addDelegateInstanceMethod(classNode,apiInstance,declaredMethod);
        }
      }
      implementationNode=implementationNode.getSuperClass();
    }
    performInjectionInternal(apiInstanceProperty,source,classNode);
  }
  Class staticImplementation=getStaticImplementation();
  if (staticImplementation != null) {
    ClassNode staticImplementationNode=new ClassNode(staticImplementation);
    final List<MethodNode> declaredMethods=staticImplementationNode.getMethods();
    final String staticImplementationSimpleName=staticImplementation.getSimpleName();
    String apiInstanceProperty=STATIC_PREFIX + staticImplementationSimpleName;
    final String lookupMethodName=CURRENT_PREFIX + staticImplementationSimpleName;
    if (requiresStaticLookupMethod()) {
      createStaticLookupMethod(classNode,staticImplementationNode,apiInstanceProperty,lookupMethodName);
    }
 else {
      final ConstructorCallExpression constructorCallExpression=new ConstructorCallExpression(staticImplementationNode,ZERO_ARGS);
      FieldNode fieldNode=new FieldNode(apiInstanceProperty,PRIVATE_STATIC_MODIFIER,staticImplementationNode,classNode,constructorCallExpression);
      classNode.addField(fieldNode);
      BlockStatement methodBody=new BlockStatement();
      MethodNode lookupMethod=populateDefaultApiLookupMethod(staticImplementationNode,apiInstanceProperty,lookupMethodName,methodBody);
      classNode.addMethod(lookupMethod);
    }
    MethodCallExpression apiLookupMethod=new MethodCallExpression(new ClassExpression(classNode),lookupMethodName,ZERO_ARGS);
    for (    MethodNode declaredMethod : declaredMethods) {
      if (isStaticCandidateMethod(declaredMethod)) {
        GrailsASTUtils.addDelegateStaticMethod(apiLookupMethod,classNode,declaredMethod);
      }
    }
  }
  if (classNode.getAnnotations(ENHANCED_CLASS_NODE).isEmpty())   classNode.addAnnotation(new AnnotationNode(ENHANCED_CLASS_NODE));
}
