{
  performOperationOnMetaClass(new Callable(){
    public void call(){
      MetaMethod existing=pickMethod(metaMethodFromSuper.getName(),metaMethodFromSuper.getParameterTypes());
      if (existing == null) {
synchronized (inheritedMetaMethods) {
          addMethodWithKey(metaMethodFromSuper);
        }
      }
 else {
        boolean isGroovyMethod=getMetaMethods().contains(existing);
synchronized (inheritedMetaMethods) {
          if (isGroovyMethod) {
            addMethodWithKey(metaMethodFromSuper);
          }
 else           if (inheritedMetaMethods.contains(existing)) {
            inheritedMetaMethods.remove(existing);
            addMethodWithKey(metaMethodFromSuper);
          }
        }
      }
    }
    private void addMethodWithKey(    final MetaMethod metaMethodFromSuper){
      inheritedMetaMethods.add(metaMethodFromSuper);
      if (metaMethodFromSuper instanceof ClosureMetaMethod) {
        ClosureMetaMethod closureMethod=(ClosureMetaMethod)metaMethodFromSuper;
        Closure cloned=(Closure)closureMethod.getClosure().clone();
        ClosureMetaMethod localMethod=new ClosureMetaMethod(metaMethodFromSuper.getName(),getJavaClass(),cloned);
        addMetaMethod(localMethod);
        MethodKey key=new DefaultMethodKey(getJavaClass(),metaMethodFromSuper.getName(),localMethod.getParameterTypes(),false);
        cacheInstanceMethod(key,localMethod);
synchronized (expandoMethods) {
          expandoMethods.add(localMethod);
        }
      }
    }
  }
);
}
