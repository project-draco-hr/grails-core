{
  Object[] args=obj.getClass().isArray() ? (Object[])obj : new Object[]{obj};
  if (isCriteriaConstructionMethod(name,args)) {
    if (this.criteria != null) {
      throwRuntimeException(new IllegalArgumentException("call to [" + name + "] not supported here"));
    }
    if (name.equals(GET_CALL)) {
      this.uniqueResult=true;
    }
 else     if (name.equals(SCROLL_CALL)) {
      this.scroll=true;
    }
 else     if (name.equals(COUNT_CALL)) {
      this.count=true;
    }
 else     if (name.equals(LIST_DISTINCT_CALL)) {
      this.resultTransformer=CriteriaSpecification.DISTINCT_ROOT_ENTITY;
    }
    boolean paginationEnabledList=false;
    createCriteriaInstance();
    if (name.equals(LIST_CALL) && args.length == 2) {
      paginationEnabledList=true;
      invokeClosureNode(args[1]);
    }
 else {
      invokeClosureNode(args[0]);
    }
    if (resultTransformer != null) {
      this.criteria.setResultTransformer(resultTransformer);
    }
    Object result;
    if (!uniqueResult) {
      if (scroll) {
        result=this.criteria.scroll();
      }
 else       if (count) {
        this.criteria.setProjection(Projections.rowCount());
        result=this.criteria.uniqueResult();
      }
 else       if (paginationEnabledList) {
        this.criteria.setFirstResult(0);
        this.criteria.setMaxResults(Integer.MAX_VALUE);
        this.criteria.setProjection(Projections.rowCount());
        int totalCount=((Integer)this.criteria.uniqueResult()).intValue();
        this.criteria.setProjection(null);
        this.criteria.setResultTransformer(CriteriaSpecification.ROOT_ENTITY);
        GrailsHibernateUtil.populateArgumentsForCriteria(targetClass,this.criteria,(Map)args[0]);
        PagedResultList pagedRes=new PagedResultList(this.criteria.list());
        pagedRes.setTotalCount(totalCount);
        result=pagedRes;
      }
 else {
        result=this.criteria.list();
      }
    }
 else {
      result=this.criteria.uniqueResult();
    }
    if (!this.participate) {
      this.hibernateSession.close();
    }
    return result;
  }
 else {
    if (criteria == null)     createCriteriaInstance();
    MetaMethod metaMethod=getMetaClass().getMetaMethod(name,args);
    if (metaMethod != null) {
      return metaMethod.invoke(this,args);
    }
    metaMethod=criteriaMetaClass.getMetaMethod(name,args);
    if (metaMethod != null) {
      return metaMethod.invoke(criteria,args);
    }
    metaMethod=criteriaMetaClass.getMetaMethod(GrailsClassUtils.getSetterName(name),args);
    if (metaMethod != null) {
      return metaMethod.invoke(criteria,args);
    }
 else     if (args.length == 1 && args[0] instanceof Closure) {
      if (name.equals(AND) || name.equals(OR) || name.equals(NOT)) {
        if (this.criteria == null)         throwRuntimeException(new IllegalArgumentException("call to [" + name + "] not supported here"));
        this.logicalExpressionStack.add(new LogicalExpression(name));
        invokeClosureNode(args[0]);
        LogicalExpression logicalExpression=logicalExpressionStack.get(logicalExpressionStack.size() - 1);
        addToCriteria(logicalExpression.toCriterion());
        return name;
      }
 else       if (name.equals(PROJECTIONS) && args.length == 1 && (args[0] instanceof Closure)) {
        if (this.criteria == null)         throwRuntimeException(new IllegalArgumentException("call to [" + name + "] not supported here"));
        this.projectionList=Projections.projectionList();
        invokeClosureNode(args[0]);
        if (this.projectionList != null && this.projectionList.getLength() > 0) {
          this.criteria.setProjection(this.projectionList);
        }
        return name;
      }
 else       if (targetBean.isReadableProperty(name.toString())) {
        ClassMetadata meta=sessionFactory.getClassMetadata(targetBean.getWrappedClass());
        Type type=meta.getPropertyType(name.toString());
        if (type.isAssociationType()) {
          String otherSideEntityName=((AssociationType)type).getAssociatedEntityName((SessionFactoryImplementor)sessionFactory);
          Class oldTargetClass=targetClass;
          targetClass=sessionFactory.getClassMetadata(otherSideEntityName).getMappedClass(EntityMode.POJO);
          BeanWrapper oldTargetBean=targetBean;
          targetBean=new BeanWrapperImpl(BeanUtils.instantiateClass(targetClass));
          associationStack.add(name.toString());
          final String associationPath=getAssociationPath();
          createAliasIfNeccessary(name,associationPath);
          logicalExpressionStack.add(new LogicalExpression(AND));
          invokeClosureNode(args[0]);
          aliasStack.remove(aliasStack.size() - 1);
          if (!aliasInstanceStack.isEmpty()) {
            aliasInstanceStack.remove(aliasInstanceStack.size() - 1);
          }
          LogicalExpression logicalExpression=(LogicalExpression)logicalExpressionStack.remove(logicalExpressionStack.size() - 1);
          if (!logicalExpression.args.isEmpty()) {
            addToCriteria(logicalExpression.toCriterion());
          }
          associationStack.remove(associationStack.size() - 1);
          targetClass=oldTargetClass;
          targetBean=oldTargetBean;
          return name;
        }
      }
    }
 else     if (args.length == 1 && args[0] != null) {
      if (this.criteria == null)       throwRuntimeException(new IllegalArgumentException("call to [" + name + "] not supported here"));
      Object value=args[0];
      Criterion c=null;
      if (name.equals(ID_EQUALS)) {
        return eq("id",value);
      }
 else {
        if (name.equals(IS_NULL) || name.equals(IS_NOT_NULL) || name.equals(IS_EMPTY)|| name.equals(IS_NOT_EMPTY)) {
          if (!(value instanceof String))           throwRuntimeException(new IllegalArgumentException("call to [" + name + "] with value ["+ value+ "] requires a String value."));
          String propertyName=calculatePropertyName((String)value);
          if (name.equals(IS_NULL)) {
            c=Restrictions.isNull(propertyName);
          }
 else           if (name.equals(IS_NOT_NULL)) {
            c=Restrictions.isNotNull(propertyName);
          }
 else           if (name.equals(IS_EMPTY)) {
            c=Restrictions.isEmpty(propertyName);
          }
 else           if (name.equals(IS_NOT_EMPTY)) {
            c=Restrictions.isNotEmpty(propertyName);
          }
        }
      }
      if (c != null) {
        return addToCriteria(c);
      }
    }
  }
  closeSessionFollowingException();
  throw new MissingMethodException(name,getClass(),args);
}
