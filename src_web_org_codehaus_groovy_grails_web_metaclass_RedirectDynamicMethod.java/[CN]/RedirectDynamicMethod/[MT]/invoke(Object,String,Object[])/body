{
  if (arguments.length == 0)   throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  Object actionRef=null;
  String controllerName=null;
  Object id=null;
  Object uri=null;
  String url=null;
  Map params;
  Errors errors;
  GroovyObject controller=(GroovyObject)target;
  if (arguments[0] instanceof Map) {
    Map argMap=(Map)arguments[0];
    if (argMap.containsKey(ARGUMENT_URI)) {
      uri=argMap.get(ARGUMENT_URI);
    }
 else     if (argMap.containsKey(ARGUMENT_URL)) {
      url=argMap.get(ARGUMENT_URL).toString();
    }
 else {
      actionRef=argMap.get(ARGUMENT_ACTION);
      controllerName=(String)argMap.get(ARGUMENT_CONTROLLER);
      id=argMap.get(ARGUMENT_ID);
    }
    params=(Map)argMap.get(ARGUMENT_PARAMS);
    errors=(Errors)argMap.get(ARGUMENT_ERRORS);
  }
 else {
    throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  }
  Errors controllerErrors=(Errors)controller.getProperty(ControllerDynamicMethods.ERRORS_PROPERTY);
  if (controllerErrors != null) {
    controllerErrors.addAllErrors(errors);
  }
 else {
    controller.setProperty(ControllerDynamicMethods.ERRORS_PROPERTY,errors);
  }
  String actualUri;
  GrailsWebRequest webRequest=(GrailsWebRequest)RequestContextHolder.currentRequestAttributes();
  GrailsApplicationAttributes attrs=webRequest.getAttributes();
  HttpServletRequest request=webRequest.getCurrentRequest();
  GrailsHttpServletResponse response=webRequest.getCurrentResponse();
  if (uri != null) {
    actualUri=attrs.getApplicationUri(request) + uri.toString();
  }
 else   if (url != null) {
    actualUri=url;
  }
 else {
    String actionName=null;
    if (actionRef instanceof String) {
      actionName=(String)actionRef;
    }
 else     if (actionRef instanceof Closure) {
      Closure c=(Closure)actionRef;
      PropertyDescriptor prop=GrailsClassUtils.getPropertyDescriptorForValue(target,c);
      if (prop != null) {
        actionName=prop.getName();
      }
 else {
        GrailsScaffolder scaffolder=getScaffolderForController(target.getClass().getName(),webRequest);
        if (scaffolder != null) {
          actionName=scaffolder.getActionName(c);
        }
      }
    }
 else {
      actionName="";
    }
    if (actionName != null) {
      StringBuffer actualUriBuf=new StringBuffer(attrs.getApplicationUri(request));
      if (actionName.indexOf('/') > -1) {
        actualUriBuf.append(actionName);
      }
 else {
        if (controllerName != null) {
          actualUriBuf.append('/').append(controllerName);
        }
 else {
          actualUriBuf.append(attrs.getControllerUri(request));
        }
      }
      actualUriBuf.append('/').append(actionName);
      if (id != null) {
        actualUriBuf.append('/').append(id);
      }
      if (params != null) {
        actualUriBuf.append('?');
        for (Iterator i=params.keySet().iterator(); i.hasNext(); ) {
          Object name=i.next();
          if (name.equals(GrailsControllerClass.CONTROLLER) || name.equals(GrailsControllerClass.ACTION))           continue;
          Object value=params.get(name);
          if (value == null)           value="";
          try {
            actualUriBuf.append(URLEncoder.encode(name.toString(),request.getCharacterEncoding())).append('=').append(URLEncoder.encode(value.toString(),request.getCharacterEncoding()));
          }
 catch (          UnsupportedEncodingException ex) {
            throw new ControllerExecutionException("Error redirecting request for url [" + name + ":"+ value+ "]: "+ ex.getMessage(),ex);
          }
          if (i.hasNext())           actualUriBuf.append('&');
        }
      }
      actualUri=actualUriBuf.toString();
    }
 else {
      throw new ControllerExecutionException("Action not found in redirect for name [" + actionName + "]");
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Dynamic method [redirect] forwarding request to [" + actualUri + "]");
  }
  try {
    response.sendRedirect(response.encodeRedirectURL(actualUri));
  }
 catch (  IOException e) {
    throw new ControllerExecutionException("Error redirecting request for url [" + actualUri + "]: "+ e.getMessage(),e);
  }
  return null;
}
