{
  boolean traitsAdded=false;
  for (  TraitInjector injector : injectorsToUse) {
    Class<?> trait=injector.getTrait();
    ClassNode traitClassNode=ClassHelper.make(trait);
    boolean implementsTrait=false;
    boolean traitNotLoaded=false;
    try {
      implementsTrait=classNode.implementsInterface(traitClassNode);
    }
 catch (    Throwable e) {
      traitNotLoaded=true;
    }
    if (!implementsTrait && !traitNotLoaded) {
      final GenericsType[] genericsTypes=traitClassNode.getGenericsTypes();
      final Map<String,ClassNode> parameterNameToParameterValue=new LinkedHashMap<String,ClassNode>();
      if (genericsTypes != null) {
        for (        GenericsType gt : genericsTypes) {
          parameterNameToParameterValue.put(gt.getName(),classNode);
        }
      }
      classNode.addInterface(GrailsASTUtils.replaceGenericsPlaceholders(traitClassNode,parameterNameToParameterValue,classNode));
      traitsAdded=true;
    }
  }
  if (traitsAdded && unit.getPhase() != CompilePhase.SEMANTIC_ANALYSIS.getPhaseNumber()) {
    TraitComposer.doExtendTraits(classNode,source,unit);
  }
}
