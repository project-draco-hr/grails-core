{
  boolean traitsAdded=false;
  for (  TraitInjector injector : injectorsToUse) {
    Class<?> trait=injector.getTrait();
    ClassNode traitClassNode=ClassHelper.make(trait);
    boolean implementsTrait=false;
    boolean traitNotLoaded=false;
    try {
      implementsTrait=classNode.implementsInterface(traitClassNode);
    }
 catch (    Throwable e) {
      traitNotLoaded=true;
    }
    if (!implementsTrait && !traitNotLoaded) {
      System.out.println("traitClassNode = " + traitClassNode);
      classNode.addInterface(traitClassNode);
      traitsAdded=true;
    }
  }
  if (traitsAdded && unit.getPhase() != CompilePhase.SEMANTIC_ANALYSIS.getPhaseNumber()) {
    TraitComposer.doExtendTraits(classNode,source,unit);
  }
}
