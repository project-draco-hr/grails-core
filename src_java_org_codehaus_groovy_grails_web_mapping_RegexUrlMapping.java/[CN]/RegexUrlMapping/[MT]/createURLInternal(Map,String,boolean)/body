{
  if (encoding == null)   encoding="utf-8";
  String contextPath="";
  if (includeContextPath) {
    GrailsWebRequest webRequest=(GrailsWebRequest)RequestContextHolder.getRequestAttributes();
    if (webRequest != null) {
      contextPath=webRequest.getAttributes().getApplicationUri(webRequest.getCurrentRequest());
    }
  }
  if (parameterValues == null)   parameterValues=Collections.EMPTY_MAP;
  StringBuilder uri=new StringBuilder(contextPath);
  Set usedParams=new HashSet();
  Pattern p=Pattern.compile("\\(\\*\\*?\\)");
  String[] tokens=urlData.getTokens();
  int paramIndex=0;
  for (  String token : tokens) {
    Matcher m=p.matcher(token);
    if (m.find()) {
      StringBuffer buf=new StringBuffer();
      do {
        ConstrainedProperty prop=this.constraints[paramIndex++];
        String propName=prop.getPropertyName();
        Object value=parameterValues.get(propName);
        usedParams.add(propName);
        if (value == null && !prop.isNullable()) {
          throw new UrlMappingException("Unable to create URL for mapping [" + this + "] and parameters ["+ parameterValues+ "]. Parameter ["+ prop.getPropertyName()+ "] is required, but was not specified!");
        }
 else         if (value == null) {
          m.appendReplacement(buf,"");
        }
 else {
          m.appendReplacement(buf,Matcher.quoteReplacement(value.toString()));
        }
      }
 while (m.find());
      m.appendTail(buf);
      try {
        String v=buf.toString();
        if (v.indexOf(SLASH) > -1 && CAPTURED_DOUBLE_WILDCARD.equals(token)) {
          if (v.startsWith(SLASH)) {
            v=v.substring(SLASH.length());
          }
          String[] segs=v.split(SLASH);
          for (          String segment : segs) {
            uri.append(SLASH).append(URLEncoder.encode(segment,encoding));
          }
        }
 else         if (v.length() > 0) {
          uri.append(SLASH).append(URLEncoder.encode(v,encoding));
        }
 else {
          break;
        }
      }
 catch (      UnsupportedEncodingException e) {
        throw new ControllerExecutionException("Error creating URL for parameters [" + parameterValues + "], problem encoding URL part ["+ buf+ "]: "+ e.getMessage(),e);
      }
    }
 else {
      uri.append(SLASH).append(token);
    }
  }
  populateParameterList(parameterValues,encoding,uri,usedParams);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created reverse URL mapping [" + uri.toString() + "] for parameters ["+ parameterValues+ "]");
  }
  return uri.toString();
}
