{
  if (constructed) {
    Object result;
    try {
      result=invoke(thisMethod,args,proxy);
    }
 catch (    Throwable t) {
      throw new Exception(t.getCause());
    }
    if (result == INVOKE_IMPLEMENTATION) {
      Object target=getImplementation();
      GrailsHibernateUtil.ensureCorrectGroovyMetaClass(target,persistentClass);
      final Object returnValue;
      try {
        if (ReflectHelper.isPublic(persistentClass,thisMethod)) {
          if (!thisMethod.getDeclaringClass().isInstance(target)) {
            throw new ClassCastException(target.getClass().getName());
          }
          returnValue=thisMethod.invoke(target,args);
        }
 else {
          if (!thisMethod.isAccessible()) {
            thisMethod.setAccessible(true);
          }
          returnValue=thisMethod.invoke(target,args);
        }
        return returnValue == target ? proxy : returnValue;
      }
 catch (      InvocationTargetException ite) {
        throw ite.getTargetException();
      }
    }
    return result;
  }
  if (thisMethod.getName().equals("getHibernateLazyInitializer")) {
    return this;
  }
  return proceed.invoke(proxy,args);
}
