{
  PersistentClass associatedClass=null;
  if (collection.isOneToMany()) {
    OneToMany oneToMany=(OneToMany)collection.getElement();
    String associatedClassName=oneToMany.getReferencedEntityName();
    associatedClass=(PersistentClass)persistentClasses.get(associatedClassName);
    if (associatedClass == null) {
      throw new MappingException("Association references unmapped class: " + oneToMany.getReferencedEntityName());
    }
    oneToMany.setAssociatedClass(associatedClass);
    collection.setCollectionTable(associatedClass.getTable());
    collection.setLazy(true);
    LOG.info("Mapping collection: " + collection.getRole() + " -> "+ collection.getCollectionTable().getName());
  }
  KeyValue keyValue;
  String propertyRef=collection.getReferencedPropertyName();
  if (propertyRef == null) {
    keyValue=collection.getOwner().getIdentifier();
  }
 else {
    keyValue=(KeyValue)collection.getOwner().getProperty(propertyRef).getValue();
  }
  DependantValue key=new DependantValue(collection.getCollectionTable(),keyValue);
  key.setTypeName(null);
  if (property.isBidirectional()) {
    GrailsDomainClassProperty otherSide=property.getOtherSide();
    if (otherSide.isManyToOne()) {
      collection.setInverse(true);
      Iterator mappedByColumns=associatedClass.getProperty(otherSide.getName()).getValue().getColumnIterator();
      while (mappedByColumns.hasNext()) {
        Column column=(Column)mappedByColumns.next();
        linkValueUsingAColumnCopy(otherSide,column,key);
      }
    }
  }
 else {
    bindSimpleValue(property,key,mappings);
  }
  collection.setKey(key);
  key.setNullable(false);
  key.setUpdateable(false);
  if (property.isManyToMany()) {
    ManyToOne element=new ManyToOne(collection.getCollectionTable());
    collection.setElement(element);
    bindManyToOne(property,element,mappings);
  }
 else   if (property.isOneToMany() && !property.isBidirectional()) {
    OneToMany oneToMany=(OneToMany)collection.getElement();
    String entityName=oneToMany.getReferencedEntityName();
    PersistentClass referenced=mappings.getClass(entityName);
    Backref prop=new Backref();
    prop.setEntityName(property.getDomainClass().getFullName());
    prop.setName('_' + property.getName() + "Backref");
    prop.setUpdateable(true);
    prop.setInsertable(true);
    prop.setCollectionRole(collection.getRole());
    prop.setValue(collection.getKey());
    prop.setOptional(property.isOptional());
    referenced.addProperty(prop);
  }
}
