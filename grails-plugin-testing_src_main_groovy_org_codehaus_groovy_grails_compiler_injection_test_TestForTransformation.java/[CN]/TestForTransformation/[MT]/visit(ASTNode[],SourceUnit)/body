{
  if (!(astNodes[0] instanceof AnnotationNode) || !(astNodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");
  }
  AnnotatedNode parent=(AnnotatedNode)astNodes[1];
  AnnotationNode node=(AnnotationNode)astNodes[0];
  if (!MY_TYPE.equals(node.getClassNode()) || !(parent instanceof ClassNode)) {
    return;
  }
  ClassNode classNode=(ClassNode)parent;
  String cName=classNode.getName();
  if (classNode.isInterface()) {
    throw new RuntimeException("Error processing interface '" + cName + "'. "+ MY_TYPE_NAME+ " not allowed for interfaces.");
  }
  Expression value=node.getMember("value");
  boolean junit3Test=isJunit3Test(classNode);
  if (value instanceof ClassExpression) {
    final MethodNode methodToAdd=weaveMock(classNode,(ClassExpression)value,true);
    if (methodToAdd != null) {
      if (junit3Test) {
        addMethodCallsToMethod(classNode,SET_UP_METHOD,new ArrayList<MethodNode>(){
{
            add(methodToAdd);
          }
        }
);
      }
    }
  }
 else {
    throw new RuntimeException("Error processing class '" + cName + "'. "+ MY_TYPE_NAME+ " requires a class value.");
  }
}
