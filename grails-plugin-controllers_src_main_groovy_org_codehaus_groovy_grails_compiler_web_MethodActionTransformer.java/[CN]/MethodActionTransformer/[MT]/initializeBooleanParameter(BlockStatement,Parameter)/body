{
  final ClassNode paramTypeClassNode=param.getType();
  final String paramName=param.getName();
  final Expression paramsGetMethodArguments=new ArgumentListExpression(new ConstantExpression(paramName));
  final Expression retrieveConvertedValueExpression=new MethodCallExpression(PARAMS_EXPRESSION,"get",paramsGetMethodArguments);
  final Expression argumentsToParseBoolean=new ArgumentListExpression(retrieveConvertedValueExpression);
  final Expression parseBooleanExpression=new StaticMethodCallExpression(new ClassNode(Boolean.class),"parseBoolean",argumentsToParseBoolean);
  final Expression paramsContainsKeyMethodArguments=new ArgumentListExpression(new ConstantExpression(paramName));
  final BooleanExpression containsKeyExpression=new BooleanExpression(new MethodCallExpression(PARAMS_EXPRESSION,"containsKey",paramsContainsKeyMethodArguments));
  final Expression defaultValueExpression=param.hasInitialExpression() ? param.getInitialExpression() : new ConstantExpression(false);
  final Statement declarationStatement=new ExpressionStatement(new DeclarationExpression(new VariableExpression(paramName,paramTypeClassNode),Token.newSymbol(Types.EQUALS,0,0),new TernaryExpression(containsKeyExpression,parseBooleanExpression,defaultValueExpression)));
  wrapper.addStatement(declarationStatement);
}
