{
  UrlConstraint constraint=(UrlConstraint)getConstraint("testString",Boolean.FALSE);
  assertEquals(ConstrainedProperty.URL_CONSTRAINT,constraint.getName());
  assertTrue(constraint.supports(String.class));
  assertFalse(constraint.supports(Float.class));
  assertFalse(constraint.supports(Double.class));
  assertFalse(constraint.supports(Object.class));
  assertFalse(constraint.supports(null));
  try {
    getConstraint("testString",Boolean.TRUE);
  }
 catch (  IllegalArgumentException iae) {
    fail("UrlConstraint should allow boolean parameters.");
  }
  try {
    getConstraint("testString","localhost");
  }
 catch (  IllegalArgumentException iae) {
    fail("UrlConstraint should allow string parameters.");
  }
  try {
    List regexps=new ArrayList();
    regexps.add("aaa");
    regexps.add("bbb");
    getConstraint("testString",regexps);
  }
 catch (  IllegalArgumentException iae) {
    fail("UrlConstraint should allow list parameters.");
  }
  try {
    getConstraint("testString",1d);
    fail("UrlConstraint must throw an exception for non-boolean, non-string and non-list parameters.");
  }
 catch (  IllegalArgumentException iae) {
  }
}
