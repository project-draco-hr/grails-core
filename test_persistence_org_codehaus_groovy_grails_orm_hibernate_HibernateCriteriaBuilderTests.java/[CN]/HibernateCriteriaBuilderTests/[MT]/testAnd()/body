{
  GrailsDomainClass domainClass=(GrailsDomainClass)this.grailsApplication.getArtefact(DomainClassArtefactHandler.TYPE,"CriteriaBuilderTestClass");
  assertNotNull(domainClass);
  GroovyObject obj=(GroovyObject)domainClass.newInstance();
  obj.setProperty("firstName","fred");
  obj.setProperty("lastName","flintstone");
  obj.setProperty("age",new Integer(45));
  obj.invokeMethod("save",null);
  GroovyObject obj2=(GroovyObject)domainClass.newInstance();
  obj2.setProperty("firstName","wilma");
  obj2.setProperty("lastName","flintstone");
  obj2.setProperty("age",new Integer(35));
  obj2.invokeMethod("save",null);
  Proxy p=null;
  p=parse("{ " + "not{" + "eq('age', new Integer(35));"+ "eq('firstName', 'fred');"+ "}"+ "}","Test1","CriteriaBuilderTestClass");
  List results=(List)p.getAdaptee();
  assertEquals(0,results.size());
  p=parse("{ " + "not{" + "eq('age', new Integer(35));"+ "}"+ "}","Test1","CriteriaBuilderTestClass");
  results=(List)p.getAdaptee();
  assertEquals(1,results.size());
  try {
    p=parse("{ " + "not{" + "}"+ "}","Test1","CriteriaBuilderTestClass");
    fail("Should have thrown illegal argument exception");
  }
 catch (  InvokerInvocationException iie) {
    assertEquals(IllegalArgumentException.class,iie.getCause().getClass());
  }
}
