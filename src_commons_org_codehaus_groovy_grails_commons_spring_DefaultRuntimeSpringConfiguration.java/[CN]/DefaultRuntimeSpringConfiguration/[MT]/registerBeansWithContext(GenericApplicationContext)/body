{
  for (Iterator i=beanConfigs.values().iterator(); i.hasNext(); ) {
    BeanConfiguration bc=(BeanConfiguration)i.next();
    String beanName=bc.getName();
    if (LOG.isDebugEnabled()) {
      LOG.debug("[RuntimeConfiguration] Registering bean [" + beanName + "]");
      if (LOG.isTraceEnabled()) {
        PropertyValue[] pvs=bc.getBeanDefinition().getPropertyValues().getPropertyValues();
        for (int j=0; j < pvs.length; j++) {
          PropertyValue pv=pvs[j];
          LOG.trace("[RuntimeConfiguration] With property [" + pv.getName() + "] set to ["+ pv.getValue()+ "]");
        }
      }
    }
    if (applicationContext.containsBeanDefinition(beanName)) {
      removeBeanDefinition(applicationContext,beanName);
    }
    applicationContext.registerBeanDefinition(beanName,bc.getBeanDefinition());
    registerBeanAliases(applicationContext,beanName);
  }
  for (Iterator i=beanDefinitions.keySet().iterator(); i.hasNext(); ) {
    Object key=i.next();
    BeanDefinition bd=(BeanDefinition)beanDefinitions.get(key);
    if (LOG.isDebugEnabled()) {
      LOG.debug("[RuntimeConfiguration] Registering bean [" + key + "]");
      if (LOG.isTraceEnabled()) {
        PropertyValue[] pvs=bd.getPropertyValues().getPropertyValues();
        for (int j=0; j < pvs.length; j++) {
          PropertyValue pv=pvs[j];
          LOG.trace("[RuntimeConfiguration] With property [" + pv.getName() + "] set to ["+ pv.getValue()+ "]");
        }
      }
    }
    final String beanName=key.toString();
    if (applicationContext.containsBean(beanName)) {
      removeBeanDefinition(applicationContext,beanName);
    }
    applicationContext.registerBeanDefinition(beanName,bd);
    registerBeanAliases(applicationContext,beanName);
  }
}
