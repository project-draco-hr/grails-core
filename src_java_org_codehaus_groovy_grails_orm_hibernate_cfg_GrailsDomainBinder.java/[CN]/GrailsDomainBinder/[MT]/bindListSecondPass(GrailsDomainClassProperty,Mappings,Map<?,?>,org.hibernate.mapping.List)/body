{
  bindCollectionSecondPass(property,mappings,persistentClasses,list);
  String columnName=getIndexColumnName(property);
  SimpleValue iv=new SimpleValue(list.getCollectionTable());
  bindSimpleValue("integer",iv,true,columnName,mappings);
  iv.setTypeName("integer");
  list.setIndex(iv);
  list.setBaseIndex(0);
  list.setInverse(false);
  Value v=list.getElement();
  v.createForeignKey();
  if (property.isBidirectional()) {
    String entityName;
    Value element=list.getElement();
    if (element instanceof ManyToOne) {
      ManyToOne manyToOne=(ManyToOne)element;
      entityName=manyToOne.getReferencedEntityName();
    }
 else {
      entityName=((OneToMany)element).getReferencedEntityName();
    }
    PersistentClass referenced=mappings.getClass(entityName);
    final boolean isManyToMany=property.isManyToMany();
    Class<?> mappedClass=referenced.getMappedClass();
    Mapping m=getMapping(mappedClass);
    if (!isCompositeIdProperty(m,property.getOtherSide())) {
      Backref prop=new Backref();
      prop.setEntityName(property.getDomainClass().getFullName());
      prop.setName(UNDERSCORE + property.getDomainClass().getShortName() + UNDERSCORE+ property.getName()+ "Backref");
      prop.setSelectable(false);
      prop.setUpdateable(false);
      if (isManyToMany) {
        prop.setInsertable(false);
      }
      prop.setCollectionRole(list.getRole());
      prop.setValue(list.getKey());
      DependantValue value=(DependantValue)prop.getValue();
      if (!property.isCircular()) {
        value.setNullable(false);
      }
      value.setUpdateable(true);
      prop.setOptional(false);
      referenced.addProperty(prop);
    }
    IndexBackref ib=new IndexBackref();
    ib.setName(UNDERSCORE + property.getName() + "IndexBackref");
    ib.setUpdateable(false);
    ib.setSelectable(false);
    if (isManyToMany)     ib.setInsertable(false);
    ib.setCollectionRole(list.getRole());
    ib.setEntityName(list.getOwner().getEntityName());
    ib.setValue(list.getIndex());
    referenced.addProperty(ib);
  }
}
