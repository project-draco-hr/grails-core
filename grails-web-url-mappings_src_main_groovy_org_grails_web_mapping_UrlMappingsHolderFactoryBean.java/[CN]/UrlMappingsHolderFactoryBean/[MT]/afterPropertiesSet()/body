{
  Assert.state(applicationContext != null,"Property [applicationContext] must be set!");
  Assert.state(grailsApplication != null,"Property [grailsApplication] must be set!");
  List urlMappings=new ArrayList();
  List excludePatterns=new ArrayList();
  GrailsClass[] mappings=grailsApplication.getArtefacts(UrlMappingsArtefactHandler.TYPE);
  List<GrailsClass> mappingList=Arrays.asList(mappings);
  Collections.reverse(mappingList);
  final DefaultUrlMappingEvaluator mappingEvaluator=new DefaultUrlMappingEvaluator(applicationContext);
  mappingEvaluator.setPluginManager(pluginManager);
  if (mappings.length == 0) {
    urlMappings.addAll(mappingEvaluator.evaluateMappings(DefaultUrlMappings.getMappings()));
  }
 else {
    for (    GrailsClass mapping : mappingList) {
      GrailsUrlMappingsClass mappingClass=(GrailsUrlMappingsClass)mapping;
      List grailsClassMappings;
      if (Script.class.isAssignableFrom(mappingClass.getClazz())) {
        grailsClassMappings=mappingEvaluator.evaluateMappings(mappingClass.getClazz());
      }
 else {
        grailsClassMappings=mappingEvaluator.evaluateMappings(mappingClass.getMappingsClosure());
      }
      urlMappings.addAll(grailsClassMappings);
      if (mappingClass.getExcludePatterns() != null) {
        excludePatterns.addAll(mappingClass.getExcludePatterns());
      }
    }
  }
  DefaultUrlMappingsHolder defaultUrlMappingsHolder=new DefaultUrlMappingsHolder(urlMappings,excludePatterns,true);
  Config config=grailsApplication.getConfig();
  Integer cacheSize=config.getProperty(URL_MAPPING_CACHE_MAX_SIZE,Integer.class,null);
  if (cacheSize != null) {
    defaultUrlMappingsHolder.setMaxWeightedCacheCapacity(cacheSize);
  }
  Integer urlCreatorCacheSize=config.getProperty(URL_CREATOR_CACHE_MAX_SIZE,Integer.class,null);
  if (urlCreatorCacheSize != null) {
    defaultUrlMappingsHolder.setUrlCreatorMaxWeightedCacheCapacity(urlCreatorCacheSize);
  }
  defaultUrlMappingsHolder.initialize();
  UrlConverter urlConverter=applicationContext.containsBean(UrlConverter.BEAN_NAME) ? applicationContext.getBean(UrlConverter.BEAN_NAME,UrlConverter.class) : null;
  final GrailsControllerUrlMappings grailsControllerUrlMappings=new GrailsControllerUrlMappings(grailsApplication,defaultUrlMappingsHolder,urlConverter);
  ((ConfigurableApplicationContext)applicationContext).addApplicationListener(new ApplicationListener<ArtefactAdditionEvent>(){
    @Override public void onApplicationEvent(    ArtefactAdditionEvent event){
      GrailsClass artefact=event.getArtefact();
      if (artefact instanceof GrailsControllerClass) {
        grailsControllerUrlMappings.registerController((GrailsControllerClass)artefact);
      }
    }
  }
);
  urlMappingsHolder=grailsControllerUrlMappings;
}
