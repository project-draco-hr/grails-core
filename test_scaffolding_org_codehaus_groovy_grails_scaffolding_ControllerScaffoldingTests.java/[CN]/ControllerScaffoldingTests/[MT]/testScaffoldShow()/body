{
  MockHttpServletRequest request=new MockHttpServletRequest();
  MockHttpServletResponse response=new MockHttpServletResponse();
  request.setRequestURI("/scaffold/show");
  request.addParameter("id","1");
  GroovyObject go=configureDynamicGO(controllerClass,grailsApplication,request,response);
  try {
    Closure closure=(Closure)go.getProperty("show");
    Object returnValue=closure.call();
    assertNotNull(returnValue);
    assertTrue(returnValue instanceof ModelAndView);
    ModelAndView mv=(ModelAndView)returnValue;
    assertEquals("/scaffold/show",mv.getViewName());
    assertTrue(mv.getModel().containsKey("scaffold"));
    request=new MockHttpServletRequest();
    request.setRequestURI("/scaffold/show");
    request.addParameter("id","13423");
    go=configureDynamicGO(controllerClass,grailsApplication,request,response);
    closure=(Closure)go.getProperty("show");
    returnValue=closure.call();
    assertNotNull(returnValue);
    assertTrue(returnValue instanceof ModelAndView);
    mv=(ModelAndView)returnValue;
    assertEquals("/scaffold/show",mv.getViewName());
    assertTrue(mv.getModel().containsKey("scaffold"));
    request=new MockHttpServletRequest();
    request.setRequestURI("/scaffold/edit");
    request.addParameter("id","1");
    go=configureDynamicGO(controllerClass,grailsApplication,request,response);
    closure=(Closure)go.getProperty("edit");
    returnValue=closure.call();
    assertNotNull(returnValue);
    assertTrue(returnValue instanceof ModelAndView);
    mv=(ModelAndView)returnValue;
    assertEquals("/scaffold/edit",mv.getViewName());
    assertTrue(mv.getModel().containsKey("scaffold"));
  }
 catch (  MissingMethodException mme) {
    fail("Missing method exception should not have been thrown!");
  }
catch (  MissingPropertyException mpex) {
    fail("Missing property exception should not have been thrown!");
  }
}
