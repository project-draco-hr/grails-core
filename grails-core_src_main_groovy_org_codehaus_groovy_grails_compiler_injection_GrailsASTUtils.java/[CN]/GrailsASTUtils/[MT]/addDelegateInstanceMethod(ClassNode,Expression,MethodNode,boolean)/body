{
  Parameter[] parameterTypes=thisAsFirstArgument ? getRemainingParameterTypes(declaredMethod.getParameters()) : declaredMethod.getParameters();
  String methodName=declaredMethod.getName();
  if (classNode.hasDeclaredMethod(methodName,parameterTypes)) {
    return null;
  }
  String propertyName=GrailsClassUtils.getPropertyForGetter(methodName);
  if (propertyName != null && classNode.hasProperty(propertyName)) {
    return null;
  }
  propertyName=GrailsClassUtils.getPropertyForSetter(methodName);
  if (propertyName != null && classNode.hasProperty(propertyName)) {
    return null;
  }
  BlockStatement methodBody=new BlockStatement();
  ArgumentListExpression arguments=createArgumentListFromParameters(parameterTypes,thisAsFirstArgument);
  ClassNode returnType=nonGeneric(declaredMethod.getReturnType());
  MethodCallExpression methodCallExpression=new MethodCallExpression(delegate,methodName,arguments);
  methodCallExpression.setMethodTarget(declaredMethod);
  methodBody.addStatement(new ExpressionStatement(methodCallExpression));
  MethodNode methodNode=new MethodNode(methodName,Modifier.PUBLIC,returnType,copyParameters(parameterTypes),GrailsArtefactClassInjector.EMPTY_CLASS_ARRAY,methodBody);
  methodNode.addAnnotations(declaredMethod.getAnnotations());
  classNode.addMethod(methodNode);
  return methodNode;
}
