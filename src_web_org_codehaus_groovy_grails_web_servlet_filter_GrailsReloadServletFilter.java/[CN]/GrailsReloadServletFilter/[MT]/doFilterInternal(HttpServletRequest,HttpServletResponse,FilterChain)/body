{
  context=(ApplicationContext)getServletContext().getAttribute(GrailsApplicationAttributes.APPLICATION_CONTEXT);
  if (context == null) {
    filterChain.doFilter(httpServletRequest,httpServletResponse);
    return;
  }
  application=(GrailsApplication)context.getBean(GrailsApplication.APPLICATION_ID);
  if (application == null) {
    filterChain.doFilter(httpServletRequest,httpServletResponse);
    return;
  }
  if (copyScript == null) {
    GroovyClassLoader gcl=new GroovyClassLoader(Thread.currentThread().getContextClassLoader());
    Class groovyClass;
    try {
      groovyClass=gcl.parseClass(gcl.getResource("org/codehaus/groovy/grails/web/servlet/filter/GrailsResourceCopier.groovy").openStream());
      copyScript=(ResourceCopier)groovyClass.newInstance();
      groovyClass=gcl.parseClass(gcl.getResource("org/codehaus/groovy/grails/scaffolding/DefaultGrailsTemplateGenerator.groovy").openStream());
      templateGenerator=(GrailsTemplateGenerator)groovyClass.newInstance();
      templateGenerator.setOverwrite(true);
      GrailsControllerClass[] controllers=application.getControllers();
      for (int i=0; i < controllers.length; i++) {
        GrailsControllerClass controller=controllers[i];
        if (controller.isScaffolding()) {
          Class clazz=controller.getScaffoldedClass();
          GrailsDomainClass domainClass;
          if (clazz != null) {
            domainClass=application.getGrailsDomainClass(clazz.getName());
          }
 else {
            domainClass=application.getGrailsDomainClass(controller.getName());
          }
          if (domainClass != null) {
            templateGenerator.generateViews(domainClass,getServletContext().getRealPath("/WEB-INF"));
          }
        }
      }
      copyScript.copyViews(true);
    }
 catch (    IllegalAccessException e) {
      LOG.error("Illegal access creating resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    InstantiationException e) {
      LOG.error("Error instantiating resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    CompilationFailedException e) {
      LOG.error("Error compiling resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    Exception e) {
      LOG.error("Error loading resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
  }
  if (copyScript != null) {
    copyScript.copyGrailsApp();
  }
  GrailsResourceHolder resourceHolder=(GrailsResourceHolder)context.getBean(GrailsResourceHolder.APPLICATION_CONTEXT_ID);
  Resource[] resources=resourceHolder.getResources();
  if (!initialised) {
    for (int i=0; i < resources.length; i++) {
      Resource resource=resources[i];
      String className=resourceHolder.getClassName(resources[i]);
      URL url=resource.getURL();
      URLConnection c=url.openConnection();
      c.setDoInput(false);
      c.setDoOutput(false);
      long lastModified=c.getLastModified();
      ResourceMeta rm=new ResourceMeta();
      rm.className=className;
      rm.lastModified=lastModified;
      rm.url=url;
      resourceMetas.put(className,rm);
    }
    initialised=true;
  }
 else {
    for (int i=0; i < resources.length; i++) {
      Resource resource=resources[i];
      String className=resourceHolder.getClassName(resources[i]);
      Class loadedClass=null;
      boolean isNew=false;
      try {
        if (!resourceMetas.containsKey(className)) {
          URL url=resource.getURL();
          URLConnection c=url.openConnection();
          c.setDoInput(false);
          c.setDoOutput(false);
          long lastModified=c.getLastModified();
          ResourceMeta rm=new ResourceMeta();
          rm.className=className;
          rm.lastModified=lastModified;
          rm.url=url;
          resourceMetas.put(className,rm);
          GroovyClassLoader gcl=application.getClassLoader();
          ((GrailsResourceLoader)gcl.getResourceLoader()).setResources(resources);
          loadedClass=gcl.loadClass(className,true,false);
          isNew=true;
        }
 else {
          ResourceMeta rm=(ResourceMeta)resourceMetas.get(className);
          URL url=resource.getURL();
          URLConnection c=url.openConnection();
          if (rm.lastModified < c.getLastModified()) {
            loadedClass=application.getClassLoader().loadClass(className,true,false);
            rm.lastModified=c.getLastModified();
          }
        }
        if (loadedClass != null) {
          loadGrailsClass(loadedClass,isNew);
        }
      }
 catch (      ClassNotFoundException cnfex) {
        LOG.error("Unabled to reload class [" + className + "], class not found: "+ cnfex.getMessage(),cnfex);
      }
    }
  }
  filterChain.doFilter(httpServletRequest,httpServletResponse);
}
