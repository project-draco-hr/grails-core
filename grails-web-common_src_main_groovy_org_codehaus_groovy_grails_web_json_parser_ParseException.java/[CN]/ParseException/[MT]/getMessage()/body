{
  if (!specialConstructor) {
    return super.getMessage();
  }
  StringBuilder expected=new StringBuilder();
  int maxSize=0;
  for (int i=0; i < expectedTokenSequences.length; i++) {
    if (maxSize < expectedTokenSequences[i].length) {
      maxSize=expectedTokenSequences[i].length;
    }
    for (int j=0; j < expectedTokenSequences[i].length; j++) {
      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
    }
    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
      expected.append("...");
    }
    expected.append(eol).append("    ");
  }
  StringBuilder retval=new StringBuilder("Encountered \"");
  Token tok=currentToken.next;
  for (int i=0; i < maxSize; i++) {
    if (i != 0)     retval.append(" ");
    if (tok.kind == 0) {
      retval.append(tokenImage[0]);
      break;
    }
    retval.append(" ").append(tokenImage[tok.kind]);
    retval.append(" \"");
    retval.append(add_escapes(tok.image));
    retval.append(" \"");
    tok=tok.next;
  }
  retval.append("\" at line ").append(currentToken.next.beginLine).append(", column ").append(currentToken.next.beginColumn);
  retval.append(".").append(eol);
  if (expectedTokenSequences.length == 1) {
    retval.append("Was expecting:").append(eol).append("    ");
  }
 else {
    retval.append("Was expecting one of:").append(eol).append("    ");
  }
  retval.append(expected);
  return retval.toString();
}
