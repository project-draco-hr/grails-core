{
  try {
    Resource[] resources=resourcePatternResolver.getResources(resourcePattern);
    for (int i=0; i < resources.length; i++) {
      Resource resource=resources[i];
      if (resource.getFilename().endsWith(".groovy")) {
        loadBeans(resource);
      }
 else       if (resource.getFilename().endsWith(".xml")) {
        SimpleBeanDefinitionRegistry beanRegistry=new SimpleBeanDefinitionRegistry();
        XmlBeanDefinitionReader beanReader=new XmlBeanDefinitionReader(beanRegistry);
        beanReader.loadBeanDefinitions(resource);
        String[] beanNames=beanRegistry.getBeanDefinitionNames();
        for (int j=0; j < beanNames.length; j++) {
          String beanName=beanNames[j];
          springConfig.addBeanDefinition(beanName,beanRegistry.getBeanDefinition(beanName));
        }
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Error loading beans for resource pattern: " + resourcePattern,e);
  }
}
