{
  GrailsDomainClass domainClass=(GrailsDomainClass)application.getArtefact(DomainClassArtefactHandler.TYPE,target.getClass().getName());
  if (shouldValidate(arguments,domainClass)) {
    Validator validator=domainClass.getValidator();
    Errors errors=setupErrorsProperty(target);
    if (validator != null) {
      boolean deepValidate=true;
      Map argsMap=null;
      if (arguments.length > 0 && arguments[0] instanceof Map) {
        argsMap=(Map)arguments[0];
      }
      if (argsMap != null && argsMap.containsKey(ARGUMENT_DEEP_VALIDATE)) {
        deepValidate=GrailsClassUtils.getBooleanFromMap(ARGUMENT_DEEP_VALIDATE,argsMap);
      }
      if (deepValidate && (validator instanceof CascadingValidator)) {
        ((CascadingValidator)validator).validate(target,errors,deepValidate);
      }
 else {
        validator.validate(target,errors);
      }
      if (errors.hasErrors()) {
        handleValidationError(target,errors);
        boolean shouldFail=false;
        final Map config=ConfigurationHolder.getFlatConfig();
        if (config.containsKey(FAIL_ON_ERROR_CONFIG_PROPERTY)) {
          shouldFail=Boolean.TRUE == config.get(FAIL_ON_ERROR_CONFIG_PROPERTY);
        }
 else {
          shouldFail=GrailsClassUtils.getBooleanFromMap(ARGUMENT_FAIL_ON_ERROR,argsMap);
        }
        if (shouldFail) {
          throw new ValidationException("Validation Error(s) Occurred During Save");
        }
        return null;
      }
 else {
        setObjectToReadWrite(target);
      }
    }
  }
  if (domainClass != null) {
    autoRetrieveAssocations(domainClass,target);
  }
  if (shouldInsert(arguments)) {
    return performInsert(target,shouldFlush(arguments));
  }
 else {
    return performSave(target,shouldFlush(arguments));
  }
}
