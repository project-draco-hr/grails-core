{
  if (!(astNodes[0] instanceof AnnotationNode) || !(astNodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");
  }
  AnnotatedNode parent=(AnnotatedNode)astNodes[1];
  AnnotationNode node=(AnnotationNode)astNodes[0];
  if (!MY_TYPE.equals(node.getClassNode()) || !(parent instanceof ClassNode)) {
    return;
  }
  ClassNode classNode=(ClassNode)parent;
  String cName=classNode.getName();
  if (classNode.isInterface()) {
    error(source,"Error processing interface '" + cName + "'. "+ MY_TYPE_NAME+ " not allowed for interfaces.");
  }
  Expression value=node.getMember("value");
  ClassExpression ce;
  if (value instanceof ClassExpression) {
    ce=(ClassExpression)value;
    testFor(classNode,ce);
  }
 else   if (!isJunit3Test(classNode)) {
    List<AnnotationNode> annotations=classNode.getAnnotations(MY_TYPE);
    if (annotations.size() > 0)     return;
    String fileName=source.getName();
    String className=GrailsResourceUtils.getClassName(new FileSystemResource(fileName));
    if (className != null) {
      boolean isJunit=className.endsWith("Tests");
      boolean isSpock=className.endsWith("Spec");
      String targetClassName=null;
      if (isJunit) {
        targetClassName=className.substring(0,className.indexOf("Tests"));
      }
 else       if (isSpock) {
        targetClassName=className.substring(0,className.indexOf("Spec"));
      }
      if (targetClassName != null) {
        Resource targetResource=getResourceLocator().findResourceForClassName(targetClassName);
        if (targetResource != null) {
          try {
            if (GrailsResourceUtils.isDomainClass(targetResource.getURL())) {
              testFor(classNode,new ClassExpression(new ClassNode(targetClassName,0,ClassHelper.OBJECT_TYPE)));
            }
 else {
              for (              String artefactType : artefactTypeToTestMap.keySet()) {
                if (classNode.getName().endsWith(artefactType)) {
                  testFor(classNode,new ClassExpression(new ClassNode(targetClassName,0,ClassHelper.OBJECT_TYPE)));
                  break;
                }
              }
            }
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
}
