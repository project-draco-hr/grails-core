{
  MinConstraint constraint=new MinConstraint();
  assertEquals(ConstrainedProperty.MIN_CONSTRAINT,constraint.getName());
  assertTrue(constraint.supports(int.class));
  assertTrue(constraint.supports(float.class));
  assertTrue(constraint.supports(Integer.class));
  assertTrue(constraint.supports(Float.class));
  assertTrue(constraint.supports(BigDecimal.class));
  assertFalse(constraint.supports(List.class));
  assertFalse(constraint.supports(null));
  constraint=(MinConstraint)getConstraint("testLong",100L);
  assertEquals(100L,constraint.getMinValue());
  try {
    getConstraint("testFloat",new Object());
    fail("MinConstraint must throw an exception for non-comparable parameters.");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    getConstraint("testFloat",4d);
    fail("MinConstraint must throw an exception for parameter with wrong type .");
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    getConstraint("testBigDecimal",5);
    fail("MinConstraint must throw an exception for parameter with wrong type .");
  }
 catch (  IllegalArgumentException iae) {
  }
}
