{
  Object[] args=(Object[])arg;
  final boolean isResponseCode=isResponseCode(methodName);
  if (methodName.startsWith(SLASH) || isResponseCode) {
    try {
      urlDefiningMode=false;
      args=args != null && args.length > 0 ? args : new Object[]{Collections.EMPTY_MAP};
      if (args[0] instanceof Closure) {
        UrlMappingData urlData=createUrlMappingData(methodName,isResponseCode);
        Closure callable=(Closure)args[0];
        if (delegate != null)         callable.setDelegate(delegate);
        callable.call();
        Object controllerName;
        Object actionName;
        Object viewName;
        if (binding != null) {
          controllerName=binding.getVariables().get(GrailsControllerClass.CONTROLLER);
          actionName=binding.getVariables().get(GrailsControllerClass.ACTION);
          viewName=binding.getVariables().get(GrailsControllerClass.VIEW);
        }
 else {
          controllerName=this.controllerName;
          actionName=this.actionName;
          viewName=this.viewName;
        }
        ConstrainedProperty[] constraints=(ConstrainedProperty[])previousConstraints.toArray(new ConstrainedProperty[previousConstraints.size()]);
        UrlMapping urlMapping;
        if (!isResponseCode) {
          if (actionName != null && viewName != null) {
            viewName=null;
            LOG.warn("Both [action] and [view] specified in URL mapping [" + methodName + "]. The action takes precendence!");
          }
          urlMapping=new RegexUrlMapping(urlData,controllerName,actionName,viewName,constraints);
        }
 else {
          urlMapping=new ResponseCodeUrlMapping(urlData,controllerName,actionName,viewName,constraints);
        }
        urlMappings.add(urlMapping);
        return urlMapping;
      }
      if (args[0] instanceof Map) {
        Map namedArguments=(Map)args[0];
        UrlMappingData urlData=createUrlMappingData(methodName,isResponseCode);
        if (args.length > 1 && args[1] instanceof Closure) {
          Closure callable=(Closure)args[1];
          callable.call();
        }
        UrlMapping urlMapping=getURLMapping(namedArguments,urlData,methodName,isResponseCode);
        urlMappings.add(urlMapping);
        return urlMapping;
      }
      return null;
    }
  finally {
      if (binding != null) {
        binding.getVariables().remove(GrailsControllerClass.CONTROLLER);
        binding.getVariables().remove(GrailsControllerClass.ACTION);
        binding.getVariables().remove(GrailsControllerClass.VIEW);
      }
 else {
        controllerName=null;
        actionName=null;
        viewName=null;
      }
      previousConstraints.clear();
      urlDefiningMode=true;
    }
  }
 else   if (!urlDefiningMode && CONSTRAINTS.equals(methodName)) {
    ConstrainedPropertyBuilder builder=new ConstrainedPropertyBuilder(this);
    if (args.length > 0 && (args[0] instanceof Closure)) {
      Closure callable=(Closure)args[0];
      callable.setDelegate(builder);
      for (Iterator i=previousConstraints.iterator(); i.hasNext(); ) {
        ConstrainedProperty constrainedProperty=(ConstrainedProperty)i.next();
        builder.getConstrainedProperties().put(constrainedProperty.getPropertyName(),constrainedProperty);
      }
      callable.call();
    }
    return builder.getConstrainedProperties();
  }
 else {
    return super.invokeMethod(methodName,arg);
  }
}
