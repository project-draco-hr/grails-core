{
  try {
    writer.object();
    BeanInfo info=Introspector.getBeanInfo(o.getClass());
    PropertyDescriptor[] properties=info.getPropertyDescriptors();
    for (int i=0; i < properties.length; i++) {
      PropertyDescriptor property=properties[i];
      String name=property.getName();
      Method readMethod=property.getReadMethod();
      Class propType=property.getPropertyType();
      if (readMethod != null && !(o instanceof GroovyObject && name.equals("metaClass"))) {
        Object value=readMethod.invoke(o,(Object[])null);
        property(name,value);
      }
    }
    Field[] fields=o.getClass().getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      int modifiers=field.getModifiers();
      if (Modifier.isPublic(modifiers) && !(Modifier.isStatic(modifiers) || Modifier.isTransient(modifiers))) {
        property(field.getName(),field.get(o));
      }
    }
    writer.endObject();
  }
 catch (  ConverterException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw new ConverterException("Error converting Bean with class " + o.getClass().getName(),e);
  }
}
