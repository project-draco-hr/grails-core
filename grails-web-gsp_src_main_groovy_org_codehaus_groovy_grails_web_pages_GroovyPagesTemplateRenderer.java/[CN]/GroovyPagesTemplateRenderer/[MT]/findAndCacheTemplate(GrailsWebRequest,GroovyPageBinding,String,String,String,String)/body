{
  String templatePath=GrailsStringUtils.isNotEmpty(contextPath) ? GrailsResourceUtils.appendPiecesForUri(contextPath,templateName) : templateName;
  final GroovyPageScriptSource scriptSource;
  if (pluginName == null) {
    scriptSource=groovyPageLocator.findTemplateInBinding(templatePath,pageScope);
  }
 else {
    scriptSource=groovyPageLocator.findTemplateInBinding(pluginName,templatePath,pageScope);
  }
  String cacheKey;
  if (scriptSource == null) {
    cacheKey=contextPath + pluginName + uri;
  }
 else {
    cacheKey=scriptSource.getURI();
  }
  return CacheEntry.getValue(templateCache,cacheKey,reloadEnabled ? GroovyPageMetaInfo.LASTMODIFIED_CHECK_INTERVAL : -1,null,new Callable<CacheEntry<Template>>(){
    public CacheEntry<Template> call(){
      return new CacheEntry<Template>(){
        boolean allowCaching=false;
        @Override protected boolean hasExpired(        long timeout){
          return allowCaching ? super.hasExpired(timeout) : true;
        }
        @Override protected Template updateValue(        Template oldValue,        Callable<Template> updater) throws Exception {
          Template t=null;
          if (scriptSource != null) {
            t=groovyPagesTemplateEngine.createTemplate(scriptSource);
          }
          allowCaching=cacheEnabled;
          if (t == null && scaffoldingTemplateGenerator != null) {
            t=generateScaffoldedTemplate(webRequest,uri);
            allowCaching=true;
          }
          return t;
        }
      }
;
    }
  }
,true);
}
