{
  Object[] args=(Object[])arg;
  final boolean isResponseCode=isResponseCode(methodName);
  if (methodName.startsWith(SLASH) || isResponseCode) {
    parameterValues=new HashMap<String,Object>();
    Map variables=binding != null ? binding.getVariables() : null;
    try {
      urlDefiningMode=false;
      args=args != null && args.length > 0 ? args : new Object[]{Collections.EMPTY_MAP};
      if (args[0] instanceof Closure) {
        UrlMappingData urlData=createUrlMappingData(methodName,isResponseCode);
        Closure callable=(Closure)args[0];
        if (delegate != null)         callable.setDelegate(delegate);
        callable.call();
        Object controllerName;
        Object actionName;
        Object pluginName;
        String httpMethod=null;
        Object viewName;
        Object uri;
        if (binding != null) {
          controllerName=variables.get(GrailsControllerClass.CONTROLLER);
          actionName=variables.get(GrailsControllerClass.ACTION);
          viewName=variables.get(GrailsControllerClass.VIEW);
          uri=variables.get(URI);
          pluginName=variables.get(PLUGIN);
          if (variables.containsKey(HTTP_METHOD)) {
            httpMethod=variables.get(HTTP_METHOD).toString();
          }
        }
 else {
          controllerName=this.controllerName;
          actionName=this.actionName;
          pluginName=this.pluginName;
          viewName=this.viewName;
          uri=this.uri;
          httpMethod=this.httpMethod;
        }
        ConstrainedProperty[] constraints=previousConstraints.toArray(new ConstrainedProperty[previousConstraints.size()]);
        UrlMapping urlMapping;
        if (uri != null) {
          try {
            urlMapping=new RegexUrlMapping(urlData,new URI(uri.toString()),constraints,sc);
          }
 catch (          URISyntaxException e) {
            throw new UrlMappingException("Cannot map to invalid URI: " + e.getMessage(),e);
          }
        }
 else {
          urlMapping=createURLMapping(urlData,isResponseCode,controllerName,actionName,pluginName,viewName,httpMethod,constraints);
        }
        if (binding != null) {
          Map bindingVariables=variables;
          Object parse=getParseRequest(Collections.EMPTY_MAP,bindingVariables);
          if (parse instanceof Boolean) {
            urlMapping.setParseRequest((Boolean)parse);
          }
        }
        configureUrlMapping(urlMapping);
        return urlMapping;
      }
      if (args[0] instanceof Map) {
        Map namedArguments=(Map)args[0];
        UrlMappingData urlData=createUrlMappingData(methodName,isResponseCode);
        if (args.length > 1 && args[1] instanceof Closure) {
          Closure callable=(Closure)args[1];
          callable.call();
        }
        UrlMapping urlMapping=getURLMappingForNamedArgs(namedArguments,urlData,methodName,isResponseCode);
        configureUrlMapping(urlMapping);
        return urlMapping;
      }
      return null;
    }
  finally {
      if (binding != null) {
        variables.clear();
      }
 else {
        controllerName=null;
        actionName=null;
        viewName=null;
        pluginName=null;
      }
      previousConstraints.clear();
      urlDefiningMode=true;
    }
  }
 else   if (!urlDefiningMode && CONSTRAINTS.equals(methodName)) {
    ConstrainedPropertyBuilder builder=new ConstrainedPropertyBuilder(this);
    if (args.length > 0 && (args[0] instanceof Closure)) {
      Closure callable=(Closure)args[0];
      callable.setDelegate(builder);
      for (      ConstrainedProperty constrainedProperty : previousConstraints) {
        builder.getConstrainedProperties().put(constrainedProperty.getPropertyName(),constrainedProperty);
      }
      callable.call();
    }
    return builder.getConstrainedProperties();
  }
 else {
    return super.invokeMethod(methodName,arg);
  }
}
