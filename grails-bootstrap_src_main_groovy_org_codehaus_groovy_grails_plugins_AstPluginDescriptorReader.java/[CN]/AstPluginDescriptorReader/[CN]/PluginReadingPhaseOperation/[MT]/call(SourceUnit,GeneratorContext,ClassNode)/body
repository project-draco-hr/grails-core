{
  ClassCodeVisitorSupport visitor=new ClassCodeVisitorSupport(){
    @Override public void visitProperty(    PropertyNode node){
      String name=node.getName();
      final Expression expr=node.getField().getInitialExpression();
      if (expr != null) {
        Object value;
        if (expr instanceof ListExpression) {
          final List<String> list=new ArrayList<String>();
          value=list;
          for (          Expression i : ((ListExpression)expr).getExpressions()) {
            list.add(i.getText());
          }
        }
 else         if (expr instanceof MapExpression) {
          final Map<String,String> map=new LinkedHashMap<String,String>();
          value=map;
          for (          MapEntryExpression mee : ((MapExpression)expr).getMapEntryExpressions()) {
            map.put(mee.getKeyExpression().getText(),mee.getValueExpression().getText());
          }
        }
 else {
          value=expr.getText();
        }
        if (DefaultGroovyMethods.hasProperty(pluginInfo,name) != null) {
          pluginInfoMetaClass.setProperty(pluginInfo,name,value);
        }
 else {
          pluginInfo.setProperty(name,value);
        }
        super.visitProperty(node);
      }
    }
    @Override protected SourceUnit getSourceUnit(){
      return source;
    }
  }
;
  classNode.visitContents(visitor);
  String className=classNode.getNameWithoutPackage();
  pluginInfoMetaClass.setProperty(pluginInfo,"name",GrailsNameUtils.getPluginName(className + ".groovy"));
}
