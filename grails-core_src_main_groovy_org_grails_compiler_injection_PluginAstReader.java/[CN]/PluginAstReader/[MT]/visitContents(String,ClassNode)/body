{
  ClassCodeVisitorSupport visitor=new ClassCodeVisitorSupport(){
    @Override public void visitProperty(    PropertyNode node){
      String name=node.getName();
      final Expression expr=node.getField().getInitialExpression();
      if (expr != null) {
        Object value=null;
        if (expr instanceof ListExpression) {
          final List<String> list=new ArrayList<String>();
          for (          Expression i : ((ListExpression)expr).getExpressions()) {
            list.add(i.getText());
          }
          value=list;
        }
 else         if (expr instanceof MapExpression) {
          final Map<String,String> map=new LinkedHashMap<String,String>();
          value=map;
          for (          MapEntryExpression mee : ((MapExpression)expr).getMapEntryExpressions()) {
            map.put(mee.getKeyExpression().getText(),mee.getValueExpression().getText());
          }
        }
 else {
          if (expr instanceof ConstantExpression) {
            value=expr.getText();
          }
        }
        if (value != null) {
          pluginInfo.setProperty(name,value);
          super.visitProperty(node);
        }
      }
    }
    @Override protected SourceUnit getSourceUnit(){
      return classNode.getModule().getContext();
    }
  }
;
  classNode.visitContents(visitor);
  pluginInfo.setName(GrailsNameUtils.getPluginName(className + ".groovy"));
}
