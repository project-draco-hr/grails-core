{
  super(t.getMessage(),t);
  this.t=t;
  StringWriter sw=new StringWriter();
  PrintWriter pw=new PrintWriter(sw);
  this.t.printStackTrace(pw);
  this.stackTrace=sw.toString();
  Matcher m1=PARSE_DETAILS_STEP1.matcher(stackTrace);
  Matcher m2=PARSE_DETAILS_STEP2.matcher(stackTrace);
  Matcher gsp=PARSE_GSP_DETAILS_STEP1.matcher(stackTrace);
  try {
    if (gsp.find()) {
      isGSP=true;
      this.className=gsp.group(2);
      this.lineNumber=Integer.parseInt(gsp.group(3));
      this.gspFile=URL_PREFIX + "views/" + gsp.group(1)+ '/'+ this.className;
    }
 else {
      if (m1.find()) {
        this.className=m1.group(1);
        this.lineNumber=Integer.parseInt(m1.group(2));
      }
 else       if (m2.find()) {
        this.className=m2.group(1);
        this.lineNumber=Integer.parseInt(m2.group(2));
      }
    }
  }
 catch (  NumberFormatException nfex) {
  }
  LineNumberReader reader=null;
  try {
    if (getLineNumber() > -1) {
      String url;
      if (gspFile == null) {
        String fileName=this.className.replace('.','/') + ".groovy";
        String urlPrefix=URL_PREFIX;
        if (GrailsClassUtils.isControllerClass(className) || GrailsClassUtils.isPageFlowClass(className)) {
          urlPrefix+="/controllers/";
        }
 else         if (GrailsClassUtils.isTagLibClass(className)) {
          urlPrefix+="/taglib/";
        }
 else         if (GrailsClassUtils.isService(className)) {
          urlPrefix+="/services/";
        }
        url=urlPrefix + fileName;
      }
 else {
        url=gspFile;
        GrailsApplicationAttributes attrs=new DefaultGrailsApplicationAttributes(servletContext);
        GroovyPagesTemplateEngine engine=attrs.getPagesTemplateEngine();
        int[] lineNumbers=engine.getLineNumbersForPage(servletContext,url);
        if (this.lineNumber < lineNumbers.length) {
          this.lineNumber=lineNumbers[this.lineNumber - 1];
        }
      }
      InputStream in=servletContext.getResourceAsStream(url);
      if (in != null) {
        reader=new LineNumberReader(new InputStreamReader(in));
        String currentLine=reader.readLine();
        StringBuffer buf=new StringBuffer();
        while (currentLine != null) {
          int currentLineNumber=reader.getLineNumber();
          if (currentLineNumber == this.lineNumber) {
            buf.append(currentLineNumber).append(": ").append(currentLine).append("\n");
          }
 else           if (currentLineNumber == this.lineNumber + 1) {
            buf.append(currentLineNumber).append(": ").append(currentLine);
            break;
          }
          currentLine=reader.readLine();
        }
        this.codeSnippet=buf.toString().split("\n");
      }
    }
  }
 catch (  IOException e) {
    LOG.warn("[GrailsWrappedRuntimeException] I/O error reading line diagnostics: " + e.getMessage(),e);
  }
 finally {
    if (reader != null)     try {
      reader.close();
    }
 catch (    IOException e) {
    }
  }
}
