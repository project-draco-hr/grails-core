{
  Statement newCommandCode;
  ConstructorCallExpression constructorCallExpression;
  ArgumentListExpression arguments;
  BlockStatement wrapper=new BlockStatement();
  MethodNode bindDataMethodNode=classNode.getMethod("bindData",new Parameter[]{new Parameter(new ClassNode(Object.class),"target"),new Parameter(new ClassNode(Object.class),"params")});
  for (  Parameter param : actionParameters) {
    constructorCallExpression=new ConstructorCallExpression(param.getType(),EMPTY_TUPLE);
    newCommandCode=new ExpressionStatement(new DeclarationExpression(new VariableExpression(param.getName(),param.getType()),Token.newSymbol(Types.EQUALS,0,0),constructorCallExpression));
    wrapper.addStatement(newCommandCode);
    arguments=new ArgumentListExpression();
    arguments.addExpression(new VariableExpression(param.getName()));
    arguments.addExpression(new VariableExpression(PARAMS_EXPRESSION));
    MethodCallExpression bindDataMethodCallExpression=new MethodCallExpression(THIS_EXPRESSION,"bindData",arguments);
    if (bindDataMethodNode != null) {
      bindDataMethodCallExpression.setMethodTarget(bindDataMethodNode);
    }
    wrapper.addStatement(new ExpressionStatement(bindDataMethodCallExpression));
    MethodCallExpression validateMethodCallExpression=new MethodCallExpression(new VariableExpression(param.getName()),"validate",EMPTY_TUPLE);
    wrapper.addStatement(new ExpressionStatement(validateMethodCallExpression));
  }
  wrapper.addStatement(actionCode);
  return wrapper;
}
