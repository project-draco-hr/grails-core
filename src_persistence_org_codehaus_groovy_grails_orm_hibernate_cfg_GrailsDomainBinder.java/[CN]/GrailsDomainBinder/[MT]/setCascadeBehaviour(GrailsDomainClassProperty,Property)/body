{
  String cascadeStrategy="none";
  GrailsDomainClass domainClass=grailsProperty.getDomainClass();
  ColumnConfig cc=getColumnConfig(grailsProperty);
  GrailsDomainClass referenced=grailsProperty.getReferencedDomainClass();
  if (cc != null && cc.getCascade() != null) {
    cascadeStrategy=cc.getCascade();
  }
 else   if (grailsProperty.isAssociation()) {
    if (grailsProperty.isOneToOne()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_ALL;
    }
 else     if (grailsProperty.isOneToMany()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_ALL;
 else       cascadeStrategy=CASCADE_SAVE_UPDATE;
    }
 else     if (grailsProperty.isManyToMany()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_SAVE_UPDATE;
    }
 else     if (grailsProperty.isManyToOne()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_ALL;
 else       cascadeStrategy=CASCADE_NONE;
    }
  }
 else   if (Map.class.isAssignableFrom(grailsProperty.getType())) {
    referenced=grailsProperty.getReferencedDomainClass();
    if (referenced != null && referenced.isOwningClass(grailsProperty.getDomainClass().getClazz())) {
      cascadeStrategy=CASCADE_ALL;
    }
 else {
      cascadeStrategy=CASCADE_SAVE_UPDATE;
    }
  }
  logCascadeMapping(grailsProperty,cascadeStrategy,referenced);
  prop.setCascade(cascadeStrategy);
}
