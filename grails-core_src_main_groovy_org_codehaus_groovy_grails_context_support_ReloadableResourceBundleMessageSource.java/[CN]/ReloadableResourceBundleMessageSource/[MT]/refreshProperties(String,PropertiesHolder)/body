{
  long refreshTimestamp=(this.cacheMillis < 0 ? -1 : System.currentTimeMillis());
  Resource resource=this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX);
  if (!resource.exists()) {
    resource=this.resourceLoader.getResource(filename + XML_SUFFIX);
  }
  if (resource.exists()) {
    long fileTimestamp=-1;
    if (this.cacheMillis >= 0) {
      try {
        fileTimestamp=resource.lastModified();
        if (propHolder != null && propHolder.getFileTimestamp() == fileTimestamp) {
          if (logger.isDebugEnabled()) {
            logger.debug("Re-caching properties for filename [" + filename + "] - file hasn't been modified");
          }
          propHolder.setRefreshTimestamp(refreshTimestamp);
          return propHolder;
        }
      }
 catch (      IOException ex) {
        if (logger.isDebugEnabled()) {
          logger.debug(resource + " could not be resolved in the file system - assuming that is hasn't changed",ex);
        }
        fileTimestamp=-1;
      }
    }
    try {
      Properties props=loadProperties(resource,filename);
      propHolder=new PropertiesHolder(props,fileTimestamp);
    }
 catch (    IOException ex) {
      if (logger.isWarnEnabled()) {
        logger.warn("Could not parse properties file [" + resource.getFilename() + "]",ex);
      }
      propHolder=new PropertiesHolder();
    }
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug("No properties file found for [" + filename + "] - neither plain properties nor XML");
    }
    propHolder=new PropertiesHolder();
  }
  propHolder.setRefreshTimestamp(refreshTimestamp);
  this.cachedProperties.put(filename,propHolder);
  return propHolder;
}
