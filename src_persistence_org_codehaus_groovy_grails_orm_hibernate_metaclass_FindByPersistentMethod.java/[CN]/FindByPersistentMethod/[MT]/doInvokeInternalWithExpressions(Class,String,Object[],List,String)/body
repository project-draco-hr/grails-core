{
  final String operator=OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;
  return super.getHibernateTemplate().execute(new HibernateCallback(){
    public Object doInHibernate(    Session session) throws HibernateException, SQLException {
      Criteria crit=session.createCriteria(clazz);
      if (arguments.length > 0) {
        if (arguments[0] instanceof Map) {
          Map argMap=(Map)arguments[0];
          GrailsHibernateUtil.populateArgumentsForCriteria(clazz,crit,argMap);
        }
      }
      if (operator.equals(OPERATOR_OR)) {
        Disjunction dis=Restrictions.disjunction();
        for (Iterator i=expressions.iterator(); i.hasNext(); ) {
          GrailsMethodExpression current=(GrailsMethodExpression)i.next();
          dis.add(current.getCriterion());
        }
        crit.add(dis);
      }
 else {
        for (Iterator i=expressions.iterator(); i.hasNext(); ) {
          GrailsMethodExpression current=(GrailsMethodExpression)i.next();
          crit.add(current.getCriterion());
        }
      }
      try {
        return crit.uniqueResult();
      }
 catch (      HibernateException e) {
        crit.setMaxResults(1);
        return crit.uniqueResult();
      }
    }
  }
);
}
