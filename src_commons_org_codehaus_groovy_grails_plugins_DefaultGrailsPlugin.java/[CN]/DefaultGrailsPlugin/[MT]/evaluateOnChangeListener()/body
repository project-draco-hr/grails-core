{
  if (this.pluginBean.isReadableProperty(ON_CHANGE)) {
    this.onChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,ON_CHANGE);
    Object referencedResources=GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,WATCHED_RESOURCES);
    try {
      if (referencedResources instanceof String) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Configuring plugin " + this + " to watch resources with pattern: "+ referencedResources);
        }
        this.resourcesReference=referencedResources.toString();
        watchedResources=resolver.getResources(resourcesReference);
        if (watchedResources.length == 0) {
          watchedResources=resolver.getResources("classpath*:" + resourcesReference);
        }
      }
 else       if (referencedResources instanceof List) {
        List resourceList=(List)referencedResources;
        for (int i=0; i < resourceList.size(); i++) {
          String res=resourceList.get(i).toString();
          Resource[] tmp=resolver.getResources(res);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Watching resource set [" + (i + 1) + "]: "+ ArrayUtils.toString(tmp));
          }
          if (tmp.length == 0)           tmp=resolver.getResources("classpath*:" + res);
          if (tmp.length > 0) {
            watchedResources=(Resource[])ArrayUtils.addAll(this.watchedResources,tmp);
          }
        }
      }
    }
 catch (    IllegalArgumentException e) {
      LOG.warn("Cannot load plug-in resource watch list from [" + resourcesReference + "]: "+ e.getMessage(),e);
    }
catch (    IOException e) {
      LOG.warn("I/O exception loading plug-in resource watch list: " + e.getMessage(),e);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Plugin " + this + " found ["+ watchedResources.length+ "] to watch");
    }
    try {
      initializeModifiedTimes();
    }
 catch (    IOException e) {
      LOG.warn("I/O exception initializing modified times for watched resources: " + e.getMessage(),e);
    }
  }
}
