{
  if (!(astNodes[0] instanceof AnnotationNode) || !(astNodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");
  }
  AnnotatedNode parent=(AnnotatedNode)astNodes[1];
  AnnotationNode node=(AnnotationNode)astNodes[0];
  if (!MY_TYPE.equals(node.getClassNode()) || !(parent instanceof ClassNode)) {
    return;
  }
  ClassNode classNode=(ClassNode)parent;
  String cName=classNode.getName();
  if (classNode.isInterface()) {
    throw new RuntimeException("Error processing interface '" + cName + "'. "+ MY_TYPE_NAME+ " not allowed for interfaces.");
  }
  Expression value=node.getMember("value");
  if (value instanceof ClassExpression) {
    ClassExpression ce=(ClassExpression)value;
    ClassNode mixinClassNode=ce.getType();
    final String fieldName='$' + GrailsNameUtils.getPropertyName(mixinClassNode.getName());
    classNode.addField(fieldName,Modifier.PRIVATE,mixinClassNode,new ConstructorCallExpression(mixinClassNode,new ArgumentListExpression()));
    VariableExpression fieldReference=new VariableExpression(fieldName);
    boolean isJunit3=isJunit3Test(classNode);
    List<MethodNode> beforeMethods=null;
    List<MethodNode> afterMethods=null;
    if (isJunit3) {
      beforeMethods=new ArrayList<MethodNode>();
      afterMethods=new ArrayList<MethodNode>();
    }
    while (!mixinClassNode.getName().equals(OBJECT_CLASS)) {
      final List<MethodNode> mixinMethods=mixinClassNode.getMethods();
      int beforeClassMethodCount=0;
      int afterClassMethodCount=0;
      for (      MethodNode mixinMethod : mixinMethods) {
        if (isCandidateMethod(mixinMethod) && !hasDeclaredMethod(classNode,mixinMethod)) {
          if (mixinMethod.isStatic()) {
            GrailsASTUtils.addDelegateStaticMethod(classNode,mixinMethod);
          }
 else {
            GrailsASTUtils.addDelegateInstanceMethod(classNode,fieldReference,mixinMethod,false);
          }
          if (isJunit3) {
            if (hasAnnotation(mixinMethod,Before.class)) {
              beforeMethods.add(mixinMethod);
            }
            if (hasAnnotation(mixinMethod,BeforeClass.class)) {
              beforeMethods.add(beforeClassMethodCount++,mixinMethod);
            }
            if (hasAnnotation(mixinMethod,After.class)) {
              afterMethods.add(mixinMethod);
            }
            if (hasAnnotation(mixinMethod,AfterClass.class)) {
              afterMethods.add(afterClassMethodCount++,mixinMethod);
            }
          }
        }
      }
      mixinClassNode=mixinClassNode.getSuperClass();
    }
    if (isJunit3) {
      addMethodCallsToMethod(classNode,SET_UP_METHOD,beforeMethods);
      addMethodCallsToMethod(classNode,TEAR_DOWN_METHOD,afterMethods);
    }
  }
}
