{
  Object[] args=argsObject instanceof Object[] ? (Object[])argsObject : new Object[]{argsObject};
  MetaClass mc=InvokerHelper.getMetaClass(instance);
  String usednamespace=getNamespace(instance);
  TagLibraryLookup lookup=getTagLibraryLookup();
  if (lookup != null) {
    GroovyObject tagLibrary=lookup.lookupTagLibrary(usednamespace,methodName);
    if (tagLibrary == null) {
      tagLibrary=lookup.lookupTagLibrary(GroovyPage.DEFAULT_NAMESPACE,methodName);
      usednamespace=GroovyPage.DEFAULT_NAMESPACE;
    }
    if (tagLibrary != null && !developmentMode) {
      TagLibraryMetaUtils.registerMethodMissingForTags(mc,lookup,usednamespace,methodName);
    }
    if (tagLibrary != null) {
      List<MetaMethod> respondsTo=tagLibrary.getMetaClass().respondsTo(tagLibrary,methodName,args);
      if (respondsTo.size() > 0) {
        return respondsTo.get(0).invoke(tagLibrary,args);
      }
    }
  }
  throw new MissingMethodException(methodName,instance.getClass(),args);
}
