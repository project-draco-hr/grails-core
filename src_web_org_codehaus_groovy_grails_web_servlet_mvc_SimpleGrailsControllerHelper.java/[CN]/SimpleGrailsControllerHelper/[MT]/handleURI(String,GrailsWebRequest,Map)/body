{
  if (uri == null) {
    throw new IllegalArgumentException("Controller URI [" + uri + "] cannot be null!");
  }
  HttpServletRequest request=webRequest.getCurrentRequest();
  HttpServletResponse response=webRequest.getCurrentResponse();
  configureStateForWebRequest(webRequest,request);
  if (uri.endsWith("/")) {
    uri=uri.substring(0,uri.length() - 1);
  }
  GrailsControllerClass controllerClass=getControllerClassByURI(uri);
  if (controllerClass == null) {
    throw new UnknownControllerException("No controller found for URI [" + uri + "]!");
  }
  actionName=controllerClass.getClosurePropertyName(uri);
  webRequest.setActionName(actionName);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Processing request for controller [" + controllerName + "], action ["+ actionName+ "], and id ["+ id+ "]");
  }
  controllerActionURI=SLASH + controllerName + SLASH+ actionName+ SLASH;
  GroovyObject controller=getControllerInstance(controllerClass);
  if (!controllerClass.isHttpMethodAllowedForAction(controller,request.getMethod(),actionName)) {
    try {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
      return null;
    }
 catch (    IOException e) {
      throw new ControllerExecutionException("I/O error sending 403 error",e);
    }
  }
  request.setAttribute(GrailsApplicationAttributes.CONTROLLER,controller);
  GrailsScaffolder scaffolder=obtainScaffolder(controllerClass);
  if (StringUtils.isBlank(actionName)) {
    if (controllerClass.isScaffolding() && !scaffolder.supportsAction(actionName))     throw new NoClosurePropertyForURIException("Could not find closure property for URI [" + uri + "] for controller ["+ controllerClass.getFullName()+ "]!");
  }
  request.setAttribute(GrailsApplicationAttributes.REQUEST_SCOPE_ID,this.grailsAttributes);
  String viewName=controllerClass.getViewByURI(uri);
  boolean executeAction=invokeBeforeInterceptor(controller,controllerClass);
  if (!executeAction)   return null;
  ModelAndView mv;
  if (controllerClass.isFlowAction(actionName)) {
    mv=executeFlow(webRequest,request,response);
  }
 else {
    mv=executeAction(controller,controllerClass,viewName,request,response,params);
  }
  boolean returnModelAndView=invokeAfterInterceptor(controllerClass,controller,mv) && !response.isCommitted();
  return returnModelAndView ? mv : null;
}
