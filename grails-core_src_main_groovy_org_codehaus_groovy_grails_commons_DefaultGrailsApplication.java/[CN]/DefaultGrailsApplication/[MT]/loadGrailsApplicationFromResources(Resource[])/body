{
  GrailsResourceHolder resourceHolder=new GrailsResourceHolder();
  cl=configureClassLoader();
  GroovyClassLoader gcl=(GroovyClassLoader)cl;
  Collection loadedResources=new ArrayList();
  loadedClasses=new ArrayList<Class<?>>();
  try {
    for (int i=0; resources != null && i < resources.length; i++) {
      if (!loadedResources.contains(resources[i])) {
        try {
          String className=resourceHolder.getClassName(resources[i]);
          log.debug("Loading groovy file from resource loader :[" + resources[i].getFile().getAbsolutePath() + "] with name ["+ className+ "]");
          if (!StringUtils.isBlank(className)) {
            Class<?> c=gcl.loadClass(className,true,false);
            Assert.notNull(c,"Groovy Bug! GCL loadClass method returned a null class!");
            if (!loadedClasses.contains(c)) {
              loadedClasses.add(c);
            }
            log.debug("Added Groovy class [" + c + "] to loaded classes");
            loadedResources=resourceLoader.getLoadedResources();
          }
        }
 catch (        ClassNotFoundException e) {
          log.error("The class [" + e.getMessage() + "] was not found when attempting to load Grails application. Skipping.");
        }
      }
 else {
        Class<?> c=null;
        try {
          log.debug("Loading groovy file from class loader :[" + resources[i].getFile().getAbsolutePath() + "]");
          c=cl.loadClass(resourceHolder.getClassName(resources[i]));
        }
 catch (        ClassNotFoundException e) {
          GrailsUtil.deepSanitize(e);
          log.error("Class not found attempting to load class " + e.getMessage(),e);
        }
        if (c != null) {
          loadedClasses.add(c);
        }
        log.debug("Added Groovy class [" + c + "] to loaded classes");
      }
    }
  }
 catch (  CompilationFailedException e) {
    if (Environment.getCurrent() == Environment.DEVELOPMENT) {
      log.fatal("Compilation error loading Grails application: " + e.getMessage(),e);
      System.exit(1);
    }
 else {
      throw e;
    }
  }
}
