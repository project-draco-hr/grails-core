{
  if (descriptor != null && descriptor.exists()) {
    CompilerConfiguration config=CompilerConfiguration.DEFAULT;
    config.setSourceEncoding("UTF-8");
    GroovyClassLoader classLoader;
    final ClassLoader parentLoader=Thread.currentThread().getContextClassLoader();
    if (Environment.getCurrent().isReloadEnabled()) {
      CompilerConfiguration compilerConfig=CompilerConfiguration.DEFAULT;
      config.setSourceEncoding("UTF-8");
      classLoader=new GrailsClassLoader(parentLoader,compilerConfig,resourceLoader);
    }
 else {
      classLoader=new GroovyClassLoader(parentLoader,config);
    }
    List classes=new ArrayList();
    InputStream inputStream=null;
    try {
      inputStream=descriptor.getInputStream();
      GPathResult root=new XmlSlurper().parse(inputStream);
      GPathResult resources=(GPathResult)root.getProperty("resources");
      GPathResult grailsClasses=(GPathResult)resources.getProperty("resource");
      for (int i=0; i < grailsClasses.size(); i++) {
        GPathResult node=(GPathResult)grailsClasses.getAt(i);
        try {
          classes.add(classLoader.loadClass(node.text()));
        }
 catch (        ClassNotFoundException e) {
          LOG.warn("Class with name [" + node.text() + "] was not found, and hence not loaded. Possible empty class or script definition?");
        }
      }
    }
  finally {
      if (inputStream != null)       inputStream.close();
    }
    Class[] loadedClasses=(Class[])classes.toArray(new Class[classes.size()]);
    this.grailsApplication=new DefaultGrailsApplication(loadedClasses,classLoader);
  }
 else {
    Assert.notNull(resourceLoader,"Property [resourceLoader] must be set!");
    this.grailsApplication=new DefaultGrailsApplication(this.resourceLoader);
  }
  ApplicationHolder.setApplication(this.grailsApplication);
}
