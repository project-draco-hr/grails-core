{
  GroovyClassLoader gcl=new GroovyClassLoader();
  Class dc=gcl.parseClass("class Test { Long id; Long version; }");
  Class sc=gcl.parseClass("class TestService { boolean transactional = true;\n" + "def serviceMethod() {'hello'} }");
  Class c=gcl.parseClass("class TestController { def list = {} }");
  GrailsApplication app=new DefaultGrailsApplication(new Class[]{dc,sc,c},gcl);
  MockApplicationContext parent=new MockApplicationContext();
  parent.registerMockBean(GrailsApplication.APPLICATION_ID,app);
  GrailsRuntimeConfigurator conf=new GrailsRuntimeConfigurator(app,parent);
  DefaultGrailsPluginManager manager=new DefaultGrailsPluginManager(new Class[0],app);
  manager.setParentApplicationContext(parent);
  parent.registerMockBean("manager",manager);
  conf.setPluginManager(manager);
  ApplicationContext ctx=conf.configure(new MockServletContext());
  assertNotNull(ctx);
  assertTrue(ctx.getBean(GrailsRuntimeConfigurator.CLASS_LOADER_BEAN) instanceof GroovyClassLoader);
  assertTrue(ctx.getBean(GrailsRuntimeConfigurator.CLASS_EDITOR_BEAN) instanceof ClassEditor);
  GrailsExceptionResolver er=(GrailsExceptionResolver)ctx.getBean(GrailsRuntimeConfigurator.EXCEPTION_HANDLER_BEAN);
  assertNotNull(er);
  ModelAndView mv=er.resolveException(new MockHttpServletRequest(),new MockHttpServletResponse(),null,new Exception());
  assertEquals("/error",mv.getViewName());
  assertTrue(ctx.getBean(GrailsRuntimeConfigurator.MULTIPART_RESOLVER_BEAN) instanceof CommonsMultipartResolver);
  MessageSource ms=(MessageSource)ctx.getBean(GrailsRuntimeConfigurator.MESSAGE_SOURCE_BEAN);
  assertNotNull(ms);
  Properties hibProps=(Properties)ctx.getBean(GrailsRuntimeConfigurator.HIBERNATE_PROPERTIES_BEAN);
  assertNotNull(hibProps);
  assertEquals("create-drop",hibProps.getProperty("hibernate.hbm2ddl.auto"));
  GrailsDomainClass domainClass=(GrailsDomainClass)ctx.getBean("TestDomainClass");
  assertNotNull(domainClass);
  assertEquals("Test",domainClass.getShortName());
  Class persistentClass=(Class)ctx.getBean("TestPersistentClass");
  assertEquals(dc,persistentClass);
  GrailsDomainClassValidator validator=(GrailsDomainClassValidator)ctx.getBean("TestValidator");
  assertTrue(validator.supports(dc));
  GroovyObject serviceInstance=(GroovyObject)ctx.getBean("testService");
  assertEquals("hello",serviceInstance.invokeMethod("serviceMethod",null));
  HotSwappableTargetSource ts=(HotSwappableTargetSource)ctx.getBean(GrailsUrlHandlerMapping.APPLICATION_CONTEXT_TARGET_SOURCE);
  assertNotNull(ts.getTarget());
  GrailsUrlHandlerMapping mapping=(GrailsUrlHandlerMapping)ts.getTarget();
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setRequestURI("/test/list");
  HandlerExecutionChain h=mapping.getHandler(request);
  assertNotNull(h);
  assertNotNull(h.getHandler());
  assertEquals(SimpleGrailsController.class,h.getHandler().getClass());
  assertEquals(2,h.getInterceptors().length);
  ts=(HotSwappableTargetSource)ctx.getBean("TestControllerTargetSource");
  GrailsControllerClass gcc=(GrailsControllerClass)ts.getTarget();
  assertEquals(c,gcc.getClazz());
  GroovyObject controller=(GroovyObject)ctx.getBean("TestController");
  assertEquals(c,controller.getClass());
}
