{
  final String getConstraintsMethodName="getConstraints";
  MethodNode getConstraintsMethod=classNode.getMethod(getConstraintsMethodName,ZERO_PARAMETERS);
  if (getConstraintsMethod == null || !getConstraintsMethod.getDeclaringClass().equals(classNode)) {
    final BooleanExpression isConstraintsPropertyNull=new BooleanExpression(new BinaryExpression(new VariableExpression(CONSTRAINED_PROPERTIES_PROPERTY_NAME),Token.newSymbol(Types.COMPARE_EQUAL,0,0),new ConstantExpression(null)));
    final String servletContextHolderVariableName="$sch";
    final String applicationContextVariableName="$ctx";
    final String constraintsEvaluatorVariableName="$evaluator";
    final String evaluateMethodName="evaluate";
    final BlockStatement ifConstraintsPropertyIsNullBlockStatement=new BlockStatement();
    final Expression declareServletContextExpression=new DeclarationExpression(new VariableExpression(servletContextHolderVariableName,ClassHelper.OBJECT_TYPE),Token.newSymbol(Types.EQUALS,0,0),new StaticMethodCallExpression(new ClassNode(Holders.class),"getServletContext",new ArgumentListExpression()));
    final Expression declareApplicationContextExpression=new DeclarationExpression(new VariableExpression(applicationContextVariableName,ClassHelper.OBJECT_TYPE),Token.newSymbol(Types.EQUALS,0,0),new StaticMethodCallExpression(new ClassNode(WebApplicationContextUtils.class),"getWebApplicationContext",new ArgumentListExpression(new VariableExpression(servletContextHolderVariableName))));
    final Expression declareConstraintsEvaluatorExpression=new DeclarationExpression(new VariableExpression(constraintsEvaluatorVariableName,ClassHelper.OBJECT_TYPE),Token.newSymbol(Types.EQUALS,0,0),new MethodCallExpression(new VariableExpression(applicationContextVariableName),"getBean",new ArgumentListExpression(new ConstantExpression(ConstraintsEvaluator.BEAN_NAME))));
    final Expression initializeConstraintsFieldExpression=new BinaryExpression(new VariableExpression(CONSTRAINED_PROPERTIES_PROPERTY_NAME),Token.newSymbol(Types.EQUALS,0,0),new MethodCallExpression(new VariableExpression(constraintsEvaluatorVariableName),evaluateMethodName,new ArgumentListExpression(new VariableExpression("this"))));
    final Statement ifConstraintsPropertyIsNullStatement=new IfStatement(isConstraintsPropertyNull,ifConstraintsPropertyIsNullBlockStatement,new ExpressionStatement(new EmptyExpression()));
    ifConstraintsPropertyIsNullBlockStatement.addStatement(new ExpressionStatement(declareServletContextExpression));
    ifConstraintsPropertyIsNullBlockStatement.addStatement(new ExpressionStatement(declareApplicationContextExpression));
    ifConstraintsPropertyIsNullBlockStatement.addStatement(new ExpressionStatement(declareConstraintsEvaluatorExpression));
    ifConstraintsPropertyIsNullBlockStatement.addStatement(new ExpressionStatement(initializeConstraintsFieldExpression));
    final Map<String,ClassNode> propertiesToConstrain=getPropertiesToEnsureConstraintsFor(classNode);
    for (    final Map.Entry<String,ClassNode> entry : propertiesToConstrain.entrySet()) {
      final String propertyName=entry.getKey();
      final ClassNode propertyType=entry.getValue();
      final String cpName="$" + propertyName + "$constrainedProperty";
      final ArgumentListExpression constrainedPropertyConstructorArgumentList=new ArgumentListExpression();
      constrainedPropertyConstructorArgumentList.addExpression(new ClassExpression(classNode));
      constrainedPropertyConstructorArgumentList.addExpression(new ConstantExpression(propertyName));
      constrainedPropertyConstructorArgumentList.addExpression(new ClassExpression(propertyType));
      final ConstructorCallExpression constrainedPropertyCtorCallExpression=new ConstructorCallExpression(new ClassNode(ConstrainedProperty.class),constrainedPropertyConstructorArgumentList);
      final Expression declareConstrainedPropertyExpression=new DeclarationExpression(new VariableExpression(cpName,ClassHelper.OBJECT_TYPE),Token.newSymbol(Types.EQUALS,0,0),constrainedPropertyCtorCallExpression);
      final ArgumentListExpression applyConstraintMethodArgumentList=new ArgumentListExpression();
      applyConstraintMethodArgumentList.addExpression(new ConstantExpression(ConstrainedProperty.NULLABLE_CONSTRAINT));
      applyConstraintMethodArgumentList.addExpression(new ConstantExpression(false));
      final Expression applyNullableConstraintMethodCallExpression=new MethodCallExpression(new VariableExpression(cpName),"applyConstraint",applyConstraintMethodArgumentList);
      final ArgumentListExpression putMethodArgumentList=new ArgumentListExpression();
      putMethodArgumentList.addExpression(new ConstantExpression(propertyName));
      putMethodArgumentList.addExpression(new VariableExpression(cpName));
      final MethodCallExpression addToConstraintsMapExpression=new MethodCallExpression(new VariableExpression(CONSTRAINED_PROPERTIES_PROPERTY_NAME),"put",putMethodArgumentList);
      final BlockStatement addNullableConstraintBlock=new BlockStatement();
      addNullableConstraintBlock.addStatement(new ExpressionStatement(declareConstrainedPropertyExpression));
      addNullableConstraintBlock.addStatement(new ExpressionStatement(applyNullableConstraintMethodCallExpression));
      addNullableConstraintBlock.addStatement(new ExpressionStatement(addToConstraintsMapExpression));
      final Expression constraintsMapContainsKeyExpression=new MethodCallExpression(new VariableExpression(CONSTRAINED_PROPERTIES_PROPERTY_NAME),"containsKey",new ArgumentListExpression(new ConstantExpression(propertyName)));
      final BooleanExpression ifPropertyIsAlreadyConstrainedExpression=new BooleanExpression(constraintsMapContainsKeyExpression);
      final Statement ifPropertyIsAlreadyConstrainedStatement=new IfStatement(ifPropertyIsAlreadyConstrainedExpression,new ExpressionStatement(new EmptyExpression()),addNullableConstraintBlock);
      ifConstraintsPropertyIsNullBlockStatement.addStatement(ifPropertyIsAlreadyConstrainedStatement);
    }
    final BlockStatement methodBlockStatement=new BlockStatement();
    methodBlockStatement.addStatement(ifConstraintsPropertyIsNullStatement);
    final Statement returnStatement=new ReturnStatement(new VariableExpression(CONSTRAINED_PROPERTIES_PROPERTY_NAME));
    methodBlockStatement.addStatement(returnStatement);
    final MethodNode methodNode=new MethodNode(getConstraintsMethodName,Modifier.STATIC | Modifier.PUBLIC,new ClassNode(Map.class),ZERO_PARAMETERS,null,methodBlockStatement);
    if (classNode.redirect() == null) {
      classNode.addMethod(methodNode);
    }
 else {
      classNode.redirect().addMethod(methodNode);
    }
  }
}
