{
  String uri=urlHelper.getPathWithinApplication(request);
  if (!"/".equals(uri) && isGrailsAppWithoutControllersAndRegexMappings()) {
    processFilterChain(request,response,filterChain);
    return;
  }
  if (isUriExcluded(holder,uri)) {
    processFilterChain(request,response,filterChain);
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Executing URL mapping filter...");
    LOG.debug(holder);
  }
  GrailsWebRequest webRequest=(GrailsWebRequest)request.getAttribute(GrailsApplicationAttributes.WEB_REQUEST);
  HttpServletRequest currentRequest=webRequest.getCurrentRequest();
  String version=findRequestedVersion(webRequest);
  UrlMappingInfo[] urlInfos=holder.matchAll(uri,currentRequest.getMethod(),version != null ? version : UrlMapping.ANY_VERSION);
  WrappedResponseHolder.setWrappedResponse(response);
  boolean dispatched=false;
  try {
    for (    UrlMappingInfo info : urlInfos) {
      if (info != null) {
        Object redirectInfo=info.getRedirectInfo();
        if (redirectInfo != null) {
          final Map redirectArgs;
          if (redirectInfo instanceof Map) {
            redirectArgs=(Map)redirectInfo;
          }
 else {
            redirectArgs=CollectionUtils.newMap("uri",redirectInfo);
          }
          GrailsParameterMap params=webRequest.getParams();
          redirectArgs.put("params",params);
          redirectDynamicMethod.invoke(this,"redirect",new Object[]{redirectArgs});
          dispatched=true;
          break;
        }
        webRequest.resetParams();
        try {
          info.configure(webRequest);
          UrlConverter urlConverterToUse=urlConverter;
          GrailsApplication grailsApplicationToUse=application;
          GrailsClass controller=WebUtils.getConfiguredControllerForUrlMappingInfo(webRequest,info,urlConverterToUse,grailsApplicationToUse);
          if (controller == null && info.getViewName() == null && info.getURI() == null)           continue;
        }
 catch (        Exception e) {
          if (e instanceof MultipartException) {
            reapplySitemesh(request);
            throw ((MultipartException)e);
          }
          LOG.error("Error when matching URL mapping [" + info + "]:"+ e.getMessage(),e);
          continue;
        }
        dispatched=true;
        if (!WAR_DEPLOYED) {
          checkDevelopmentReloadingState(request);
        }
        request=checkMultipart(request);
        String nameOfview=info.getViewName();
        if (nameOfview == null || nameOfview.endsWith(GSP_SUFFIX) || nameOfview.endsWith(JSP_SUFFIX)) {
          if (info.isParsingRequest()) {
            webRequest.informParameterCreationListeners();
          }
          String forwardUrl=WebUtils.forwardRequestForUrlMappingInfo(request,response,info);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Matched URI [" + uri + "] to URL mapping ["+ info+ "], forwarding to ["+ forwardUrl+ "] with response ["+ response.getClass()+ "]");
          }
        }
 else {
          if (!renderViewForUrlMappingInfo(request,response,info,nameOfview)) {
            dispatched=false;
          }
        }
        break;
      }
    }
  }
  finally {
    WrappedResponseHolder.setWrappedResponse(null);
  }
  if (!dispatched) {
    Set<HttpMethod> allowedHttpMethods=allowHeaderForWrongHttpMethod ? allowedMethods(holder,uri) : Collections.EMPTY_SET;
    if (allowedHttpMethods.isEmpty()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("No match found, processing remaining filter chain.");
      }
      processFilterChain(request,response,filterChain);
    }
 else {
      response.addHeader(HttpHeaders.ALLOW,DefaultGroovyMethods.join(allowedHttpMethods,","));
      response.sendError(HttpStatus.METHOD_NOT_ALLOWED.value());
    }
  }
}
