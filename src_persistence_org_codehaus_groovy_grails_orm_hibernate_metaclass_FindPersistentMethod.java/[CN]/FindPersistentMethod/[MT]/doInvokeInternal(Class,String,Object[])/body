{
  if (arguments.length == 0)   throw new MissingMethodException(methodName,clazz,arguments);
  final Object arg=arguments[0] instanceof GString ? arguments[0].toString() : arguments[0];
  if (arg instanceof String) {
    final String query=(String)arg;
    final String shortName=GrailsClassUtils.getShortName(clazz);
    if (!query.matches("from [" + clazz.getName() + "|"+ shortName+ "].*")) {
      throw new GrailsQueryException("Invalid query [" + query + "] for domain class ["+ clazz+ "]");
    }
    return super.getHibernateTemplate().execute(new HibernateCallback(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Query q=session.createQuery(query);
        Object[] queryArgs=null;
        Map queryNamedArgs=null;
        if (arguments.length > 1) {
          if (arguments[1] instanceof Collection) {
            queryArgs=GrailsClassUtils.collectionToObjectArray((Collection)arguments[1]);
          }
 else           if (arguments[1].getClass().isArray()) {
            queryArgs=(Object[])arguments[1];
          }
 else           if (arguments[1] instanceof Map) {
            queryNamedArgs=(Map)arguments[1];
          }
        }
        if (queryArgs != null) {
          for (int i=0; i < queryArgs.length; i++) {
            if (queryArgs[0] instanceof GString) {
              q.setParameter(i,queryArgs[i].toString());
            }
 else {
              q.setParameter(i,queryArgs[i]);
            }
          }
        }
        if (queryNamedArgs != null) {
          for (Iterator it=queryNamedArgs.entrySet().iterator(); it.hasNext(); ) {
            Map.Entry entry=(Map.Entry)it.next();
            if (!(entry.getKey() instanceof String))             throw new GrailsQueryException("Named parameter's name must be String: " + queryNamedArgs.toString());
            String stringKey=(String)entry.getKey();
            Object value=entry.getValue();
            if (value instanceof GString) {
              q.setParameter(stringKey,value.toString());
            }
 else             if (List.class.isAssignableFrom(value.getClass())) {
              q.setParameterList(stringKey,(List)value);
            }
 else             if (value.getClass().isArray()) {
              q.setParameterList(stringKey,(Object[])value);
            }
 else {
              q.setParameter(stringKey,value);
            }
          }
        }
        q.setMaxResults(1);
        List results=q.list();
        if (results.size() > 0)         return results.get(0);
        return null;
      }
    }
);
  }
 else   if (clazz.isAssignableFrom(arg.getClass())) {
    return super.getHibernateTemplate().execute(new HibernateCallback(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Example example=Example.create(arg).ignoreCase();
        Criteria crit=session.createCriteria(clazz);
        crit.add(example);
        List results=crit.list();
        if (results.size() > 0)         return results.get(0);
        return null;
      }
    }
);
  }
  throw new MissingMethodException(methodName,clazz,arguments);
}
