{
  JSONWriter writer=json.getWriter();
  try {
    writer.object();
    for (    PropertyDescriptor property : BeanUtils.getPropertyDescriptors(o.getClass())) {
      String name=property.getName();
      Method readMethod=property.getReadMethod();
      if (readMethod != null) {
        Object value=readMethod.invoke(o,(Object[])null);
        writer.key(name);
        json.convertAnother(value);
      }
    }
    for (    Field field : o.getClass().getDeclaredFields()) {
      int modifiers=field.getModifiers();
      if (field.isAccessible() && Modifier.isPublic(modifiers) && !(Modifier.isStatic(modifiers) || Modifier.isTransient(modifiers))) {
        writer.key(field.getName());
        json.convertAnother(field.get(o));
      }
    }
    writer.endObject();
  }
 catch (  ConverterException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw new ConverterException("Error converting Bean with class " + o.getClass().getName(),e);
  }
}
