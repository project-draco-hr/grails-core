{
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  try {
    Object action=retrieveAction(controller,actionName,response);
    Object returnValue=null;
    try {
      returnValue=handleAction(controller,action,request,response,params);
    }
 catch (    Throwable t) {
      GrailsUtil.deepSanitize(t);
      String pluginName=GrailsPluginUtils.getPluginName(controller.getClass());
      pluginName=pluginName != null ? "in plugin [" + pluginName + "]" : "";
      throw new ControllerExecutionException("Executing action [" + actionName + "] of controller ["+ controller.getClass().getName()+ "] "+ pluginName+ " caused exception: "+ t.getMessage(),t);
    }
    initChainModel(controller);
    if (response.isCommitted() || request.getAttribute(GrailsApplicationAttributes.REDIRECT_ISSUED) != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Response has been redirected, returning null model and view");
      }
      return null;
    }
    TokenResponseHandler handler=(TokenResponseHandler)request.getAttribute(TokenResponseHandler.KEY);
    if (handler != null && !handler.wasInvoked() && handler.wasInvalidToken()) {
      String uri=(String)request.getAttribute(SynchronizerTokensHolder.TOKEN_URI);
      if (uri == null) {
        uri=WebUtils.getForwardURI(request);
      }
      try {
        FlashScope flashScope=webRequest.getFlashScope();
        flashScope.put("invalidToken",request.getParameter(SynchronizerTokensHolder.TOKEN_KEY));
        response.sendRedirect(uri);
        return null;
      }
 catch (      IOException e) {
        throw new ControllerExecutionException("I/O error sending redirect to URI: " + uri,e);
      }
    }
 else     if (request.getAttribute(FORWARD_CALLED) == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Action [" + actionName + "] executed with result ["+ returnValue+ "] and view name ["+ viewName+ "]");
      }
      ModelAndView mv=handleActionResponse(controller,returnValue,actionName,viewName);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Action [" + actionName + "] handled, created Spring model and view ["+ mv+ "]");
      }
      return mv;
    }
 else {
      return null;
    }
  }
  finally {
    try {
      Thread.currentThread().setContextClassLoader(cl);
    }
 catch (    AccessControlException e) {
    }
  }
}
