{
  Assert.notNull(pluginClass,"Argument [pluginClass] cannot be null");
  Assert.isTrue(pluginClass.getName().endsWith(TRAILING_NAME),"Argument [pluginClass] with value [" + pluginClass + "] is not a Grails plugin (class name must end with 'GrailsPlugin')");
  this.application=new LegacyGrailsApplication(application);
  this.grailsApplication=application;
  this.pluginClass=pluginClass;
  Resource resource=readPluginConfiguration(pluginClass);
  if (resource != null && resource.exists()) {
    final String filename=resource.getFilename();
    try {
      if (filename.equals(PLUGIN_YML)) {
        YamlPropertySourceLoader propertySourceLoader=new YamlPropertySourceLoader();
        this.propertySource=propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_YML,resource,null,true,DEFAULT_CONFIG_IGNORE_LIST);
      }
 else       if (filename.equals(PLUGIN_GROOVY)) {
        GroovyConfigPropertySourceLoader propertySourceLoader=new GroovyConfigPropertySourceLoader();
        this.propertySource=propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_GROOVY,resource,null,DEFAULT_CONFIG_IGNORE_LIST);
      }
    }
 catch (    IOException e) {
      LOG.warn("Error loading " + filename + " for plugin: "+ pluginClass.getName()+ ": "+ e.getMessage(),e);
    }
  }
}
