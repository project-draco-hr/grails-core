{
  GrailsServiceClass[] serviceClasses=application.getGrailsServiceClasses();
  for (int i=0; i < serviceClasses.length; i++) {
    GrailsServiceClass grailsServiceClass=serviceClasses[i];
    springConfig.addSingletonBean(grailsServiceClass.getFullName() + "Class",MethodInvokingFactoryBean.class).addProperty("targetObject",new RuntimeBeanReference(GrailsApplication.APPLICATION_ID,true)).addProperty("targetMethod","getGrailsServiceClass").addProperty("arguments",grailsServiceClass.getFullName());
    BeanConfiguration serviceInstance=springConfig.createSingletonBean(grailsServiceClass.getFullName() + "Instance").setFactoryBean(grailsServiceClass.getFullName() + "Class").setFactoryMethod("newInstance");
    if (grailsServiceClass.byName()) {
      serviceInstance.setAutowire("byName");
    }
 else     if (grailsServiceClass.byType()) {
      serviceInstance.setAutowire("byType");
    }
    if (grailsServiceClass.isTransactional()) {
      Properties transactionAttributes=new Properties();
      transactionAttributes.put("*","PROPAGATION_REQUIRED");
      springConfig.addSingletonBean(grailsServiceClass.getPropertyName(),TransactionProxyFactoryBean.class).addProperty("target",serviceInstance.getBeanDefinition()).addProperty("proxyTargetClass",Boolean.TRUE).addProperty("transactionAttributes",transactionAttributes).addProperty(TRANSACTION_MANAGER_BEAN,new RuntimeBeanReference(TRANSACTION_MANAGER_BEAN));
    }
 else {
      springConfig.addBeanConfiguration(grailsServiceClass.getPropertyName(),serviceInstance);
    }
  }
}
