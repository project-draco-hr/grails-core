{
  if (!(astNodes[0] instanceof AnnotationNode) || !(astNodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: " + astNodes[0].getClass() + " / "+ astNodes[1].getClass());
  }
  AnnotatedNode parent=(AnnotatedNode)astNodes[1];
  AnnotationNode node=(AnnotationNode)astNodes[0];
  if (!MY_TYPE.equals(node.getClassNode()) || !(parent instanceof ClassNode)) {
    return;
  }
  ClassNode classNode=(ClassNode)parent;
  String cName=classNode.getName();
  if (classNode.isInterface()) {
    error(source,"Error processing interface '" + cName + "'. "+ MY_TYPE_NAME+ " not allowed for interfaces.");
  }
  ListExpression values=getListOfClasses(node);
  if (values == null) {
    error(source,"Error processing class '" + cName + "'. "+ MY_TYPE_NAME+ " annotation expects a class or a list of classes to mock");
    return;
  }
  List<ClassExpression> domainClassNodes=new ArrayList<ClassExpression>();
  for (  Expression expression : values.getExpressions()) {
    if (expression instanceof ClassExpression) {
      ClassExpression classEx=(ClassExpression)expression;
      ClassNode cn=classEx.getType();
      Class mixinClassForArtefactType=getMixinClassForArtefactType(cn);
      if (mixinClassForArtefactType != null) {
        weaveMock(classNode,classEx,false);
      }
 else {
        domainClassNodes.add(classEx);
      }
    }
  }
  if (!domainClassNodes.isEmpty()) {
    weaveMixinClass(classNode,DomainClassUnitTestMixin.class);
    addMockCollaborators(classNode,"Domain",domainClassNodes);
  }
}
