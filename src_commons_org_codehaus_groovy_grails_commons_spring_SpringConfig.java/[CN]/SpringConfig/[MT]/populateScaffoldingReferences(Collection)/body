{
  GrailsControllerClass[] simpleControllers=application.getControllers();
  for (int i=0; i < simpleControllers.length; i++) {
    Class scaffoldedClass=simpleControllers[i].getScaffoldedClass();
    GrailsDomainClass domainClass;
    if (scaffoldedClass == null) {
      domainClass=application.getGrailsDomainClass(simpleControllers[i].getName());
    }
 else {
      domainClass=application.getGrailsDomainClass(scaffoldedClass.getName());
    }
    if (domainClass == null) {
      LOG.info("[Spring] Scaffolding disabled for controller [" + simpleControllers[i].getFullName() + "], no equivalent domain class named ["+ simpleControllers[i].getName()+ "]");
    }
 else {
      Bean scaffolder=SpringConfigUtils.createSingletonBean(DefaultGrailsScaffolder.class);
      Collection constructorArguments=new ArrayList();
      constructorArguments.add(SpringConfigUtils.createBeanReference(domainClass.getFullName() + "PersistentClass"));
      constructorArguments.add(SpringConfigUtils.createLiteralValue(domainClass.getIdentifier().getName()));
      constructorArguments.add(SpringConfigUtils.createBeanReference("sessionFactory"));
      Bean domain=SpringConfigUtils.createSingletonBean(DefaultScaffoldDomain.class,constructorArguments);
      domain.setProperty("validator",SpringConfigUtils.createBeanReference(domainClass.getFullName() + "Validator"));
      beanReferences.add(SpringConfigUtils.createBeanReference(domainClass.getFullName() + "ScaffoldDomain",domain));
      Bean requestHandler=SpringConfigUtils.createSingletonBean(DefaultScaffoldRequestHandler.class);
      requestHandler.setProperty("scaffoldDomain",SpringConfigUtils.createBeanReference(domainClass.getFullName() + "ScaffoldDomain"));
      constructorArguments=new ArrayList();
      constructorArguments.add(SpringConfigUtils.createBeanReference("grailsApplication"));
      Bean defaultResponseHandler=SpringConfigUtils.createSingletonBean(ViewDelegatingScaffoldResponseHandler.class);
      Bean defaultViewResolver=SpringConfigUtils.createSingletonBean(DefaultGrailsScaffoldViewResolver.class,constructorArguments);
      defaultResponseHandler.setProperty("scaffoldViewResolver",defaultViewResolver);
      constructorArguments=new ArrayList();
      constructorArguments.add(SpringConfigUtils.createBeanReference("grailsApplication"));
      constructorArguments.add(defaultResponseHandler);
      Bean responseHandlerFactory=SpringConfigUtils.createSingletonBean(DefaultGrailsResponseHandlerFactory.class,constructorArguments);
      scaffolder.setProperty("scaffoldResponseHandlerFactory",responseHandlerFactory);
      scaffolder.setProperty("scaffoldRequestHandler",requestHandler);
      beanReferences.add(SpringConfigUtils.createBeanReference(simpleControllers[i].getFullName() + "Scaffolder",scaffolder));
    }
  }
}
