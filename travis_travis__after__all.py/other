import os
import json
import time
import logging
try:
    import urllib.request as urllib2
except ImportError:
    import urllib2
log = logging.getLogger('travis.leader')
log.addHandler(logging.StreamHandler())
log.setLevel(logging.INFO)
TRAVIS_JOB_NUMBER = 'TRAVIS_JOB_NUMBER'
TRAVIS_BUILD_ID = 'TRAVIS_BUILD_ID'
POLLING_INTERVAL = 'LEADER_POLLING_INTERVAL'
build_id = os.getenv(TRAVIS_BUILD_ID)
polling_interval = int(os.getenv(POLLING_INTERVAL, '5'))
is_leader = (lambda job_number: job_number.endswith('.1'))
if (not os.getenv(TRAVIS_JOB_NUMBER)):
    log.fatal("Don't use defining leader for build without matrix")
    exit(1)
elif is_leader(os.getenv(TRAVIS_JOB_NUMBER)):
    log.info('This is a leader')
else:
    with open('.to_export_back', 'w') as export_var:
        export_var.write('BUILD_MINION=YES')
    log.info('This is a minion')
    exit(0)
try:
    wait_others_to_finish()
    final_snapshot = matrix_snapshot()
    log.info('Final Results: {0}'.format([(e.number, e.is_succeeded) for e in final_snapshot]))
    BUILD_AGGREGATE_STATUS = 'BUILD_AGGREGATE_STATUS'
    others_snapshot = [el for el in final_snapshot if (not el.is_leader)]
    if reduce((lambda a, b: (a and b)), [e.is_succeeded for e in others_snapshot]):
        os.environ[BUILD_AGGREGATE_STATUS] = 'others_succeeded'
    elif reduce((lambda a, b: (a and b)), [(not e.is_succeeded) for e in others_snapshot]):
        log.error('Others Failed')
        os.environ[BUILD_AGGREGATE_STATUS] = 'others_failed'
    else:
        log.warn('Others Unknown')
        os.environ[BUILD_AGGREGATE_STATUS] = 'unknown'
    with open('.to_export_back', 'w') as export_var:
        export_var.write('BUILD_LEADER=YES {0}={1}'.format(BUILD_AGGREGATE_STATUS, os.environ[BUILD_AGGREGATE_STATUS]))
except Exception as e:
    log.fatal(e)
