{
  Collection beanReferences=new ArrayList();
  Map urlMappings=new HashMap();
  Assert.notNull(application);
  GrailsPageFlowClass[] pageFlows=application.getPageFlows();
  for (int i=0; i < pageFlows.length; i++) {
    GrailsPageFlowClass pageFlow=pageFlows[i];
    if (!pageFlow.getAvailable()) {
      continue;
    }
    Bean pageFlowClass=SpringConfigUtils.createSingletonBean(MethodInvokingFactoryBean.class);
    pageFlowClass.setProperty("targetObject",SpringConfigUtils.createBeanReference("grailsApplication"));
    pageFlowClass.setProperty("targetMethod",SpringConfigUtils.createLiteralValue("getPageFlow"));
    pageFlowClass.setProperty("arguments",SpringConfigUtils.createLiteralValue(pageFlow.getFullName()));
    beanReferences.add(SpringConfigUtils.createBeanReference(pageFlow.getFullName() + "Class",pageFlowClass));
    Bean pageFlowInstance=SpringConfigUtils.createSingletonBean();
    pageFlowInstance.setFactoryBean(SpringConfigUtils.createBeanReference(pageFlow.getFullName() + "Class"));
    pageFlowInstance.setFactoryMethod("newInstance");
    if (pageFlow.byType()) {
      pageFlowInstance.setAutowire("byType");
    }
 else     if (pageFlow.byName()) {
      pageFlowInstance.setAutowire("byName");
    }
    beanReferences.add(SpringConfigUtils.createBeanReference(pageFlow.getFullName(),pageFlowInstance));
    Bean flowBuilder=SpringConfigUtils.createSingletonBean(GrailsFlowBuilder.class);
    flowBuilder.setProperty("pageFlowClass",SpringConfigUtils.createBeanReference(pageFlow.getFullName() + "Class"));
    Bean flowFactoryBean=SpringConfigUtils.createSingletonBean(FlowFactoryBean.class);
    flowFactoryBean.setProperty("flowBuilder",flowBuilder);
    beanReferences.add(SpringConfigUtils.createBeanReference(pageFlow.getFlowId(),flowFactoryBean));
    if (pageFlow.getAccessible()) {
      Bean flowExecutionManager=SpringConfigUtils.createSingletonBean(GrailsServletFlowExecutionManager.class);
      flowExecutionManager.setProperty("flow",SpringConfigUtils.createBeanReference(pageFlow.getFlowId()));
      Bean flowController=SpringConfigUtils.createSingletonBean(FlowController.class);
      flowController.setProperty("flowExecutionManager",flowExecutionManager);
      beanReferences.add(SpringConfigUtils.createBeanReference(pageFlow.getFullName() + "Controller",flowController));
      urlMappings.put(pageFlow.getUri(),pageFlow.getFullName() + "Controller");
    }
  }
  Bean simpleGrailsController=SpringConfigUtils.createSingletonBean(SimpleGrailsController.class);
  simpleGrailsController.setAutowire("byType");
  beanReferences.add(SpringConfigUtils.createBeanReference("simpleGrailsController",simpleGrailsController));
  Bean internalResourceViewResolver=SpringConfigUtils.createSingletonBean(InternalResourceViewResolver.class);
  internalResourceViewResolver.setProperty("prefix",SpringConfigUtils.createLiteralValue("/WEB-INF/jsp/"));
  internalResourceViewResolver.setProperty("suffix",SpringConfigUtils.createLiteralValue(".jsp"));
  beanReferences.add(SpringConfigUtils.createBeanReference("jspViewResolver",internalResourceViewResolver));
  Bean simpleUrlHandlerMapping=null;
  if (application.getControllers().length > 0 || application.getPageFlows().length > 0) {
    simpleUrlHandlerMapping=SpringConfigUtils.createSingletonBean(SimpleUrlHandlerMapping.class);
    beanReferences.add(SpringConfigUtils.createBeanReference("handlerMapping",simpleUrlHandlerMapping));
  }
  GrailsControllerClass[] simpleControllers=application.getControllers();
  for (int i=0; i < simpleControllers.length; i++) {
    GrailsControllerClass simpleController=simpleControllers[i];
    if (!simpleController.getAvailable()) {
      continue;
    }
    Bean controllerClass=SpringConfigUtils.createSingletonBean(MethodInvokingFactoryBean.class);
    controllerClass.setProperty("targetObject",SpringConfigUtils.createBeanReference("grailsApplication"));
    controllerClass.setProperty("targetMethod",SpringConfigUtils.createLiteralValue("getController"));
    controllerClass.setProperty("arguments",SpringConfigUtils.createLiteralValue(simpleController.getFullName()));
    beanReferences.add(SpringConfigUtils.createBeanReference(simpleController.getFullName() + "Class",controllerClass));
    Bean controller=SpringConfigUtils.createSingletonBean();
    controller.setFactoryBean(SpringConfigUtils.createBeanReference(simpleController.getFullName() + "Class"));
    controller.setFactoryMethod("newInstance");
    if (simpleController.byType()) {
      controller.setAutowire("byType");
    }
 else     if (simpleController.byName()) {
      controller.setAutowire("byName");
    }
    beanReferences.add(SpringConfigUtils.createBeanReference(simpleController.getFullName(),controller));
    for (int x=0; x < simpleController.getURIs().length; x++) {
      urlMappings.put(simpleController.getURIs()[x],"simpleGrailsController");
    }
  }
  if (simpleUrlHandlerMapping != null) {
    simpleUrlHandlerMapping.setProperty("mappings",SpringConfigUtils.createProperties(urlMappings));
  }
  return beanReferences;
}
