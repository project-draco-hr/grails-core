{
  for (int i=0; i < pluginDescriptors.length; i++) {
    Resource pluginDescriptor=pluginDescriptors[i];
    InputStream inputStream=null;
    try {
      inputStream=pluginDescriptor.getInputStream();
      SAXReader reader=new SAXReader();
      Document doc=reader.read(inputStream);
      Element pluginElement=doc.getRootElement();
      String pluginName=pluginElement.attribute("name").getText();
      String pluginVersion=pluginElement.attribute("version").getText();
      if (StringUtils.isBlank(pluginName))       throw new GrailsConfigurationException("Plug-in descriptor [" + pluginDescriptor + "] doesn't specify a plug-in name. It must be corrupted, try re-install the plug-in");
      if (StringUtils.isBlank(pluginVersion))       throw new GrailsConfigurationException("Plug-in descriptor [" + pluginDescriptor + "] with name ["+ pluginName+ "] doesn't specify a plug-in version. It must be corrupted, try re-install the plug-in");
      XPath xpath=DocumentHelper.createXPath("/plugin/resources/resource");
      List nodes=xpath.selectNodes(doc);
      List pluginResources=new ArrayList();
      for (int j=0; j < nodes.size(); j++) {
        Element node=(Element)nodes.get(j);
        pluginResources.add(node.getText());
      }
      PluginMeta pluginMeta=new PluginMeta(pluginName,pluginVersion);
      pluginMeta.pluginResources=(String[])pluginResources.toArray(new String[pluginResources.size()]);
      pluginInfo.put(pluginName,pluginMeta);
      for (int j=0; j < pluginMeta.pluginResources.length; j++) {
        String pluginResource=pluginMeta.pluginResources[j];
        resourceToPluginMap.put(pluginResource,pluginMeta);
      }
    }
 catch (    Exception e) {
      throw new GrailsConfigurationException("Error loading plug-in descriptor [" + pluginDescriptor + "]:"+ e.getMessage(),e);
    }
 finally {
      if (inputStream != null) {
        try {
          inputStream.close();
        }
 catch (        IOException ioe) {
          LOG.debug("Error closing plugin.xml stream.",ioe);
        }
      }
    }
  }
}
