{
  String bookClassSource="package org.grails.validation\n" + "class Book {\n" + "   Long id\n"+ "   Long version\n"+ "   String title\n"+ "   String description\n"+ "   Author author\n"+ "   Author assistent\n"+ "   Set chapters\n"+ "   Map remarks\n"+ "   static hasMany = [chapters:Chapter]\n"+ "   static constraints = {\n"+ "      description(nullable: true)\n"+ "      assistent(nullable: true)\n"+ "   }\n"+ "}\n"+ "class Author {\n"+ "   Long id\n"+ "   Long version\n"+ "   String name\n"+ "}\n"+ "class Chapter {\n"+ "   Long id\n"+ "   Long version\n"+ "   String text\n"+ "}";
  GroovyClassLoader gcl=new GroovyClassLoader();
  DefaultGrailsDomainClass bookClass=new DefaultGrailsDomainClass(gcl.parseClass(bookClassSource,"Book"));
  Map constraints=bookClass.getConstrainedProperties();
  Constrained p=(Constrained)constraints.get("title");
  assertFalse("Title property should be required",p.isNullable());
  p=(Constrained)constraints.get("description");
  assertTrue("Description property should be optional",p.isNullable());
  p=(Constrained)constraints.get("author");
  assertFalse("Author property should be required",p.isNullable());
  p=(Constrained)constraints.get("assistent");
  assertTrue("Assistent property should be optional",p.isNullable());
  p=(Constrained)constraints.get("chapters");
  assertTrue("Chapters property should be optional",p.isNullable());
  p=(Constrained)constraints.get("remarks");
  assertTrue("Remarks property should be optional",p.isNullable());
}
