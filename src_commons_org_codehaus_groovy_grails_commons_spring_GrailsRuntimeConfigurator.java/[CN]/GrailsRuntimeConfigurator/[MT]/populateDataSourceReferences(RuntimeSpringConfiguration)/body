{
  BeanConfiguration localSessionFactoryBean=springConfig.addSingletonBean(SESSION_FACTORY_BEAN,ConfigurableLocalSessionFactoryBean.class);
  GrailsDataSource ds=application.getGrailsDataSource();
  if (ds != null && !parent.containsBean(DATA_SOURCE_BEAN)) {
    LOG.info("[RuntimeConfiguration] Configuring for environment: " + ds.getName());
    BeanConfiguration dataSource;
    if (ds.isPooled()) {
      dataSource=springConfig.addSingletonBean(DATA_SOURCE_BEAN,BasicDataSource.class).setDestroyMethod("close");
    }
 else {
      dataSource=springConfig.addSingletonBean(DATA_SOURCE_BEAN,DriverManagerDataSource.class);
    }
    dataSource.addProperty("driverClassName",ds.getDriverClassName()).addProperty("url",ds.getUrl()).addProperty("username",ds.getUsername()).addProperty("password",ds.getPassword());
    if (ds.getConfigurationClass() != null) {
      LOG.info("[RuntimeConfiguration] Using custom Hibernate configuration class [" + ds.getConfigurationClass() + "]");
      localSessionFactoryBean.addProperty("configClass",ds.getConfigurationClass());
    }
  }
 else   if (!parent.containsBean(DATA_SOURCE_BEAN)) {
    LOG.info("[RuntimeConfiguration] No data source found, using in-memory HSQLDB");
    springConfig.addSingletonBean(DATA_SOURCE_BEAN,BasicDataSource.class).setDestroyMethod("close").addProperty("driverClassName","org.hsqldb.jdbcDriver").addProperty("url","jdbc:hsqldb:mem:grailsDB").addProperty("username","sa").addProperty("password","");
  }
  Properties vendorNameDialectMappings=new Properties();
  URL hibernateDialects=this.application.getClassLoader().getResource("hibernate-dialects.properties");
  if (hibernateDialects != null) {
    Properties p=new Properties();
    try {
      p.load(hibernateDialects.openStream());
      Iterator iter=p.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry e=(Map.Entry)iter.next();
        vendorNameDialectMappings.put(e.getValue(),"org.hibernate.dialect." + e.getKey());
      }
    }
 catch (    IOException e) {
      LOG.info("[RuntimeConfiguration] Error loading hibernate-dialects.properties file: " + e.getMessage());
    }
  }
  ManagedMap hibernatePropertiesMap=new ManagedMap();
  if (ds != null && ds.isLoggingSql()) {
    hibernatePropertiesMap.put("hibernate.show_sql","true");
    hibernatePropertiesMap.put("hibernate.format_sql","true");
  }
  if (ds != null && ds.getDialect() != null) {
    hibernatePropertiesMap.put("hibernate.dialect",ds.getDialect().getName());
  }
 else {
    springConfig.addSingletonBean(DIALECT_DETECTOR_BEAN,HibernateDialectDetectorFactoryBean.class).addProperty(DATA_SOURCE_BEAN,new RuntimeBeanReference(DATA_SOURCE_BEAN,parentDataSource)).addProperty("vendorNameDialectMappings",vendorNameDialectMappings);
    hibernatePropertiesMap.put("hibernate.dialect",new RuntimeBeanReference(DIALECT_DETECTOR_BEAN));
  }
  if (ds == null) {
    hibernatePropertiesMap.put("hibernate.hbm2ddl.auto","create-drop");
  }
 else {
    if (ds.getDbCreate() != null) {
      hibernatePropertiesMap.put("hibernate.hbm2ddl.auto",ds.getDbCreate());
    }
  }
  localSessionFactoryBean.addProperty(DATA_SOURCE_BEAN,new RuntimeBeanReference(DATA_SOURCE_BEAN,parentDataSource));
  if (loadExternalPersistenceConfig) {
    URL hibernateConfig=application.getClassLoader().getResource("hibernate.cfg.xml");
    if (hibernateConfig != null) {
      localSessionFactoryBean.addProperty("configLocation","classpath:hibernate.cfg.xml");
    }
  }
  springConfig.addSingletonBean(HIBERNATE_PROPERTIES_BEAN,MapToPropertiesFactoryBean.class).addProperty("map",hibernatePropertiesMap);
  localSessionFactoryBean.addProperty(HIBERNATE_PROPERTIES_BEAN,new RuntimeBeanReference(HIBERNATE_PROPERTIES_BEAN)).addProperty(GrailsApplication.APPLICATION_ID,new RuntimeBeanReference(GrailsApplication.APPLICATION_ID,true)).addProperty("classLoader",new RuntimeBeanReference(CLASS_LOADER_BEAN));
  springConfig.addSingletonBean(TRANSACTION_MANAGER_BEAN,HibernateTransactionManager.class).addProperty(SESSION_FACTORY_BEAN,new RuntimeBeanReference(SESSION_FACTORY_BEAN));
}
