{
  if (node instanceof Proxy) {
    if (!uniqueResult) {
      if (scroll) {
        resultProxy.setAdaptee(this.criteria.scroll());
      }
 else       if (count) {
        this.criteria.setProjection(Projections.rowCount());
        resultProxy.setAdaptee(this.criteria.uniqueResult());
      }
 else {
        resultProxy.setAdaptee(this.criteria.list());
      }
    }
 else {
      resultProxy.setAdaptee(this.criteria.uniqueResult());
    }
    this.criteria=null;
    if (!this.participate) {
      this.session.close();
    }
  }
 else   if (node.equals(AND) || node.equals(OR)) {
    if (this.logicalExpressionArgs.size() < 2)     throwRuntimeException(new IllegalArgumentException("Logical expression [" + node + "] must contain at least 2 expressions"));
    Junction j;
    if (node.equals(OR)) {
      j=Restrictions.disjunction();
    }
 else {
      j=Restrictions.conjunction();
    }
    for (Iterator i=logicalExpressionArgs.iterator(); i.hasNext(); ) {
      Criterion criterion=(Criterion)i.next();
      j.add(criterion);
    }
    if (parent instanceof Proxy) {
      addToCriteria(j);
    }
 else     if (parent.equals(AND) || parent.equals(OR)) {
      this.logicalExpressionArgs.add(j);
      this.logicalExpressions.remove(this.logicalExpressions.size() - 1);
    }
  }
 else   if (node.equals(NOT)) {
    if (this.logicalExpressionArgs.size() < 1)     throwRuntimeException(new IllegalArgumentException("Logical expression [" + node + "] must contain at least 1 expression"));
    Criterion c=(Criterion)this.logicalExpressionArgs.remove(this.logicalExpressionArgs.size() - 1);
    if (parent instanceof Proxy) {
      addToCriteria(Restrictions.not(c));
    }
 else     if (parent.equals(AND) || parent.equals(OR) || parent.equals(NOT)) {
      this.logicalExpressionArgs.add(Restrictions.not(c));
      this.logicalExpressions.remove(this.logicalExpressions.size() - 1);
    }
  }
 else   if (node.equals(PROJECTIONS)) {
    if (this.projectionList != null && this.projectionList.getLength() > 0) {
      this.criteria.setProjection(this.projectionList);
    }
  }
 else   if (targetBean.isReadableProperty(node.toString()) && criteriaStack.size() > 0) {
    criteriaStack.remove(criteriaStack.size() - 1);
  }
  super.nodeCompleted(parent,node);
}
