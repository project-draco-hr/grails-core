{
  if (!(astNodes[0] instanceof AnnotationNode) || !(astNodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");
  }
  AnnotatedNode parent=(AnnotatedNode)astNodes[1];
  AnnotationNode node=(AnnotationNode)astNodes[0];
  if (!MY_TYPE.equals(node.getClassNode()) || !(parent instanceof ClassNode)) {
    return;
  }
  ClassNode classNode=(ClassNode)parent;
  if (classNode.isInterface() || Modifier.isAbstract(classNode.getModifiers())) {
    return;
  }
  boolean junit3Test=isJunit3Test(classNode);
  boolean spockTest=isSpockTest(classNode);
  boolean isJunit=!junit3Test && !spockTest;
  if (!junit3Test && !spockTest && !isJunit)   return;
  Expression value=node.getMember("value");
  ClassExpression ce;
  if (value instanceof ClassExpression) {
    ce=(ClassExpression)value;
    testFor(classNode,ce);
  }
 else {
    if (!junit3Test) {
      List<AnnotationNode> annotations=classNode.getAnnotations(MY_TYPE);
      if (annotations.size() > 0)       return;
      String fileName=source.getName();
      String className=GrailsResourceUtils.getClassName(new org.codehaus.groovy.grails.io.support.FileSystemResource(fileName));
      if (className != null) {
        String targetClassName=null;
        if (className.endsWith("Tests")) {
          targetClassName=className.substring(0,className.indexOf("Tests"));
        }
 else         if (className.endsWith("Test")) {
          targetClassName=className.substring(0,className.indexOf("Test"));
        }
 else         if (className.endsWith("Spec")) {
          targetClassName=className.substring(0,className.indexOf("Spec"));
        }
        if (targetClassName != null) {
          Resource targetResource=getResourceLocator().findResourceForClassName(targetClassName);
          if (targetResource != null) {
            try {
              if (GrailsResourceUtils.isDomainClass(targetResource.getURL())) {
                testFor(classNode,new ClassExpression(new ClassNode(targetClassName,0,ClassHelper.OBJECT_TYPE)));
              }
 else {
                for (                String artefactType : artefactTypeToTestMap.keySet()) {
                  if (targetClassName.endsWith(artefactType)) {
                    testFor(classNode,new ClassExpression(new ClassNode(targetClassName,0,ClassHelper.OBJECT_TYPE)));
                    break;
                  }
                }
              }
            }
 catch (            IOException e) {
            }
          }
        }
      }
    }
  }
}
