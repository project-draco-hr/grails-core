{
  ClassNode implementationNode=GrailsASTUtils.replaceGenericsPlaceholders(ClassHelper.make(instanceImplementation),genericsPlaceholders);
  String apiInstanceProperty=INSTANCE_PREFIX + instanceImplementation.getSimpleName();
  Expression apiInstance=new VariableExpression(apiInstanceProperty,implementationNode);
  if (requiresStaticLookupMethod()) {
    final String lookupMethodName=CURRENT_PREFIX + instanceImplementation.getSimpleName();
    createStaticLookupMethod(classNode,implementationNode,apiInstanceProperty,lookupMethodName);
    apiInstance=new MethodCallExpression(new ClassExpression(classNode),lookupMethodName,ZERO_ARGS);
  }
 else   if (requiresAutowiring()) {
    final ConstructorCallExpression constructorCallExpression=GrailsASTUtils.hasZeroArgsConstructor(implementationNode) ? new ConstructorCallExpression(implementationNode,ZERO_ARGS) : null;
    PropertyNode propertyNode=new PropertyNode(apiInstanceProperty,Modifier.PUBLIC,implementationNode,classNode,constructorCallExpression,null,null);
    propertyNode.addAnnotation(AUTO_WIRED_ANNOTATION);
    if (getMarkerAnnotation() != null) {
      propertyNode.addAnnotation(getMarkerAnnotation());
    }
    classNode.addProperty(propertyNode);
  }
 else {
    final ConstructorCallExpression constructorCallExpression=new ConstructorCallExpression(implementationNode,ZERO_ARGS);
    FieldNode fieldNode=classNode.getField(apiInstanceProperty);
    if (fieldNode == null || (Modifier.isPrivate(fieldNode.getModifiers()) && !fieldNode.getDeclaringClass().equals(classNode))) {
      fieldNode=new FieldNode(apiInstanceProperty,PRIVATE_STATIC_MODIFIER,implementationNode,classNode,constructorCallExpression);
      classNode.addField(fieldNode);
    }
  }
  while (!implementationNode.equals(AbstractGrailsArtefactTransformer.OBJECT_CLASS)) {
    List<MethodNode> declaredMethods=implementationNode.getMethods();
    for (    MethodNode declaredMethod : declaredMethods) {
      if (GrailsASTUtils.isConstructorMethod(declaredMethod)) {
        GrailsASTUtils.addDelegateConstructor(classNode,declaredMethod,genericsPlaceholders);
      }
 else       if (isCandidateInstanceMethod(classNode,declaredMethod)) {
        addDelegateInstanceMethod(classNode,apiInstance,declaredMethod,getMarkerAnnotation(),genericsPlaceholders);
      }
    }
    implementationNode=implementationNode.getSuperClass();
  }
  performInjectionInternal(apiInstanceProperty,source,classNode);
}
