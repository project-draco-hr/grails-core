{
  final ClassNode paramTypeClassNode=param.getType();
  final String paramName=param.getName();
  final Expression defaultValueExpression;
  if (param.hasInitialExpression()) {
    defaultValueExpression=param.getInitialExpression();
  }
 else   if (Boolean.TYPE == paramTypeClassNode.getTypeClass()) {
    defaultValueExpression=new ConstantExpression(false);
  }
 else {
    defaultValueExpression=new ConstantExpression(0);
  }
  final Expression paramsTypeConversionMethodArguments=new ArgumentListExpression(new ConstantExpression(paramName),defaultValueExpression);
  final Expression retrieveConvertedValueExpression=new MethodCallExpression(PARAMS_EXPRESSION,paramTypeClassNode.getTypeClass().getName(),paramsTypeConversionMethodArguments);
  final Expression paramsContainsKeyMethodArguments=new ArgumentListExpression(new ConstantExpression(paramName));
  final BooleanExpression containsKeyExpression=new BooleanExpression(new MethodCallExpression(PARAMS_EXPRESSION,"containsKey",paramsContainsKeyMethodArguments));
  final Statement declareVariableStatement=new ExpressionStatement(new DeclarationExpression(new VariableExpression(paramName,paramTypeClassNode),Token.newSymbol(Types.EQUALS,0,0),new EmptyExpression()));
  wrapper.addStatement(declareVariableStatement);
  final Expression assignmentExpression=new BinaryExpression(new VariableExpression(paramName),Token.newSymbol(Types.EQUALS,0,0),new TernaryExpression(containsKeyExpression,retrieveConvertedValueExpression,defaultValueExpression));
  wrapper.addStatement(new ExpressionStatement(assignmentExpression));
}
