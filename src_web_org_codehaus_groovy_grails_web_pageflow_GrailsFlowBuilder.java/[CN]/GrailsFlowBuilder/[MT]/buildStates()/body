{
  GroovyObject pageFlow=(GroovyObject)this.applicationContext.getBean(pageFlowClass.getFullName());
  Assert.notNull(pageFlow);
  Flow flow=(Flow)pageFlow.getProperty(FLOW);
  Assert.notNull(flow);
  String firstState=null;
  for (Iterator iter=flow.getStates().iterator(); iter.hasNext(); ) {
    State state=(State)iter.next();
    if (firstState == null) {
      firstState=state.getId();
    }
    if (state.isActionState()) {
      AnnotatedAction action=null;
      if (state.getAction() != null) {
        action=new AnnotatedAction(state.getAction());
      }
 else       if (state.getActionClass() != null) {
        Action tmpAction=null;
        if (Action.class.isAssignableFrom(state.getActionClass())) {
          tmpAction=(Action)BeanUtils.instantiateClass(state.getActionClass());
        }
 else {
          throw new UnsupportedOperationException("None " + Action.class.getName() + " action classes are not yet supported!");
        }
        if (state.getActionProperties() != null) {
          new BeanWrapperImpl(tmpAction).setPropertyValues(state.getActionProperties());
        }
        action=new AnnotatedAction(tmpAction);
      }
 else       if (state.getActionClosure() != null) {
        action=new AnnotatedAction(new ClosureAction(this.pageFlowClass.getFlowId(),state.getId(),state.getActionClosure()));
      }
 else       if (state.getActionFormDetails() != null) {
        GrailsFormAction formAction=new GrailsFormAction();
        BeanWrapper beanWrapper=new BeanWrapperImpl(formAction);
        for (Iterator iter2=state.getActionFormDetails().entrySet().iterator(); iter2.hasNext(); ) {
          Map.Entry entry=(Map.Entry)iter2.next();
          if (VALIDATOR.equals(entry.getKey()) && entry.getValue() instanceof Closure) {
            beanWrapper.setPropertyValue((String)entry.getKey(),new ClosureValidator(((Closure)entry.getValue())));
          }
 else {
            beanWrapper.setPropertyValue((String)entry.getKey(),entry.getValue());
          }
        }
        formAction.afterPropertiesSet();
        action=new AnnotatedAction(formAction);
        if (state.getActionMethod() != null) {
          action.setProperty(METHOD,state.getActionMethod());
        }
 else {
          action.setProperty(METHOD,BIND_AND_VALIDATE);
        }
      }
 else {
        throw new UnsupportedOperationException();
      }
      addActionState(state.getId(),action,getTransitions(state.getTransitions()));
    }
 else     if (state.isViewState()) {
      if (state.getViewName() != null) {
        addViewState(state.getId(),new ModelViewDescriptorCreator(state.getViewName(),state.getViewModel()),getTransitions(state.getTransitions()),new HashMap());
      }
 else       if (state.getViewClosure() != null) {
        throw new UnsupportedOperationException("View closures are not yet supported!");
      }
    }
 else     if (state.isDecisionState()) {
      throw new UnsupportedOperationException("Decision states are not yet supported!");
    }
 else     if (state.isSubflowState()) {
      if (state.getSubFlowInput() != null || state.getSubFlowOutput() != null) {
        addSubFlowState(state.getId(),getFlowServiceLocator().getFlow(state.getSubFlowId()),new ClosureFlowAttributeMapper(this.pageFlowClass.getFlowId(),state.getId(),state.getSubFlowInput(),state.getSubFlowOutput()),getTransitions(state.getTransitions()));
      }
 else       if (state.getAttributeMapper() != null) {
        addSubFlowState(state.getId(),getFlowServiceLocator().getFlow(state.getSubFlowId()),state.getAttributeMapper(),getTransitions(state.getTransitions()));
      }
 else       if (state.getAttributeMapperClass() != null) {
        FlowAttributeMapper flowAttributeMapper=(FlowAttributeMapper)BeanUtils.instantiateClass(state.getAttributeMapperClass());
        if (state.getAttributeMapperProperties() != null) {
          new BeanWrapperImpl(flowAttributeMapper).setPropertyValues(state.getAttributeMapperProperties());
        }
        addSubFlowState(state.getId(),getFlowServiceLocator().getFlow(state.getSubFlowId()),flowAttributeMapper,getTransitions(state.getTransitions()));
      }
 else {
        addSubFlowState(state.getId(),getFlowServiceLocator().getFlow(state.getSubFlowId()),getTransitions(state.getTransitions()));
      }
    }
 else     if (state.isEndState()) {
      if (state.getViewName() != null) {
        addEndState(state.getId(),new ModelViewDescriptorCreator(state.getViewName(),state.getViewModel()),new HashMap());
      }
 else {
        addEndState(state.getId());
      }
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  if (firstState != null) {
    getFlow().setStartState(firstState);
  }
}
