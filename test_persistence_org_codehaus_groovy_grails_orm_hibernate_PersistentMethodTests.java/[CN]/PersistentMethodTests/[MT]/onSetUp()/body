{
  cl.parseClass("dataSource {\n" + "\t\t\tdbCreate = \"create-drop\" // one of 'create', 'create-drop','update'\n" + "\t\t\turl = \"jdbc:hsqldb:mem:devDB\" \n"+ "\tpooled = false\n"+ "\tdriverClassName = \"org.hsqldb.jdbcDriver\"\n"+ "\tusername = \"sa\"\n"+ "\tpassword = \"\"\n"+ "}","DataSource");
  Class groovyClass=cl.parseClass("public class PersistentMethodTests {\n" + "\t Long id \n" + "\t Long version \n"+ "\t\n"+ "\t String firstName \n"+ "\t String lastName \n"+ "\t Integer age\n"+ "\t boolean active = true\n"+ "\t\n"+ "\tstatic constraints = {\n"+ "\t\tfirstName(size:4..15)\n"+ "\t\tlastName(nullable:false)\n"+ "\t\tage(nullable:true)\n"+ "\t}\n"+ "}");
  Class descendentClass=cl.parseClass("public class PersistentMethodTestsDescendent extends PersistentMethodTests {\n" + "   String gender\n" + "   static constraints = {\n"+ "       gender(blank:false)\n"+ "   }\n"+ "}");
  ExpandoMetaClass.enableGlobally();
  grailsApplication=new DefaultGrailsApplication(new Class[]{groovyClass,descendentClass},cl);
  MockApplicationContext parent=new MockApplicationContext();
  parent.registerMockBean(GrailsApplication.APPLICATION_ID,grailsApplication);
  parent.registerMockBean("messageSource",new StaticMessageSource());
  GrailsRuntimeConfigurator configurator=new GrailsRuntimeConfigurator(grailsApplication,parent);
  ApplicationContext appCtx=configurator.configure(new MockServletContext());
  this.sessionFactory=(SessionFactory)appCtx.getBean("sessionFactory");
  if (!TransactionSynchronizationManager.hasResource(this.sessionFactory)) {
    this.hibSession=this.sessionFactory.openSession();
    TransactionSynchronizationManager.bindResource(this.sessionFactory,new SessionHolder(hibSession));
  }
  super.onSetUp();
}
