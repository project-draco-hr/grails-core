{
  Properties urlMappings=new Properties();
  springConfig.addSingletonBean(SimpleGrailsController.APPLICATION_CONTEXT_ID,SimpleGrailsController.class).setAutowire("byType");
  springConfig.addSingletonBean("jspViewResolver",GrailsViewResolver.class).addProperty("viewClass",org.springframework.web.servlet.view.JstlView.class).addProperty("prefix",GrailsApplicationAttributes.PATH_TO_VIEWS).addProperty("suffix",".jsp");
  BeanConfiguration simpleUrlHandlerMapping=null;
  if (application.getControllers().length > 0 || application.getPageFlows().length > 0) {
    simpleUrlHandlerMapping=springConfig.addSingletonBean("grailsUrlHandlerMapping",GrailsUrlHandlerMapping.class);
    springConfig.addSingletonBean(GrailsUrlHandlerMapping.APPLICATION_CONTEXT_ID,ProxyFactoryBean.class).addProperty("targetSource",new RuntimeBeanReference(GrailsUrlHandlerMapping.APPLICATION_CONTEXT_TARGET_SOURCE)).addProperty("proxyInterfaces","org.springframework.web.servlet.HandlerMapping");
    Collection args=new ManagedList();
    args.add(new RuntimeBeanReference("grailsUrlHandlerMapping"));
    springConfig.addSingletonBean(GrailsUrlHandlerMapping.APPLICATION_CONTEXT_TARGET_SOURCE,HotSwappableTargetSource.class,args);
    springConfig.addSingletonBean(OPEN_SESSION_IN_VIEW_INTERCEPTOR_BEAN,OpenSessionInViewInterceptor.class).addProperty("flushMode",new Integer(HibernateAccessor.FLUSH_AUTO)).addProperty(SESSION_FACTORY_BEAN,new RuntimeBeanReference(SESSION_FACTORY_BEAN));
    Collection interceptors=new ManagedList();
    interceptors.add(new RuntimeBeanReference(OPEN_SESSION_IN_VIEW_INTERCEPTOR_BEAN));
    simpleUrlHandlerMapping.addProperty("interceptors",interceptors);
  }
  GrailsControllerClass[] simpleControllers=application.getControllers();
  for (int i=0; i < simpleControllers.length; i++) {
    GrailsControllerClass simpleController=simpleControllers[i];
    if (!simpleController.getAvailable()) {
      continue;
    }
    springConfig.addSingletonBean(simpleController.getFullName() + "Class",MethodInvokingFactoryBean.class).addProperty("targetObject",new RuntimeBeanReference("grailsApplication",true)).addProperty("targetMethod","getController").addProperty("arguments",simpleController.getFullName());
    Collection args=new ManagedList();
    args.add(new RuntimeBeanReference(simpleController.getFullName() + "Class"));
    springConfig.addSingletonBean(simpleController.getFullName() + "TargetSource",HotSwappableTargetSource.class,args);
    springConfig.addSingletonBean(simpleController.getFullName() + "Proxy",ProxyFactoryBean.class).addProperty("targetSource",new RuntimeBeanReference(simpleController.getFullName() + "TargetSource")).addProperty("proxyInterfaces","org.codehaus.groovy.grails.commons.GrailsControllerClass");
    springConfig.addPrototypeBean(simpleController.getFullName()).setFactoryBean(simpleController.getFullName() + "Proxy").setFactoryMethod("newInstance").setAutowire("byName");
    for (int x=0; x < simpleController.getURIs().length; x++) {
      if (!urlMappings.containsKey(simpleController.getURIs()[x]))       urlMappings.put(simpleController.getURIs()[x],SimpleGrailsController.APPLICATION_CONTEXT_ID);
    }
  }
  if (simpleUrlHandlerMapping != null) {
    simpleUrlHandlerMapping.addProperty("mappings",urlMappings);
  }
  GrailsTagLibClass[] tagLibs=application.getGrailsTabLibClasses();
  for (int i=0; i < tagLibs.length; i++) {
    GrailsTagLibClass grailsTagLib=tagLibs[i];
    springConfig.addSingletonBean(grailsTagLib.getFullName() + "Class",MethodInvokingFactoryBean.class).addProperty("targetObject",new RuntimeBeanReference(GrailsApplication.APPLICATION_ID,true)).addProperty("targetMethod","getGrailsTagLibClass").addProperty("arguments",grailsTagLib.getFullName());
    Collection args=new ManagedList();
    args.add(new RuntimeBeanReference(grailsTagLib.getFullName() + "Class"));
    springConfig.addSingletonBean(grailsTagLib.getFullName() + "TargetSource",HotSwappableTargetSource.class,args);
    springConfig.addSingletonBean(grailsTagLib.getFullName() + "Proxy",ProxyFactoryBean.class).addProperty("targetSource",new RuntimeBeanReference(grailsTagLib.getFullName() + "TargetSource")).addProperty("proxyInterfaces","org.codehaus.groovy.grails.commons.GrailsTagLibClass");
    springConfig.addPrototypeBean(grailsTagLib.getFullName()).setFactoryBean(grailsTagLib.getFullName() + "Proxy").setFactoryMethod("newInstance").setAutowire("byName");
  }
}
