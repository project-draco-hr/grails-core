{
  BindingResult bindingResult=null;
  boolean useSpringBinder=false;
  GrailsApplication grailsApplication=null;
  if (domain != null) {
    grailsApplication=domain.getGrailsApplication();
  }
  if (grailsApplication == null) {
    grailsApplication=GrailsWebRequest.lookupApplication();
  }
  if (grailsApplication != null) {
    if (Boolean.TRUE.equals(grailsApplication.getFlatConfig().get("grails.databinding.useSpringBinder"))) {
      useSpringBinder=true;
    }
  }
  if (!useSpringBinder) {
    final DataBindingSource bindingSource=createDataBindingSource(grailsApplication,object.getClass(),source);
    final DataBinder gormAwareDataBinder=getGormAwareDataBinder(grailsApplication);
    final BindingResult tmpBindingResult=new BeanPropertyBindingResult(object,object.getClass().getName());
    final DataBindingListener listener=new GormAwareDataBindingListener(tmpBindingResult);
    gormAwareDataBinder.bind(object,bindingSource,filter,include,exclude,listener);
    bindingResult=tmpBindingResult;
  }
 else {
    if (source instanceof GrailsParameterMap) {
      GrailsParameterMap parameterMap=(GrailsParameterMap)source;
      HttpServletRequest request=parameterMap.getRequest();
      GrailsDataBinder dataBinder=createDataBinder(object,include,exclude,request);
      dataBinder.bind(parameterMap,filter);
      bindingResult=dataBinder.getBindingResult();
    }
 else     if (source instanceof HttpServletRequest) {
      HttpServletRequest request=(HttpServletRequest)source;
      GrailsDataBinder dataBinder=createDataBinder(object,include,exclude,request);
      performBindFromRequest(dataBinder,request,filter);
      bindingResult=dataBinder.getBindingResult();
    }
 else     if (source instanceof Map) {
      Map propertyMap=convertPotentialGStrings((Map)source);
      GrailsDataBinder binder=createDataBinder(object,include,exclude,null);
      performBindFromPropertyValues(binder,new MutablePropertyValues(propertyMap),filter);
      bindingResult=binder.getBindingResult();
    }
 else {
      GrailsWebRequest webRequest=(GrailsWebRequest)RequestContextHolder.getRequestAttributes();
      if (webRequest != null) {
        GrailsDataBinder binder=createDataBinder(object,include,exclude,webRequest.getCurrentRequest());
        HttpServletRequest request=webRequest.getCurrentRequest();
        performBindFromRequest(binder,request,filter);
      }
    }
  }
  if (domain != null && bindingResult != null) {
    BindingResult newResult=new ValidationErrors(object);
    for (    Object error : bindingResult.getAllErrors()) {
      if (error instanceof FieldError) {
        FieldError fieldError=(FieldError)error;
        final boolean isBlank=BLANK.equals(fieldError.getRejectedValue());
        if (!isBlank) {
          newResult.addError(fieldError);
        }
 else         if (domain.hasPersistentProperty(fieldError.getField())) {
          final boolean isOptional=domain.getPropertyByName(fieldError.getField()).isOptional();
          if (!isOptional) {
            newResult.addError(fieldError);
          }
        }
 else {
          newResult.addError(fieldError);
        }
      }
 else {
        newResult.addError((ObjectError)error);
      }
    }
    bindingResult=newResult;
  }
  MetaClass mc=GroovySystem.getMetaClassRegistry().getMetaClass(object.getClass());
  if (mc.hasProperty(object,"errors") != null && bindingResult != null) {
    ValidationErrors errors=new ValidationErrors(object);
    errors.addAllErrors(bindingResult);
    mc.setProperty(object,"errors",errors);
  }
  return bindingResult;
}
