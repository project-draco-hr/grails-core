{
  if (pattern1 == null && pattern2 == null) {
    return 0;
  }
 else   if (pattern1 == null) {
    return 1;
  }
 else   if (pattern2 == null) {
    return -1;
  }
  boolean pattern1EqualsPath=pattern1.equals(path);
  boolean pattern2EqualsPath=pattern2.equals(path);
  if (pattern1EqualsPath && pattern2EqualsPath) {
    return 0;
  }
 else   if (pattern1EqualsPath) {
    return -1;
  }
 else   if (pattern2EqualsPath) {
    return 1;
  }
  int wildCardCount1=getWildCardCount(pattern1);
  int wildCardCount2=getWildCardCount(pattern2);
  int bracketCount1=countOccurrencesOf(pattern1,"{");
  int bracketCount2=countOccurrencesOf(pattern2,"{");
  int totalCount1=wildCardCount1 + bracketCount1;
  int totalCount2=wildCardCount2 + bracketCount2;
  if (totalCount1 != totalCount2) {
    return totalCount1 - totalCount2;
  }
  int pattern1Length=getPatternLength(pattern1);
  int pattern2Length=getPatternLength(pattern2);
  if (pattern1Length != pattern2Length) {
    return pattern2Length - pattern1Length;
  }
  if (wildCardCount1 < wildCardCount2) {
    return -1;
  }
 else   if (wildCardCount2 < wildCardCount1) {
    return 1;
  }
  if (bracketCount1 < bracketCount2) {
    return -1;
  }
 else   if (bracketCount2 < bracketCount1) {
    return 1;
  }
  return 0;
}
