{
  GrailsApplicationAttributes attrs=new DefaultGrailsApplicationAttributes(getServletContext());
  context=(GrailsWebApplicationContext)attrs.getApplicationContext();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Executing Grails reload filter...");
  }
  if (context == null) {
    filterChain.doFilter(httpServletRequest,httpServletResponse);
    return;
  }
  application=(GrailsApplication)context.getBean(GrailsApplication.APPLICATION_ID);
  if (application == null) {
    filterChain.doFilter(httpServletRequest,httpServletResponse);
    return;
  }
  if (config == null) {
    this.parent=(WebApplicationContext)getServletContext().getAttribute(GrailsApplicationAttributes.PARENT_APPLICATION_CONTEXT);
    config=new GrailsRuntimeConfigurator(application,parent);
  }
  String uri=urlHelper.getPathWithinApplication(httpServletRequest);
  String lastPart=uri.substring(uri.lastIndexOf("/"));
  if (lastPart.indexOf('.') > -1) {
    filterChain.doFilter(httpServletRequest,httpServletResponse);
    return;
  }
  if (copyScript == null) {
    GroovyClassLoader gcl=new GroovyClassLoader(getClass().getClassLoader());
    Class groovyClass;
    try {
      groovyClass=gcl.parseClass(gcl.getResource("org/codehaus/groovy/grails/web/servlet/filter/GrailsResourceCopier.groovy").openStream());
      copyScript=(ResourceCopier)groovyClass.newInstance();
    }
 catch (    IllegalAccessException e) {
      LOG.error("Illegal access creating resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    InstantiationException e) {
      LOG.error("Error instantiating resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    CompilationFailedException e) {
      LOG.error("Error compiling resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    Exception e) {
      LOG.error("Error loading resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Running copy script...");
  }
  if (copyScript != null) {
    copyScript.copyResourceBundles();
  }
  if (manager == null) {
    manager=PluginManagerHolder.getPluginManager();
  }
  try {
    if (manager != null) {
      if (LOG.isDebugEnabled())       LOG.debug("Checking Plugin manager for changes..");
      manager.checkForChanges();
      if (!application.isInitialised()) {
        application.rebuild();
        config=new GrailsRuntimeConfigurator(application,parent);
        config.reconfigure(context,getServletContext(),true);
      }
    }
 else     if (LOG.isDebugEnabled()) {
      LOG.debug("Plugin manager not found, skipping change check");
    }
  }
 catch (  Exception e) {
    LOG.error("Error occured reloading application: " + e.getMessage(),e);
    httpServletResponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    GroovyPagesTemplateEngine engine=attrs.getPagesTemplateEngine();
    Template t=engine.createTemplate(GrailsApplicationAttributes.PATH_TO_VIEWS + "/error.gsp");
    GrailsWrappedRuntimeException wrapped=new GrailsWrappedRuntimeException(getServletContext(),e);
    Map model=new HashMap();
    model.put("exception",wrapped);
    Writable w=t.make(model);
    Writer out=createResponseWriter(httpServletResponse);
    w.writeTo(out);
    return;
  }
  filterChain.doFilter(httpServletRequest,httpServletResponse);
}
