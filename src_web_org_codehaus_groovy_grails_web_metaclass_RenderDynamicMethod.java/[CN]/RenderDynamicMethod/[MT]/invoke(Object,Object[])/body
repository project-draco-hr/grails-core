{
  if (arguments.length == 0)   throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  if (arguments[0] instanceof String) {
    try {
      response.getWriter().write((String)arguments[0]);
    }
 catch (    IOException e) {
      throw new ControllerExecutionException(e.getMessage(),e);
    }
  }
 else   if (arguments[0] instanceof Map) {
    Map argMap=(Map)arguments[0];
    PrintWriter out=null;
    try {
      if (argMap.containsKey(ARGUMENT_CONTENT_TYPE) && argMap.containsKey(ARGUMENT_ENCODING)) {
        out=response.getWriter((String)argMap.get(ARGUMENT_CONTENT_TYPE),(String)argMap.get(ARGUMENT_ENCODING));
      }
 else       if (argMap.containsKey(ARGUMENT_CONTENT_TYPE)) {
        out=response.getWriter((String)argMap.get(ARGUMENT_CONTENT_TYPE));
      }
 else {
        out=response.getWriter();
      }
    }
 catch (    IOException ioe) {
      throw new ControllerExecutionException("I/O creating write in method [render] on class [" + target.getClass() + "]: "+ ioe.getMessage(),ioe);
    }
    if (argMap.containsKey(ARGUMENT_TEXT)) {
      String text=(String)argMap.get(ARGUMENT_TEXT);
      out.write(text);
    }
 else     if (argMap.containsKey(ARGUMENT_VIEW)) {
      String viewName=(String)argMap.get(ARGUMENT_VIEW);
      GrailsControllerClass controllerClass=helper.getControllerClassByName(target.getClass().getName());
      String viewUri=controllerClass.getViewByName(viewName);
      Map model;
      Object modelObject=argMap.get(ARGUMENT_MODEL);
      if (modelObject instanceof Map) {
        model=(Map)modelObject;
      }
 else {
        model=new BeanMap(target);
      }
      GroovyObject controller=(GroovyObject)target;
      controller.setProperty(ControllerDynamicMethods.MODEL_AND_VIEW_PROPERTY,new ModelAndView(viewUri,model));
    }
 else {
      throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
    }
  }
 else   if (arguments[0] instanceof Closure) {
    try {
      MarkupBuilder mkp=new MarkupBuilder(response.getWriter());
      mkp.invokeMethod("doCall",new Object[]{arguments[0]});
    }
 catch (    IOException ioe) {
      throw new ControllerExecutionException("I/O error rendering text markup from closure to response: " + ioe.getMessage(),ioe);
    }
  }
 else {
    throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  }
  return null;
}
