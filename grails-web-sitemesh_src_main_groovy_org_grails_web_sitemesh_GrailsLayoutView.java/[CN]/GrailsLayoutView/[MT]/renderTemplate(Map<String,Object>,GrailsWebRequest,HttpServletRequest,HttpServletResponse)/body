{
  Content content=obtainContent(model,webRequest,request,response);
  if (content != null) {
    beforeDecorating(content,model,webRequest,request,response);
switch (request.getDispatcherType()) {
case INCLUDE:
      break;
case ASYNC:
case ERROR:
case FORWARD:
case REQUEST:
    if (LOG.isDebugEnabled()) {
      LOG.debug("Finding layout for request and content");
    }
  SpringMVCViewDecorator decorator=(SpringMVCViewDecorator)groovyPageLayoutFinder.findLayout(request,content);
if (decorator != null) {
  if (LOG.isDebugEnabled()) {
    LOG.debug("Found layout. Rendering content for layout and model {}",decorator.getPage(),model);
  }
  decorator.render(content,model,request,response,webRequest.getServletContext());
  return;
}
break;
}
PrintWriter writer=response.getWriter();
if (LOG.isDebugEnabled()) {
LOG.debug("Layout not applicable to response, writing original content");
}
content.writeOriginal(writer);
if (!response.isCommitted()) {
writer.flush();
}
}
}
