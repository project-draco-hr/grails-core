{
  if (LOG.isDebugEnabled())   LOG.debug("parse: page");
  if (finalPass) {
    out.println();
    out.print("class ");
    out.print(className);
    out.println(" extends GroovyPage {");
    out.println("public Object run() {");
  }
 else {
    for (int i=0; i < DEFAULT_IMPORTS.length; i++) {
      out.print("import ");
      out.println(DEFAULT_IMPORTS[i]);
    }
  }
  loop:   for (; ; ) {
    if (doNextScan)     state=scan.nextToken();
 else     doNextScan=true;
switch (state) {
case EOF:
      break loop;
case HTML:
    html();
  break;
case JEXPR:
expr();
break;
case JSCRIPT:
script(false);
break;
case JDIRECT:
direct();
break;
case JDECLAR:
declare(false);
break;
case GEXPR:
expr();
break;
case GSCRIPT:
script(true);
break;
case GDIRECT:
direct();
break;
case GDECLAR:
declare(true);
break;
case GSTART_TAG:
startTag();
break;
case GEND_TAG:
endTag();
break;
}
}
if (finalPass) {
if (!tagMetaStack.isEmpty()) {
throw new GrailsTagException("Grails tags were not closed! [" + tagMetaStack + "]");
}
out.println("}");
for (Iterator i=constants.keySet().iterator(); i.hasNext(); ) {
String name=(String)i.next();
out.println("static final " + name + " = "+ constants.get(name));
}
out.println("}");
}
}
