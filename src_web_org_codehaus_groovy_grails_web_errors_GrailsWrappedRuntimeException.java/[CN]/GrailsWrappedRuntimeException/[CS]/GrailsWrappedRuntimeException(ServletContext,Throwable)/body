{
  super(t.getMessage(),t);
  this.cause=t;
  StringWriter sw=new StringWriter();
  PrintWriter pw=new PrintWriter(sw);
  cause.printStackTrace(pw);
  this.stackTrace=sw.toString();
  while (t.getCause() != cause) {
    if (t.getCause() == null) {
      cause=t;
      break;
    }
    cause=t.getCause();
  }
  String[] lines=this.stackTrace.split("\\n");
  StringBuffer buffy=new StringBuffer();
  for (int i=0; i < lines.length; i++) {
    String line=lines[i];
    if (PARSE_DETAILS_STEP1.matcher(line).find()) {
      buffy.append(line);
      continue;
    }
    if (PARSE_DETAILS_STEP2.matcher(line).find()) {
      buffy.append(line);
      continue;
    }
    if (PARSE_DETAILS_STEP3.matcher(line).find()) {
      buffy.append(line);
      continue;
    }
    if (PARSE_GSP_DETAILS_STEP1.matcher(line).find()) {
      buffy.append(line);
      continue;
    }
  }
  this.filteredStackTrace=buffy.toString();
  if (StringUtils.isBlank(filteredStackTrace)) {
  }
  if (cause instanceof MultipleCompilationErrorsException) {
    MultipleCompilationErrorsException mcee=(MultipleCompilationErrorsException)cause;
    Object message=mcee.getErrorCollector().getErrors().iterator().next();
    if (message instanceof SyntaxErrorMessage) {
      SyntaxErrorMessage sem=(SyntaxErrorMessage)message;
      this.lineNumber=sem.getCause().getLine();
      sem.write(pw);
      String messageText=sw.toString();
      if (messageText.indexOf(':') > -1) {
        this.className=sw.toString().substring(0,messageText.indexOf(':'));
        this.className=this.className.trim();
      }
    }
  }
 else {
    Matcher m1=PARSE_DETAILS_STEP1.matcher(stackTrace);
    Matcher m2=PARSE_DETAILS_STEP2.matcher(stackTrace);
    Matcher gsp=PARSE_GSP_DETAILS_STEP1.matcher(stackTrace);
    try {
      if (gsp.find()) {
        this.className=gsp.group(2);
        this.lineNumber=Integer.parseInt(gsp.group(3));
        this.gspFile=URL_PREFIX + "views/" + gsp.group(1)+ '/'+ this.className;
      }
 else {
        if (m1.find()) {
          this.className=m1.group(1);
          this.lineNumber=Integer.parseInt(m1.group(2));
        }
 else         if (m2.find()) {
          this.className=m2.group(1);
          this.lineNumber=Integer.parseInt(m2.group(2));
        }
      }
    }
 catch (    NumberFormatException nfex) {
    }
  }
  LineNumberReader reader=null;
  try {
    if (getLineNumber() > -1) {
      String url;
      String fileName=this.className.replace('.','/') + ".groovy";
      String urlPrefix="";
      if (gspFile == null) {
        GrailsApplication application=ApplicationHolder.getApplication();
        if (application.isArtefactOfType(ControllerArtefactHandler.TYPE,className)) {
          urlPrefix+="/controllers/";
        }
 else         if (application.isArtefactOfType(TagLibArtefactHandler.TYPE,className)) {
          urlPrefix+="/taglib/";
        }
 else         if (application.isArtefactOfType(ServiceArtefactHandler.TYPE,className)) {
          urlPrefix+="/services/";
        }
        url=URL_PREFIX + urlPrefix + fileName;
      }
 else {
        url=gspFile;
        GrailsApplicationAttributes attrs=new DefaultGrailsApplicationAttributes(servletContext);
        GroovyPagesTemplateEngine engine=attrs.getPagesTemplateEngine();
        int[] lineNumbers=engine.calculateLineNumbersForPage(servletContext,url);
        if (this.lineNumber < lineNumbers.length) {
          this.lineNumber=lineNumbers[this.lineNumber - 1];
        }
      }
      InputStream in=null;
      if (!StringUtils.isBlank(url)) {
        in=servletContext.getResourceAsStream(url);
        LOG.debug("Attempting to display code snippet found in url " + url);
        if (in == null) {
          try {
            Resource r=resolver.getResource("grails-app" + urlPrefix + fileName);
            in=r.getInputStream();
          }
 catch (          Throwable e) {
          }
        }
      }
      if (in != null) {
        reader=new LineNumberReader(new InputStreamReader(in));
        String currentLine=reader.readLine();
        StringBuffer buf=new StringBuffer();
        while (currentLine != null) {
          int currentLineNumber=reader.getLineNumber();
          if (currentLineNumber == this.lineNumber) {
            buf.append(currentLineNumber).append(": ").append(currentLine).append("\n");
          }
 else           if (currentLineNumber == this.lineNumber + 1) {
            buf.append(currentLineNumber).append(": ").append(currentLine);
            break;
          }
          currentLine=reader.readLine();
        }
        this.codeSnippet=buf.toString().split("\n");
      }
    }
  }
 catch (  IOException e) {
    LOG.warn("[GrailsWrappedRuntimeException] I/O error reading line diagnostics: " + e.getMessage(),e);
  }
 finally {
    if (reader != null)     try {
      reader.close();
    }
 catch (    IOException e) {
    }
  }
}
