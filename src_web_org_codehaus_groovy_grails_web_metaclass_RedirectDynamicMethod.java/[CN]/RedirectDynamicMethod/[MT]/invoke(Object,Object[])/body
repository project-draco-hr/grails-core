{
  if (arguments.length == 0)   throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
  Object actionRef;
  Map params=null;
  Errors errors=null;
  GroovyObject controller=(GroovyObject)target;
  if (arguments[0] instanceof Map) {
    Map argMap=(Map)arguments[0];
    actionRef=argMap.get(ARGUMENT_ACTION);
    params=(Map)argMap.get(ARGUMENT_PARAMS);
    errors=(Errors)argMap.get(ARGUMENT_ERRORS);
  }
 else {
    actionRef=arguments[0];
    if (arguments.length > 1) {
      if (arguments[1] instanceof Map) {
        params=(Map)arguments[1];
      }
 else       if (arguments[1] instanceof Errors) {
        errors=(Errors)arguments[1];
      }
    }
    if (arguments.length > 2) {
      if (arguments[2] instanceof Map) {
        params=(Map)arguments[2];
      }
 else       if (arguments[2] instanceof Errors) {
        errors=(Errors)arguments[2];
      }
    }
  }
  Errors controllerErrors=(Errors)controller.getProperty(ControllerDynamicMethods.ERRORS_PROPERTY);
  if (controllerErrors != null) {
    controllerErrors.addAllErrors(errors);
  }
 else {
    controller.setProperty(ControllerDynamicMethods.ERRORS_PROPERTY,errors);
  }
  if (actionRef instanceof String) {
    String uri=(String)actionRef;
    if (params != null) {
      return helper.handleURI(uri,this.request,this.response,params);
    }
 else {
      return helper.handleURI(uri,this.request,this.response);
    }
  }
 else   if (actionRef instanceof Closure) {
    Closure c=(Closure)actionRef;
    PropertyDescriptor prop=GrailsClassUtils.getPropertyDescriptorForValue(target,c);
    String closureName=null;
    if (prop != null) {
      closureName=prop.getName();
    }
 else {
      GrailsScaffolder scaffolder=helper.getScaffolderForController(target.getClass().getName());
      if (scaffolder != null) {
        closureName=scaffolder.getActionName(c);
      }
    }
    GrailsControllerClass controllerClass=helper.getControllerClassByName(target.getClass().getName());
    String viewName=controllerClass.getViewByName(closureName);
    Object returnValue=helper.handleAction(controller,c,request,response,params);
    return helper.handleActionResponse(controller,returnValue,closureName,viewName);
  }
  throw new MissingMethodException(METHOD_SIGNATURE,target.getClass(),arguments);
}
