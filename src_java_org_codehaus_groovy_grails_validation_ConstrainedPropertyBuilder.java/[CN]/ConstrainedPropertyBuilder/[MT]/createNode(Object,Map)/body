{
  try {
    String property=(String)name;
    ConstrainedProperty cp;
    if (constrainedProperties.containsKey(property)) {
      cp=constrainedProperties.get(property);
    }
 else {
      PropertyDescriptor pd=this.bean.getPropertyDescriptor(property);
      cp=new ConstrainedProperty(this.target.getClass(),property,pd.getPropertyType());
      cp.setOrder(order++);
      constrainedProperties.put(property,cp);
    }
    for (    Object o : attributes.keySet()) {
      String constraintName=(String)o;
      if (cp.supportsContraint(constraintName)) {
        cp.applyConstraint(constraintName,attributes.get(constraintName));
      }
 else {
        if (ConstrainedProperty.hasRegisteredConstraint(constraintName)) {
          GrailsUtil.warn("Property [" + cp.getPropertyName() + "] of domain class "+ this.target.getClass().getName()+ " has type ["+ cp.getPropertyType().getName()+ "] and doesn't support constraint ["+ constraintName+ "]. This constraint will not be checked during validation.");
        }
 else {
          cp.addMetaConstraint(constraintName,attributes.get(constraintName));
        }
      }
    }
    return cp;
  }
 catch (  InvalidPropertyException ipe) {
    throw new MissingMethodException((String)name,target.getClass(),new Object[]{attributes});
  }
}
