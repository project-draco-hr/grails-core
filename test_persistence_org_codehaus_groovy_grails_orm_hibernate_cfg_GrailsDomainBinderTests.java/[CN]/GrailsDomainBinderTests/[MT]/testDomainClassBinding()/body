{
  GroovyClassLoader cl=new GroovyClassLoader();
  GrailsDomainClass domainClass=new DefaultGrailsDomainClass(cl.parseClass("public class BinderTestClass {\n" + "    Long id; \n" + "    Long version; \n"+ "\n"+ "    String firstName; \n"+ "    String lastName; \n"+ "    String comment; \n"+ "    Integer age;\n"+ "    boolean active = true"+ "\n"+ "    static constraints = {\n"+ "        firstName(nullable:true,size:4..15)\n"+ "        lastName(nullable:false)\n"+ "        age(nullable:true)\n"+ "    }\n"+ "}"));
  GrailsApplication grailsApplication=new DefaultGrailsApplication(new Class[]{domainClass.getClazz()},cl);
  DefaultGrailsDomainConfiguration config=new DefaultGrailsDomainConfiguration();
  config.setGrailsApplication(grailsApplication);
  config.buildMappings();
  PersistentClass persistentClass=config.getClassMapping("BinderTestClass");
  assertTrue("Property [firstName] must be optional in db mapping",persistentClass.getProperty("firstName").isOptional());
  assertFalse("Property [lastName] must be required in db mapping",persistentClass.getProperty("lastName").isOptional());
  assertFalse("Property [comment] must be required in db mapping",persistentClass.getProperty("comment").isOptional());
  assertTrue("Property [firstName] must be optional",domainClass.getPropertyByName("firstName").isOptional());
  assertFalse("Property [lastName] must be optional",domainClass.getPropertyByName("lastName").isOptional());
  assertFalse("Property [comment] must be required",domainClass.getPropertyByName("comment").isOptional());
  assertTrue("Property [age] must be optional",domainClass.getPropertyByName("age").isOptional());
}
