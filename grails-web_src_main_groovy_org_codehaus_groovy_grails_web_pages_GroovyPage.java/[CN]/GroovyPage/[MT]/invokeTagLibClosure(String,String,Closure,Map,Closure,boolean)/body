{
  Closure tag=(Closure)tagLibClosure.clone();
  if (!(attrs instanceof GroovyPageAttributes)) {
    attrs=new GroovyPageAttributes(attrs);
  }
  ((GroovyPageAttributes)attrs).setGspTagSyntaxCall(true);
  boolean encodeAsPushedToStack=false;
  try {
    Object codecInfo=null;
    if (attrs.containsKey("encodeAs")) {
      codecInfo=attrs.get("encodeAs");
    }
 else     if (DEFAULT_NAMESPACE.equals(tagNamespace) && "applyCodec".equals(tagName)) {
      codecInfo=attrs;
    }
    if (codecInfo != null) {
      outputStack.push(WithCodecHelper.createOutputStackAttributesBuilder(codecInfo,webRequest.getAttributes().getGrailsApplication()).build());
      encodeAsPushedToStack=true;
    }
    Object tagresult=null;
switch (tag.getParameterTypes().length) {
case 1:
      tagresult=tag.call(new Object[]{attrs});
    outputTagResult(returnsObject,tagresult);
  if (body != null && body != EMPTY_BODY_CLOSURE) {
    body.call();
  }
break;
case 2:
tagresult=tag.call(new Object[]{attrs,(body != null) ? body : EMPTY_BODY_CLOSURE});
outputTagResult(returnsObject,tagresult);
break;
}
}
  finally {
if (encodeAsPushedToStack) outputStack.pop();
}
}
