{
  GroovyClassLoader gcl=new GroovyClassLoader();
  Class groovyClass=gcl.parseClass("class TestClass {\n" + "def testMethod() {\n" + "}\n"+ "}");
  DynamicMethods methods=new AbstractDynamicMethods(groovyClass){
  }
;
  methods.addDynamicMethodInvocation(new AbstractDynamicMethodInvocation(Pattern.compile("^testDynamic$")){
    public Object invoke(    Object target,    String methodName,    Object[] arguments){
      return "success";
    }
  }
);
  methods.addDynamicProperty(new AbstractDynamicProperty("testProp"){
    private Object internal;
    public Object get(    Object object){
      return internal;
    }
    public void set(    Object object,    Object newValue){
      internal=newValue;
    }
  }
);
  this.groovyObject=(GroovyObject)groovyClass.newInstance();
}
