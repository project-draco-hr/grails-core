{
  if (encoding == null)   encoding="utf-8";
  String contextPath="";
  if (includeContextPath) {
    GrailsWebRequest webRequest=(GrailsWebRequest)RequestContextHolder.getRequestAttributes();
    if (webRequest != null) {
      contextPath=webRequest.getAttributes().getApplicationUri(webRequest.getCurrentRequest());
    }
  }
  if (parameterValues == null)   parameterValues=Collections.EMPTY_MAP;
  StringBuffer uri=new StringBuffer(contextPath);
  Set usedParams=new HashSet();
  String[] tokens=urlData.getTokens();
  int paramIndex=0;
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i];
    if (CAPTURED_WILDCARD.equals(token) || CAPTURED_DOUBLE_WILDCARD.equals(token)) {
      ConstrainedProperty prop=this.constraints[paramIndex++];
      String propName=prop.getPropertyName();
      Object value=parameterValues.get(propName);
      usedParams.add(propName);
      if (value == null && !prop.isNullable())       throw new UrlMappingException("Unable to create URL for mapping [" + this + "] and parameters ["+ parameterValues+ "]. Parameter ["+ prop.getPropertyName()+ "] is required, but was not specified!");
 else       if (value == null)       break;
      try {
        String v=value.toString();
        if (v.indexOf(SLASH) > -1 && CAPTURED_DOUBLE_WILDCARD.equals(token)) {
          if (v.startsWith(SLASH)) {
            v=v.substring(SLASH.length());
          }
          String[] segs=v.split(SLASH);
          for (int s=0; s < segs.length; s++) {
            String segment=segs[s];
            uri.append(SLASH).append(URLEncoder.encode(segment,encoding));
          }
        }
 else {
          uri.append(SLASH).append(URLEncoder.encode(v,encoding));
        }
      }
 catch (      UnsupportedEncodingException e) {
        throw new ControllerExecutionException("Error creating URL for parameters [" + parameterValues + "], problem encoding URL part ["+ value+ "]: "+ e.getMessage(),e);
      }
    }
 else {
      uri.append(SLASH).append(token);
    }
  }
  populateParameterList(parameterValues,encoding,uri,usedParams);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created reverse URL mapping [" + uri.toString() + "] for parameters ["+ parameterValues+ "]");
  }
  return uri.toString();
}
