{
  getServletContext().setAttribute(GrailsApplicationAttributes.PARENT_APPLICATION_CONTEXT,parent);
  GrailsApplication application=(GrailsApplication)parent.getBean(GrailsApplication.APPLICATION_ID,GrailsApplication.class);
  GrailsRuntimeConfigurator configurator=new GrailsRuntimeConfigurator(application,parent);
  WebApplicationContext webContext=configurator.configure(super.getServletContext());
  getServletContext().setAttribute(GrailsApplicationAttributes.APPLICATION_CONTEXT,webContext);
  getServletContext().setAttribute(GrailsApplication.APPLICATION_ID,application);
  GrailsConfigUtils.configureScaffolders(application,webContext);
  SessionFactory sessionFactory=(SessionFactory)webContext.getBean("sessionFactory");
  if (sessionFactory != null) {
    Session session=null;
    boolean participate=false;
    if (TransactionSynchronizationManager.hasResource(sessionFactory)) {
      participate=true;
    }
 else {
      logger.debug("Opening single Hibernate session in GrailsDispatcherServlet");
      session=SessionFactoryUtils.getSession(sessionFactory,true);
      session.setFlushMode(FlushMode.AUTO);
      TransactionSynchronizationManager.bindResource(sessionFactory,new SessionHolder(session));
    }
    try {
      GrailsBootstrapClass[] bootstraps=application.getGrailsBootstrapClasses();
      for (int i=0; i < bootstraps.length; i++) {
        bootstraps[i].callInit(getServletContext());
      }
      if (!participate) {
        if (!FlushMode.NEVER.equals(session.getFlushMode())) {
          session.flush();
        }
      }
    }
  finally {
      if (!participate) {
        TransactionSynchronizationManager.unbindResource(sessionFactory);
        logger.debug("Closing single Hibernate session in GrailsDispatcherServlet");
        try {
          SessionFactoryUtils.releaseSession(session,sessionFactory);
        }
 catch (        RuntimeException ex) {
          logger.error("Unexpected exception on closing Hibernate Session",ex);
        }
      }
    }
  }
  return webContext;
}
