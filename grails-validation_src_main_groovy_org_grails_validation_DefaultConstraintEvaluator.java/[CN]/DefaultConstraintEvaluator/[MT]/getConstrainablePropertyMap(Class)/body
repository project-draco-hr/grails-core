{
  List<String> ignoredProperties=new ArrayList<>();
  ignoredProperties.add(GrailsDomainClassProperty.CLASS);
  ignoredProperties.add(GrailsDomainClassProperty.META_CLASS);
  ignoredProperties.add(GrailsDomainClassProperty.ERRORS);
  if (DomainClassArtefactHandler.isDomainClass(theClass)) {
    ignoredProperties.add(GrailsDomainConfigurationUtil.PROPERTIES_PROPERTY);
    ignoredProperties.add(GrailsDomainClassProperty.IDENTITY);
    ignoredProperties.add(GrailsDomainClassProperty.VERSION);
    ignoredProperties.add(GrailsDomainClassProperty.DIRTY_PROPERTY_NAMES);
    ignoredProperties.add(GrailsDomainClassProperty.DIRTY);
    ignoredProperties.add(GrailsDomainClassProperty.ATTACHED);
  }
  final Object transients=GrailsClassUtils.getStaticPropertyValue(theClass,GrailsDomainClassProperty.TRANSIENT);
  if (transients instanceof List) {
    ignoredProperties.addAll((List)transients);
  }
  try {
    final BeanInfo beanInfo=Introspector.getBeanInfo(theClass);
    final PropertyDescriptor[] propertyDescriptors=beanInfo.getPropertyDescriptors();
    for (    PropertyDescriptor descriptor : propertyDescriptors) {
      final Method readMethod=descriptor.getReadMethod();
      if (readMethod != null && Modifier.isTransient(readMethod.getModifiers())) {
        ignoredProperties.add(descriptor.getName());
      }
    }
  }
 catch (  IntrospectionException e) {
    LOG.error("An error occurred introspecting properties",e);
  }
  Field[] declaredFields=theClass.getDeclaredFields();
  for (  Field field : declaredFields) {
    if (Modifier.isTransient(field.getModifiers())) {
      ignoredProperties.add(field.getName());
    }
  }
  Map<String,Method> propertyMap=new HashMap<>();
  for (  Object aClassChain : GrailsDomainConfigurationUtil.getSuperClassChain(theClass)) {
    Class<?> clazz=(Class<?>)aClassChain;
    for (    Method method : clazz.getDeclaredMethods()) {
      if (GrailsClassUtils.isPropertyGetter(method)) {
        String propertyName=GrailsClassUtils.getPropertyForGetter(method.getName());
        if (!ignoredProperties.contains(propertyName)) {
          propertyMap.put(propertyName,method);
        }
      }
    }
  }
  return propertyMap;
}
