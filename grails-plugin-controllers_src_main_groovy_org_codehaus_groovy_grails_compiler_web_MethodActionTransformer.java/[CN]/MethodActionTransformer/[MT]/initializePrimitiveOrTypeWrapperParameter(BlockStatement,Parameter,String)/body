{
  final ClassNode paramTypeClassNode=param.getType();
  final String methodParamName=param.getName();
  final Expression defaultValueExpression;
  final Class paramTypeClass=paramTypeClassNode.getTypeClass();
  if (param.hasInitialExpression()) {
    defaultValueExpression=param.getInitialExpression();
  }
 else   if (Boolean.TYPE == paramTypeClass) {
    defaultValueExpression=new ConstantExpression(false);
  }
 else   if (paramTypeClass.isPrimitive()) {
    defaultValueExpression=new ConstantExpression(0);
  }
 else {
    defaultValueExpression=new ConstantExpression(null);
  }
  final ConstantExpression paramConstantExpression=new ConstantExpression(requestParameterName);
  final Expression paramsTypeConversionMethodArguments=new ArgumentListExpression(paramConstantExpression,defaultValueExpression);
  final String conversionMethodName;
  if (TYPE_WRAPPER_CLASS_TO_CONVERSION_METHOD_NAME.containsKey(paramTypeClass)) {
    conversionMethodName=TYPE_WRAPPER_CLASS_TO_CONVERSION_METHOD_NAME.get(paramTypeClass);
  }
 else {
    conversionMethodName=paramTypeClass.getName();
  }
  final Expression retrieveConvertedValueExpression=new MethodCallExpression(PARAMS_EXPRESSION,conversionMethodName,paramsTypeConversionMethodArguments);
  final Expression paramsContainsKeyMethodArguments=new ArgumentListExpression(paramConstantExpression);
  final BooleanExpression containsKeyExpression=new BooleanExpression(new MethodCallExpression(PARAMS_EXPRESSION,"containsKey",paramsContainsKeyMethodArguments));
  final Token equalsToken=Token.newSymbol(Types.EQUALS,0,0);
  final Statement declareVariableStatement=new ExpressionStatement(new DeclarationExpression(new VariableExpression(methodParamName,paramTypeClassNode),equalsToken,new EmptyExpression()));
  wrapper.addStatement(declareVariableStatement);
  final Expression assignmentExpression=new BinaryExpression(new VariableExpression(methodParamName),equalsToken,new TernaryExpression(containsKeyExpression,retrieveConvertedValueExpression,defaultValueExpression));
  wrapper.addStatement(new ExpressionStatement(assignmentExpression));
}
