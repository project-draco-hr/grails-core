{
  GrailsDomainClass domainClass=(GrailsDomainClass)application.getArtefact(DomainClassArtefactHandler.TYPE,target.getClass().getName());
  boolean shouldFlush=shouldFlush(arguments);
  boolean shouldValidate=shouldValidate(arguments,domainClass);
  if (shouldValidate) {
    Validator validator=domainClass.getValidator();
    Errors errors=setupErrorsProperty(target);
    if (validator != null) {
      Method method=ReflectionUtils.findMethod(domainClass.getClazz(),ValidatePersistentMethod.BEFORE_VALIDATE);
      if (method != null) {
        ReflectionUtils.makeAccessible(method);
        ReflectionUtils.invokeMethod(method,target);
      }
      boolean deepValidate=true;
      Map argsMap=null;
      if (arguments.length > 0 && arguments[0] instanceof Map) {
        argsMap=(Map)arguments[0];
      }
      if (argsMap != null && argsMap.containsKey(ARGUMENT_DEEP_VALIDATE)) {
        deepValidate=GrailsClassUtils.getBooleanFromMap(ARGUMENT_DEEP_VALIDATE,argsMap);
      }
      if (deepValidate && (validator instanceof CascadingValidator)) {
        ((CascadingValidator)validator).validate(target,errors,deepValidate);
      }
 else {
        validator.validate(target,errors);
      }
      if (errors.hasErrors()) {
        handleValidationError(target,errors);
        @SuppressWarnings("hiding") boolean shouldFail=this.shouldFail;
        if (argsMap != null && argsMap.containsKey(ARGUMENT_FAIL_ON_ERROR)) {
          shouldFail=GrailsClassUtils.getBooleanFromMap(ARGUMENT_FAIL_ON_ERROR,argsMap);
        }
        if (shouldFail) {
          throw new ValidationException("Validation Error(s) occurred during save()",errors);
        }
        return null;
      }
      setObjectToReadWrite(target);
    }
  }
 else {
    shouldFlush=true;
  }
  if (domainClass != null) {
    autoRetrieveAssocations(domainClass,target);
  }
  try {
    if (!shouldValidate)     disableAutoValidationFor.set(target);
    if (shouldInsert(arguments)) {
      return performInsert(target,shouldFlush);
    }
    return performSave(target,shouldFlush);
  }
  finally {
    if (!shouldValidate)     disableAutoValidationFor.remove();
  }
}
