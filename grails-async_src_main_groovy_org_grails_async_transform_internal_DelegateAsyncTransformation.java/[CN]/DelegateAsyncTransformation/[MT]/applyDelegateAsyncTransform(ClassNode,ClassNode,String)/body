{
  List<MethodNode> methods=targetApi.getAllDeclaredMethods();
  for (  MethodNode m : methods) {
    if (isCandidateMethod(m)) {
      MethodNode existingMethod=classNode.getMethod(m.getName(),m.getParameters());
      if (existingMethod == null) {
        ClassNode promiseNode=ClassHelper.make(Promise.class).getPlainNodeReference();
        ClassNode returnType=m.getReturnType().getPlainNodeReference();
        if (!returnType.getNameWithoutPackage().equals(VOID)) {
          promiseNode.setGenericsTypes(new GenericsType[]{new GenericsType(returnType)});
        }
        final BlockStatement methodBody=new BlockStatement();
        final BlockStatement promiseBody=new BlockStatement();
        ClassNode promisesClass=ClassHelper.make(Promises.class).getPlainNodeReference();
        final ClosureExpression closureExpression=new ClosureExpression(new Parameter[0],promiseBody);
        VariableScope variableScope=new VariableScope();
        closureExpression.setVariableScope(variableScope);
        MethodCallExpression createPromise=new MethodCallExpression(new ClassExpression(promisesClass),"createPromise",new ArgumentListExpression(closureExpression));
        methodBody.addStatement(new ExpressionStatement(createPromise));
        final ArgumentListExpression arguments=new ArgumentListExpression();
        Parameter[] parameters=copyParameters(m.getParameters());
        for (        Parameter p : parameters) {
          p.setClosureSharedVariable(true);
          variableScope.putReferencedLocalVariable(p);
          VariableExpression ve=new VariableExpression(p);
          ve.setClosureSharedVariable(true);
          arguments.addExpression(ve);
        }
        MethodCallExpression delegateMethodCall=new MethodCallExpression(new VariableExpression(fieldName),m.getName(),arguments);
        promiseBody.addStatement(new ExpressionStatement(delegateMethodCall));
        MethodNode newMethodNode=new MethodNode(m.getName(),Modifier.PUBLIC,promiseNode,parameters,null,methodBody);
        classNode.addMethod(newMethodNode);
      }
    }
  }
}
