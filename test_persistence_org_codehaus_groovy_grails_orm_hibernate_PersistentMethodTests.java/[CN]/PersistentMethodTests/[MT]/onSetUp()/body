{
  Class groovyClass=cl.parseClass("public class PersistentMethodTests {\n" + "\n" + "\t List optionals = [ \"age\" ];\n"+ "\t\n"+ "\t Long id; \n"+ "\t Long version; \n"+ "\t\n"+ "\t String firstName; \n"+ "\t String lastName; \n"+ "\t Integer age;\n"+ "boolean active = true"+ "\t\n"+ "\tdef constraints = {\n"+ "\t\tfirstName(length:4..15)\n"+ "\t}\n"+ "}");
  grailsApplication=new DefaultGrailsApplication(new Class[]{groovyClass},cl);
  DefaultGrailsDomainConfiguration config=new DefaultGrailsDomainConfiguration();
  config.setGrailsApplication(this.grailsApplication);
  Properties props=new Properties();
  props.put("hibernate.connection.username","sa");
  props.put("hibernate.connection.password","");
  props.put("hibernate.connection.url","jdbc:hsqldb:mem:grailsDB");
  props.put("hibernate.connection.driver_class","org.hsqldb.jdbcDriver");
  props.put("hibernate.dialect","org.hibernate.dialect.HSQLDialect");
  props.put("hibernate.hbm2ddl.auto","create-drop");
  config.setProperties(props);
  Thread.currentThread().setContextClassLoader(this.cl);
  this.sessionFactory=config.buildSessionFactory();
  if (!TransactionSynchronizationManager.hasResource(this.sessionFactory)) {
    this.hibSession=this.sessionFactory.openSession();
    TransactionSynchronizationManager.bindResource(this.sessionFactory,new SessionHolder(hibSession));
  }
  new DomainClassMethods(grailsApplication,groovyClass,sessionFactory,cl);
  GrailsDomainClassValidator validator=new GrailsDomainClassValidator();
  GrailsDomainClass domainClass=this.grailsApplication.getGrailsDomainClass("PersistentMethodTests");
  validator.setDomainClass(this.grailsApplication.getGrailsDomainClass("PersistentMethodTests"));
  domainClass.setValidator(validator);
  super.onSetUp();
}
