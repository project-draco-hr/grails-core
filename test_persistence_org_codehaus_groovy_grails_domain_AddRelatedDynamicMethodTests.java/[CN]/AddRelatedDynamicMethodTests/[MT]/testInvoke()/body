{
  GroovyClassLoader gcl=new GroovyClassLoader();
  gcl.parseClass("class Book {\n" + "\tLong id\n" + "\tLong version\n"+ "\n"+ "\tAuthor author\n"+ "}\n"+ "class Author {\n"+ "\tLong id\n"+ "\tLong version\n"+ "\tdef relatesToMany = [books:Book]\n"+ "\tSet books\n"+ "}\n"+ "class SubBook extends Book{\n"+ "\tString subtitle\n"+ "\n"+ "}");
  GroovyObject book=(GroovyObject)gcl.loadClass("Book",false,true).newInstance();
  GroovyObject subbook=(GroovyObject)gcl.loadClass("SubBook",false,true).newInstance();
  GroovyObject author=(GroovyObject)gcl.loadClass("Author",false,true).newInstance();
  GrailsApplication ga=new DefaultGrailsApplication(new Class[]{book.getClass(),author.getClass()},gcl);
  GrailsDomainClass authorDC=ga.getGrailsDomainClass("Author");
  AbstractAddRelatedDynamicMethod ardm=new AddRelatedDynamicMethod(authorDC.getPropertyByName("books"));
  try {
    ardm.invoke(author,"addAuthor",new Object[0]);
    fail("Should have thrown missing method exception!");
  }
 catch (  MissingMethodException e) {
  }
  try {
    ardm.invoke(author,"addAuthor",new Object[]{"blah"});
    fail("Should have thrown missing method exception!");
  }
 catch (  MissingMethodException e) {
  }
  ardm.invoke(author,"addAuthor",new Object[]{book});
  ardm.invoke(author,"addAuthor",new Object[]{subbook});
  assertEquals(author,book.getProperty("author"));
  Set books=(Set)author.getProperty("books");
  assertNotNull(books);
  assertEquals(2,books.size());
  assertTrue(books.contains(book));
}
