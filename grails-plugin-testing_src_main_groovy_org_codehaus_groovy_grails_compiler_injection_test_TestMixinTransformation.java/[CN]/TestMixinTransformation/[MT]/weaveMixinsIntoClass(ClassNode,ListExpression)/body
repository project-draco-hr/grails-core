{
  if (values != null) {
    boolean isJunit3=isJunit3Test(classNode);
    List<MethodNode> beforeMethods=null;
    List<MethodNode> afterMethods=null;
    if (isJunit3) {
      beforeMethods=new ArrayList<MethodNode>();
      afterMethods=new ArrayList<MethodNode>();
    }
    for (    Expression current : values.getExpressions()) {
      if (current instanceof ClassExpression) {
        ClassExpression ce=(ClassExpression)current;
        ClassNode mixinClassNode=ce.getType();
        final String fieldName='$' + GrailsNameUtils.getPropertyName(mixinClassNode.getName());
        classNode.addField(fieldName,Modifier.PRIVATE,mixinClassNode,new ConstructorCallExpression(mixinClassNode,new ArgumentListExpression()));
        VariableExpression fieldReference=new VariableExpression(fieldName);
        while (!mixinClassNode.getName().equals(OBJECT_CLASS)) {
          final List<MethodNode> mixinMethods=mixinClassNode.getMethods();
          int beforeClassMethodCount=0;
          int afterClassMethodCount=0;
          for (          MethodNode mixinMethod : mixinMethods) {
            if (isCandidateMethod(mixinMethod) && !hasDeclaredMethod(classNode,mixinMethod)) {
              if (mixinMethod.isStatic()) {
                GrailsASTUtils.addDelegateStaticMethod(classNode,mixinMethod);
              }
 else {
                GrailsASTUtils.addDelegateInstanceMethod(classNode,fieldReference,mixinMethod,false);
              }
              if (isJunit3) {
                if (hasAnnotation(mixinMethod,Before.class)) {
                  beforeMethods.add(mixinMethod);
                }
                if (hasAnnotation(mixinMethod,BeforeClass.class)) {
                  beforeMethods.add(beforeClassMethodCount++,mixinMethod);
                }
                if (hasAnnotation(mixinMethod,After.class)) {
                  afterMethods.add(mixinMethod);
                }
                if (hasAnnotation(mixinMethod,AfterClass.class)) {
                  afterMethods.add(afterClassMethodCount++,mixinMethod);
                }
              }
            }
          }
          mixinClassNode=mixinClassNode.getSuperClass();
        }
      }
    }
    if (isJunit3) {
      addMethodCallsToMethod(classNode,SET_UP_METHOD,beforeMethods);
      addMethodCallsToMethod(classNode,TEAR_DOWN_METHOD,afterMethods);
    }
  }
}
