{
  if (!commandObjectTypeClassNode.isPrimaryClassNode()) {
    final List<MethodNode> validateMethods=commandObjectTypeClassNode.getMethods("validate");
    if (validateMethods.size() == 0) {
      final String errorMessage="The [" + actionName + "] action accepts a parameter of type ["+ commandObjectTypeClassNode.getName()+ "] which does not appear to be a command object class.  "+ "This can happen if the source code for this class is not in this "+ "project and the class is not marked with @Validateable.";
      error(source,errorMessage);
    }
  }
  final ASTValidateableHelper h=new DefaultASTValidateableHelper();
  h.injectValidateableCode(commandObjectTypeClassNode);
  new DefaultASTDatabindingHelper().injectDatabindingCode(source,context,commandObjectTypeClassNode);
}
