{
  final Map bindingVariables=binding != null ? binding.getVariables() : null;
  Object controllerName=getControllerName(namedArguments,bindingVariables);
  Object actionName=getActionName(namedArguments,bindingVariables);
  Object pluginName=getPluginName(namedArguments,bindingVariables);
  Object httpMethod=getHttpMethod(namedArguments,bindingVariables);
  Object version=getVersion(namedArguments,bindingVariables);
  Object namespace=getNamespace(namedArguments,bindingVariables);
  Object redirectInfo=getRedirectInfo(namedArguments,bindingVariables);
  Object viewName=getViewName(namedArguments,bindingVariables);
  if (actionName != null && viewName != null) {
    viewName=null;
    LOG.warn("Both [action] and [view] specified in URL mapping [" + mapping + "]. The action takes precendence!");
  }
  Object uri=getURI(namedArguments,bindingVariables);
  ConstrainedProperty[] constraints=constrainedList.toArray(new ConstrainedProperty[constrainedList.size()]);
  UrlMapping urlMapping;
  if (uri != null) {
    try {
      urlMapping=new RegexUrlMapping(urlData,new URI(uri.toString()),constraints,grailsApplication);
    }
 catch (    URISyntaxException e) {
      throw new UrlMappingException("Cannot map to invalid URI: " + e.getMessage(),e);
    }
  }
 else {
    urlMapping=createURLMapping(urlData,isResponseCode,redirectInfo,controllerName,actionName,namespace,pluginName,viewName,httpMethod != null ? httpMethod.toString() : null,version != null ? version.toString() : null,constraints);
  }
  Object exceptionArg=getException(namedArguments,bindingVariables);
  if (isResponseCode && exceptionArg != null) {
    if (exceptionArg instanceof Class) {
      Class exClass=(Class)exceptionArg;
      if (Throwable.class.isAssignableFrom(exClass)) {
        ((ResponseCodeUrlMapping)urlMapping).setExceptionType(exClass);
      }
 else {
        LOG.error("URL mapping argument [exception] with value [" + exceptionArg + "] must be a subclass of java.lang.Throwable");
      }
    }
 else {
      LOG.error("URL mapping argument [exception] with value [" + exceptionArg + "] must be a valid class");
    }
  }
  Object parseRequest=getParseRequest(namedArguments,bindingVariables);
  if (parseRequest instanceof Boolean) {
    urlMapping.setParseRequest((Boolean)parseRequest);
  }
  return urlMapping;
}
