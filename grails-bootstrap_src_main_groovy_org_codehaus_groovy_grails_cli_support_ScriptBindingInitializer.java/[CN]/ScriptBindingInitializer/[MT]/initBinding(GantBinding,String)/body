{
  Closure<?> c=settings.getGrailsScriptClosure();
  c.setDelegate(binding);
  @SuppressWarnings("rawtypes") Map argsMap=new LinkedHashMap(commandLine.getUndeclaredOptions());
  argsMap.put("params",commandLine.getRemainingArgs());
  binding.setVariable("argsMap",argsMap);
  binding.setVariable("args",commandLine.getRemainingArgsLineSeparated());
  binding.setVariable(GRAILS_SCRIPT,c);
  final GrailsConsole grailsConsole=GrailsConsole.getInstance();
  binding.setVariable(GRAILS_CONSOLE,grailsConsole);
  binding.setVariable(GRAILS_SETTINGS,settings);
  final File basedir=settings.getBaseDir();
  final String baseDirPath=basedir.getPath();
  binding.setVariable(BASEDIR,baseDirPath);
  binding.setVariable(SCAFFOLD_DIR,baseDirPath + "/web-app/WEB-INF/templates/scaffolding");
  binding.setVariable(BASE_FILE,basedir);
  binding.setVariable(BASE_NAME,basedir.getName());
  binding.setVariable(GRAILS_HOME,(settings.getGrailsHome() != null ? settings.getGrailsHome().getPath() : null));
  binding.setVariable(GRAILS_VERSION,settings.getGrailsVersion());
  binding.setVariable(USER_HOME,settings.getUserHome());
  binding.setVariable(GRAILS_ENV,settings.getGrailsEnv());
  binding.setVariable("defaultEnv",Boolean.valueOf(settings.getDefaultEnv()));
  binding.setVariable("buildConfig",settings.getConfig());
  binding.setVariable("rootLoader",settings.getRootLoader());
  binding.setVariable("configFile",new File(baseDirPath + "/grails-app/conf/Config.groovy"));
  String grailsWork=settings.getGrailsWorkDir().getPath();
  binding.setVariable("grailsWorkDir",grailsWork);
  binding.setVariable("projectWorkDir",settings.getProjectWorkDir().getPath());
  binding.setVariable("projectTargetDir",settings.getProjectTargetDir());
  binding.setVariable("classesDir",settings.getClassesDir());
  binding.setVariable("pluginClassesDir",settings.getPluginClassesDir());
  binding.setVariable("grailsTmp",grailsWork + "/tmp");
  binding.setVariable("classesDirPath",settings.getClassesDir().getPath());
  binding.setVariable("pluginClassesDirPath",settings.getPluginClassesDir().getPath());
  binding.setVariable("testDirPath",settings.getTestClassesDir().getPath());
  final String resourcesDir=settings.getResourcesDir().getPath();
  binding.setVariable("resourcesDirPath",resourcesDir);
  binding.setVariable("webXmlFile",settings.getWebXmlLocation());
  binding.setVariable("pluginsDirPath",settings.getProjectPluginsDir().getPath());
  binding.setVariable("globalPluginsDirPath",settings.getGlobalPluginsDir().getPath());
  binding.setVariable("Ant",binding.getVariable("ant"));
  GroovyClassLoader eventsClassLoader=new GroovyClassLoader(classLoader);
  GrailsBuildEventListener buildEventListener=new GrailsBuildEventListener(eventsClassLoader,binding,settings);
  binding.setVariable("eventsClassLoader",eventsClassLoader);
  binding.setVariable("eventListener",buildEventListener);
  binding.addBuildListener(buildEventListener);
  final BaseSettingsApi cla=new BaseSettingsApi(settings,buildEventListener,isInteractive);
  if (scriptName.equals("RunApp")) {
    cla.enableUaa();
  }
  cla.makeApiAvailableToScripts(binding,cla);
  cla.makeApiAvailableToScripts(binding,cla.getPluginSettings());
  setUIListener(binding);
  try {
    List<File> descriptors=new ArrayList<File>();
    File desc=pluginPathSupport.getPluginDescriptor(basedir);
    if (desc != null)     descriptors.add(desc);
    for (    File dir : pluginPathSupport.listKnownPluginDirs()) {
      File pluginDescriptor=pluginPathSupport.getPluginDescriptor(dir);
      if (pluginDescriptor != null) {
        descriptors.add(pluginDescriptor);
      }
 else {
        grailsConsole.log("Cannot find plugin descriptor for path '" + dir.getPath() + "'.");
      }
    }
    for (    File file : descriptors) {
      Matcher matcher=pluginDescriptorPattern.matcher(file.getName());
      matcher.find();
      String pluginName=GrailsNameUtils.getPropertyName(matcher.group(1));
      binding.setVariable(pluginName + "PluginDir",file.getParentFile());
    }
  }
 catch (  Exception e) {
  }
  return binding;
}
