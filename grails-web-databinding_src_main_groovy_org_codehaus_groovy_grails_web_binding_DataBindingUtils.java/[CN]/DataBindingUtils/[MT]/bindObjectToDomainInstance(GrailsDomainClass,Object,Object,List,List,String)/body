{
  BindingResult bindingResult=null;
  boolean useSpringBinder=false;
  GrailsApplication grailsApplication=null;
  if (domain != null) {
    grailsApplication=domain.getGrailsApplication();
  }
  if (grailsApplication == null) {
    grailsApplication=Holders.findApplication();
  }
  if (grailsApplication != null) {
    if (Boolean.TRUE.equals(grailsApplication.getFlatConfig().get("grails.databinding.useSpringBinder"))) {
      useSpringBinder=true;
    }
  }
  if (!useSpringBinder) {
    try {
      final DataBindingSource bindingSource=createDataBindingSource(grailsApplication,object.getClass(),source);
      final DataBinder grailsWebDataBinder=getGrailsWebDataBinder(grailsApplication);
      grailsWebDataBinder.bind(object,bindingSource,filter,include,exclude);
    }
 catch (    InvalidRequestBodyException e) {
      String messageCode="invalidRequestBody";
      Class objectType=object.getClass();
      String defaultMessage="An error occurred parsing the body of the request";
      String[] codes=getMessageCodes(messageCode,objectType);
      bindingResult=new BeanPropertyBindingResult(object,objectType.getName());
      bindingResult.addError(new ObjectError(bindingResult.getObjectName(),codes,null,defaultMessage));
    }
catch (    Exception e) {
      bindingResult=new BeanPropertyBindingResult(object,object.getClass().getName());
      bindingResult.addError(new ObjectError(bindingResult.getObjectName(),e.getMessage()));
    }
  }
 else {
    if (source instanceof GrailsParameterMap) {
      GrailsParameterMap parameterMap=(GrailsParameterMap)source;
      HttpServletRequest request=parameterMap.getRequest();
      SpringWebDataBinder dataBinder=createDataBinder(object,include,exclude,request);
      dataBinder.bind(parameterMap,filter);
      bindingResult=dataBinder.getBindingResult();
    }
 else     if (source instanceof HttpServletRequest) {
      HttpServletRequest request=(HttpServletRequest)source;
      SpringWebDataBinder dataBinder=createDataBinder(object,include,exclude,request);
      performBindFromRequest(dataBinder,request,filter);
      bindingResult=dataBinder.getBindingResult();
    }
 else     if (source instanceof Map) {
      Map propertyMap=convertPotentialGStrings((Map)source);
      SpringWebDataBinder binder=createDataBinder(object,include,exclude,null);
      performBindFromPropertyValues(binder,new MutablePropertyValues(propertyMap),filter);
      bindingResult=binder.getBindingResult();
    }
 else {
      GrailsWebRequest webRequest=(GrailsWebRequest)RequestContextHolder.getRequestAttributes();
      if (webRequest != null) {
        SpringWebDataBinder binder=createDataBinder(object,include,exclude,webRequest.getCurrentRequest());
        HttpServletRequest request=webRequest.getCurrentRequest();
        performBindFromRequest(binder,request,filter);
        bindingResult=binder.getBindingResult();
      }
    }
  }
  if (domain != null && bindingResult != null) {
    BindingResult newResult=new ValidationErrors(object);
    for (    Object error : bindingResult.getAllErrors()) {
      if (error instanceof FieldError) {
        FieldError fieldError=(FieldError)error;
        final boolean isBlank=BLANK.equals(fieldError.getRejectedValue());
        if (!isBlank) {
          newResult.addError(fieldError);
        }
 else         if (domain.hasPersistentProperty(fieldError.getField())) {
          final boolean isOptional=domain.getPropertyByName(fieldError.getField()).isOptional();
          if (!isOptional) {
            newResult.addError(fieldError);
          }
        }
 else {
          newResult.addError(fieldError);
        }
      }
 else {
        newResult.addError((ObjectError)error);
      }
    }
    bindingResult=newResult;
  }
  MetaClass mc=GroovySystem.getMetaClassRegistry().getMetaClass(object.getClass());
  if (mc.hasProperty(object,"errors") != null && bindingResult != null) {
    ValidationErrors errors=new ValidationErrors(object);
    errors.addAllErrors(bindingResult);
    mc.setProperty(object,"errors",errors);
  }
  return bindingResult;
}
