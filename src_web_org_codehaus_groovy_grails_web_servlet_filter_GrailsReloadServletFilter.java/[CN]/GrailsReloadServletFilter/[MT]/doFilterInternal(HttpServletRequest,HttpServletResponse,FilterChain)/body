{
  context=(GrailsWebApplicationContext)getServletContext().getAttribute(GrailsApplicationAttributes.APPLICATION_CONTEXT);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Executing Grails reload filter...");
  }
  if (context == null) {
    filterChain.doFilter(httpServletRequest,httpServletResponse);
    return;
  }
  application=(GrailsApplication)context.getBean(GrailsApplication.APPLICATION_ID);
  if (application == null) {
    filterChain.doFilter(httpServletRequest,httpServletResponse);
    return;
  }
  if (config == null) {
    WebApplicationContext parent=(WebApplicationContext)getServletContext().getAttribute(GrailsApplicationAttributes.PARENT_APPLICATION_CONTEXT);
    config=new GrailsRuntimeConfigurator(application,parent);
  }
  if (copyScript == null) {
    GroovyClassLoader gcl=new GroovyClassLoader(getClass().getClassLoader());
    Class groovyClass;
    try {
      groovyClass=gcl.parseClass(gcl.getResource("org/codehaus/groovy/grails/web/servlet/filter/GrailsResourceCopier.groovy").openStream());
      copyScript=(ResourceCopier)groovyClass.newInstance();
      groovyClass=gcl.loadClass("org.codehaus.groovy.grails.scaffolding.DefaultGrailsTemplateGenerator");
      GrailsTemplateGenerator templateGenerator=(GrailsTemplateGenerator)groovyClass.newInstance();
      templateGenerator.setOverwrite(true);
      GrailsControllerClass[] controllers=application.getControllers();
      for (int i=0; i < controllers.length; i++) {
        GrailsControllerClass controller=controllers[i];
        if (controller.isScaffolding()) {
          Class clazz=controller.getScaffoldedClass();
          GrailsDomainClass domainClass;
          if (clazz != null) {
            domainClass=application.getGrailsDomainClass(clazz.getName());
          }
 else {
            domainClass=application.getGrailsDomainClass(controller.getName());
          }
          if (domainClass != null) {
            templateGenerator.generateViews(domainClass,getServletContext().getRealPath("/WEB-INF"));
          }
        }
      }
      copyScript.copyViews(true);
    }
 catch (    IllegalAccessException e) {
      LOG.error("Illegal access creating resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    InstantiationException e) {
      LOG.error("Error instantiating resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    CompilationFailedException e) {
      LOG.error("Error compiling resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
catch (    Exception e) {
      LOG.error("Error loading resource copier. Save/reload disabled: " + e.getMessage(),e);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Running copy script...");
  }
  if (copyScript != null) {
    copyScript.copyViews();
    copyScript.copyResourceBundles();
  }
  if (manager == null) {
    manager=PluginManagerHolder.getPluginManager();
  }
  if (manager != null) {
    if (LOG.isDebugEnabled())     LOG.debug("Checking Plugin manager for changes..");
    manager.checkForChanges();
  }
 else   if (LOG.isDebugEnabled()) {
    LOG.debug("Plugin manager not found, skipping change check");
  }
  filterChain.doFilter(httpServletRequest,httpServletResponse);
}
