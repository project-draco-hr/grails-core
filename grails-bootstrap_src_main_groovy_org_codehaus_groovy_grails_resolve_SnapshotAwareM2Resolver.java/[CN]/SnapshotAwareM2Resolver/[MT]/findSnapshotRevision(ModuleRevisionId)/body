{
  if (!isM2compatible()) {
    return null;
  }
  if (shouldUseMavenMetadata(getWholePattern())) {
    InputStream metadataStream=null;
    try {
      String metadataLocation=IvyPatternHelper.substitute(getRoot() + "[organisation]/[module]/[revision]/maven-metadata.xml",mrid);
      Resource metadata=getRepository().getResource(metadataLocation);
      if (metadata.exists()) {
        metadataStream=metadata.openStream();
        final StringBuilder timestamp=new StringBuilder();
        final StringBuilder buildNumber=new StringBuilder();
        XMLHelper.parse(metadataStream,null,new ContextualSAXHandler(){
          @Override public void endElement(          String uri,          String localName,          String qName) throws SAXException {
            if ("metadata/versioning/snapshot/timestamp".equals(getContext())) {
              timestamp.append(getText());
            }
            if ("metadata/versioning/snapshot/buildNumber".equals(getContext())) {
              buildNumber.append(getText());
            }
            super.endElement(uri,localName,qName);
          }
        }
,null);
        if (timestamp.length() > 0) {
          String rev=mrid.getRevision();
          rev=rev.substring(0,rev.length() - "-SNAPSHOT".length());
          return new SnapshotRevision(rev,timestamp.toString(),Long.parseLong(buildNumber.toString()));
        }
      }
 else {
        Message.verbose("\tmaven-metadata not available: " + metadata);
      }
    }
 catch (    IOException e) {
      Message.verbose("impossible to access maven metadata file, ignored: " + e.getMessage());
    }
catch (    SAXException e) {
      Message.verbose("impossible to parse maven metadata file, ignored: " + e.getMessage());
    }
catch (    ParserConfigurationException e) {
      Message.verbose("impossible to parse maven metadata file, ignored: " + e.getMessage());
    }
 finally {
      if (metadataStream != null) {
        try {
          metadataStream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  return null;
}
