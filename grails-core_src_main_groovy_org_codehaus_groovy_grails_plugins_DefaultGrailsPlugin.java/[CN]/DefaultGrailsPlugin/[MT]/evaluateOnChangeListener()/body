{
  if (pluginBean.isReadableProperty(ON_SHUTDOWN)) {
    onShutdownListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,ON_SHUTDOWN);
  }
  if (pluginBean.isReadableProperty(ON_CONFIG_CHANGE)) {
    onConfigChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,ON_CONFIG_CHANGE);
  }
  if (pluginBean.isReadableProperty(ON_CHANGE)) {
    onChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,ON_CHANGE);
  }
  final boolean warDeployed=Metadata.getCurrent().isWarDeployed();
  final boolean reloadEnabled=Environment.getCurrent().isReloadEnabled();
  if (!((reloadEnabled || !warDeployed) && onChangeListener != null)) {
    return;
  }
  Object referencedResources=GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(plugin,WATCHED_RESOURCES);
  try {
    List resourceList=null;
    if (referencedResources instanceof String) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Configuring plugin " + this + " to watch resources with pattern: "+ referencedResources);
      }
      resourceList=Collections.singletonList(referencedResources.toString());
    }
 else     if (referencedResources instanceof List) {
      resourceList=(List)referencedResources;
    }
    if (resourceList == null) {
      return;
    }
    List<String> resourceListTmp=new ArrayList<String>();
    PluginBuildSettings pluginBuildSettings=GrailsPluginUtils.getPluginBuildSettings();
    if (pluginBuildSettings == null) {
      return;
    }
    final Resource[] pluginDirs=pluginBuildSettings.getPluginDirectories();
    final Environment env=Environment.getCurrent();
    final String baseLocation=env.getReloadLocation();
    for (    Object ref : resourceList) {
      String stringRef=ref.toString();
      if (warDeployed) {
        addBaseLocationPattern(resourceListTmp,baseLocation,stringRef);
      }
 else {
        for (        Resource pluginDir : pluginDirs) {
          if (pluginDir == null)           continue;
          String pluginResources=getResourcePatternForBaseLocation(pluginDir.getFile().getCanonicalPath(),stringRef);
          resourceListTmp.add(pluginResources);
        }
        addBaseLocationPattern(resourceListTmp,baseLocation,stringRef);
      }
    }
    watchedResourcePatternReferences=new String[resourceListTmp.size()];
    for (int i=0; i < watchedResourcePatternReferences.length; i++) {
      String resRef=resourceListTmp.get(i);
      watchedResourcePatternReferences[i]=resRef;
    }
    watchedResourcePatterns=new WatchPatternParser().getWatchPatterns(Arrays.asList(watchedResourcePatternReferences));
  }
 catch (  IllegalArgumentException e) {
    if (GrailsUtil.isDevelopmentEnv()) {
      LOG.debug("Cannot load plug-in resource watch list from [" + ArrayUtils.toString(watchedResourcePatternReferences) + "]. This means that the plugin "+ this+ ", will not be able to auto-reload changes effectively. Try runnng grails upgrade.: "+ e.getMessage());
    }
  }
catch (  IOException e) {
    if (GrailsUtil.isDevelopmentEnv()) {
      LOG.debug("Cannot load plug-in resource watch list from [" + ArrayUtils.toString(watchedResourcePatternReferences) + "]. This means that the plugin "+ this+ ", will not be able to auto-reload changes effectively. Try runnng grails upgrade.: "+ e.getMessage());
    }
  }
}
