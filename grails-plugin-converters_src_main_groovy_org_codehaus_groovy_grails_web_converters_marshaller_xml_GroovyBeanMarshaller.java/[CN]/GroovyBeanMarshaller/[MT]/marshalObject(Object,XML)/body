{
  try {
    boolean isEntity=o.getClass().getAnnotation(Entity.class) != null;
    for (    PropertyDescriptor property : BeanUtils.getPropertyDescriptors(o.getClass())) {
      String name=property.getName();
      if (isEntity && (name.equals(GrailsDomainClassProperty.ATTACHED) || name.equals(GrailsDomainClassProperty.ERRORS)))       continue;
      Method readMethod=property.getReadMethod();
      if (readMethod != null && !(name.equals("metaClass")) && !(name.equals("class"))) {
        if (readMethod.getAnnotation(PersistenceMethod.class) != null)         continue;
        if (readMethod.getAnnotation(ControllerMethod.class) != null)         continue;
        Object value=readMethod.invoke(o,(Object[])null);
        xml.startNode(name);
        xml.convertAnother(value);
        xml.end();
      }
    }
    for (    Field field : o.getClass().getDeclaredFields()) {
      int modifiers=field.getModifiers();
      if (Modifier.isPublic(modifiers) && !(Modifier.isStatic(modifiers) || Modifier.isTransient(modifiers))) {
        String name=field.getName();
        if (isEntity && (name.equals(GrailsDomainClassProperty.ATTACHED) || name.equals(GrailsDomainClassProperty.ERRORS)))         continue;
        xml.startNode(name);
        xml.convertAnother(field.get(o));
        xml.end();
      }
    }
  }
 catch (  ConverterException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw new ConverterException("Error converting Bean with class " + o.getClass().getName(),e);
  }
}
