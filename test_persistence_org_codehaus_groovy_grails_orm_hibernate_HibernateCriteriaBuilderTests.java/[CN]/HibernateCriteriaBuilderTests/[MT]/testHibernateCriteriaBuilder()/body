{
  GrailsDomainClass domainClass=this.grailsApplication.getGrailsDomainClass("CriteriaBuilderTestClass");
  assertNotNull(domainClass);
  GroovyObject obj=(GroovyObject)domainClass.newInstance();
  obj.setProperty("firstName","fred");
  obj.setProperty("lastName","flintstone");
  obj.setProperty("age",new Integer(45));
  obj.invokeMethod("save",null);
  GroovyObject obj2=(GroovyObject)domainClass.newInstance();
  obj2.setProperty("firstName","wilma");
  obj2.setProperty("lastName","flintstone");
  obj2.setProperty("age",new Integer(42));
  obj2.invokeMethod("save",null);
  GroovyObject obj3=(GroovyObject)domainClass.newInstance();
  obj3.setProperty("firstName","dino");
  obj3.setProperty("lastName","dinosaur");
  obj3.setProperty("age",new Integer(12));
  obj3.invokeMethod("save",null);
  Proxy p=null;
  p=parse("{ " + "and { " + "eq('firstName','fred');"+ "eq('lastName', 'flintstone')"+ "}"+ "}","Test1");
  System.out.println("Criteria output = ");
  System.out.println(ArrayUtils.toString(p.invokeMethod("toArray",null)));
  p=parse("{\n" + "and {\n" + "eq(\"firstName\",\"Fred\");\n"+ "and {\n"+ "eq(\"age\", 42)\n"+ "eq(\"lastName\", \"flintstone\")\n"+ "}\n"+ "}\n"+ "}","Test2");
  System.out.println("Criteria output = ");
  System.out.println(ArrayUtils.toString(p.invokeMethod("toArray",null)));
  p=parse("{\n" + "eq(\"firstName\",\"Fred\")\n" + "order(\"firstName\")\n"+ "maxResults(10)\n"+ "}","Test3");
  System.out.println("Criteria output = ");
  System.out.println(ArrayUtils.toString(p.invokeMethod("toArray",null)));
  try {
    p=parse("{\n" + "and {\n" + "eq(\"firstName\",\"Fred\");\n"+ "and {\n"+ "eq(\"age\", 42)\n"+ "}\n"+ "}\n"+ "}","Test4");
    fail("Should have thrown illegal argument exception");
  }
 catch (  InvokerInvocationException iie) {
    assertEquals(IllegalArgumentException.class,iie.getCause().getClass());
  }
  try {
    p=parse("{\n" + "and {\n" + "eq(\"firstName\",\"Fred\");\n"+ "not {\n"+ "eq(\"age\", 42)\n"+ "rubbish()\n"+ "}\n"+ "}\n"+ "}","Test5");
    fail("Should have thrown illegal argument exception");
  }
 catch (  InvokerInvocationException iie) {
    assertEquals(MissingMethodException.class,iie.getCause().getClass());
  }
}
