{
  super.setUp();
  Log4jConfigurer.initLogging("file:./test/persistence/log4j.properties");
  ExpandoMetaClass.enableGlobally();
  PluginManagerHolder.setPluginManager(null);
  onSetUp();
  ConfigObject config=new ConfigSlurper().parse("hibernate.cache.use_second_level_cache=true\n" + "hibernate.cache.use_query_cache=true\n" + "hibernate.cache.provider_class='org.hibernate.cache.EhCacheProvider'\n"+ "hibernate.show_sql=true\n"+ "hibernate.use_sql_comments=false\n"+ "dataSource {\n"+ "dbCreate = \"create-drop\" \n"+ "url = \"jdbc:hsqldb:mem:devDB\"\n"+ "logSql = true\n"+ "pooling = false                          \n"+ "driverClassName = \"org.hsqldb.jdbcDriver\"\t\n"+ "username = \"sa\"\n"+ "password = \"\"\n"+ "}");
  ConfigurationHolder.setConfig(config);
  for (int i=0; i < gcl.getLoadedClasses().length; i++) {
    Class aClass=gcl.getLoadedClasses()[i];
    GroovySystem.getMetaClassRegistry().removeMetaClass(aClass);
  }
  ga=new DefaultGrailsApplication(gcl.getLoadedClasses(),gcl);
  ApplicationHolder.setApplication(ga);
  MockApplicationContext mc=new MockApplicationContext();
  mc.registerMockBean(GrailsApplication.APPLICATION_ID,ga);
  mc.registerMockBean("messageSource",new StaticMessageSource());
  mc.registerMockBean(PluginMetaManager.BEAN_ID,new DefaultPluginMetaManager(new Resource[0]));
  GrailsRuntimeConfigurator grc=new GrailsRuntimeConfigurator(ga,mc);
  this.applicationContext=grc.configure(new MockServletContext());
  this.sessionFactory=(SessionFactory)this.applicationContext.getBean(GrailsRuntimeConfigurator.SESSION_FACTORY_BEAN);
  if (!TransactionSynchronizationManager.hasResource(this.sessionFactory)) {
    this.session=this.sessionFactory.openSession();
    TransactionSynchronizationManager.bindResource(this.sessionFactory,new SessionHolder(session));
  }
}
