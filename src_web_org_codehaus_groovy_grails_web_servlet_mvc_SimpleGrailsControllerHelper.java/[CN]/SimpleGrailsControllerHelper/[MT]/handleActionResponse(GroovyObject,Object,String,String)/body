{
  boolean viewNameBlank=(viewName == null || viewName.length() == 0);
  if (returnValue == null) {
    if (viewNameBlank) {
      return null;
    }
 else {
      return new ModelAndView(viewName,new BeanMap(controller));
    }
  }
 else   if (returnValue instanceof Map) {
    removeProxiesFromModelObjects((Map)returnValue);
    if (viewNameBlank) {
      throw new NoViewNameDefinedException("Map instance returned by and no view name specified for closure on property [" + closurePropertyName + "] in controller ["+ controller.getClass()+ "]!");
    }
 else {
      Map returnMap=(Map)returnValue;
      returnMap.put(ControllerDynamicMethods.ERRORS_PROPERTY,controller.getProperty(ControllerDynamicMethods.ERRORS_PROPERTY));
      if (!this.chainModel.isEmpty()) {
        this.chainModel.putAll(returnMap);
        return new ModelAndView(viewName,this.chainModel);
      }
 else {
        return new ModelAndView(viewName,returnMap);
      }
    }
  }
 else   if (returnValue instanceof ModelAndView) {
    ModelAndView modelAndView=(ModelAndView)returnValue;
    Map modelMap=modelAndView.getModel();
    removeProxiesFromModelObjects(modelMap);
    modelAndView.addObject(ControllerDynamicMethods.ERRORS_PROPERTY,controller.getProperty(ControllerDynamicMethods.ERRORS_PROPERTY));
    if (!this.chainModel.isEmpty()) {
      this.chainModel.putAll(modelMap);
      modelAndView.addAllObjects(this.chainModel);
    }
    if (modelAndView.getView() == null && modelAndView.getViewName() == null) {
      if (viewNameBlank) {
        throw new NoViewNameDefinedException("ModelAndView instance returned by and no view name defined by nor for closure on property [" + closurePropertyName + "] in controller ["+ controller.getClass()+ "]!");
      }
 else {
        modelAndView.setViewName(viewName);
      }
    }
    return modelAndView;
  }
 else {
    Map modelMap=new BeanMap(controller);
    ModelAndView modelAndView=new ModelAndView(viewName,modelMap);
    if (!this.chainModel.isEmpty()) {
      this.chainModel.putAll(modelMap);
      modelAndView.addAllObjects(this.chainModel);
    }
    return modelAndView;
  }
}
