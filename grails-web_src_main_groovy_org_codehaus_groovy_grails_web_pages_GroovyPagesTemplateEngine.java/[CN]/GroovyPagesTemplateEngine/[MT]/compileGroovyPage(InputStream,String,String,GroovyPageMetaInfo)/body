{
  GroovyClassLoader groovyClassLoader=findOrInitGroovyClassLoader();
  Class<?> scriptClass;
  try {
    String groovySource=DefaultGroovyMethods.getText(in,GroovyPageParser.GROOVY_SOURCE_CHAR_ENCODING);
    scriptClass=groovyClassLoader.parseClass(groovySource,name);
  }
 catch (  CompilationFailedException e) {
    LOG.error("Compilation error compiling GSP [" + name + "]:"+ e.getMessage(),e);
    int lineNumber=GrailsExceptionResolver.extractLineNumber(e);
    final int[] lineMappings=metaInfo.getLineNumbers();
    if (lineNumber > 0 && lineNumber < lineMappings.length) {
      lineNumber=lineMappings[lineNumber - 1];
    }
    String relativePageName=DefaultErrorsPrinter.makeRelativeIfPossible(pageName);
    throw new GroovyPagesException("Could not parse script [" + relativePageName + "]: "+ e.getMessage(),e,lineNumber,pageName);
  }
catch (  IOException e) {
    String relativePageName=DefaultErrorsPrinter.makeRelativeIfPossible(pageName);
    throw new GroovyPagesException("IO exception parsing script [" + relativePageName + "]: "+ e.getMessage(),e);
  }
  GroovyPagesMetaUtils.registerMethodMissingForGSP(scriptClass,tagLibraryLookup);
  return scriptClass;
}
