{
  if (tagNamespace.equals(TEMPLATE_NAMESPACE)) {
    final String tmpTagName=tagName;
    final Map tmpAttrs=attrs;
    tagName="render";
    tagNamespace=DEFAULT_NAMESPACE;
    attrs=new HashMap(){
{
        put("model",tmpAttrs);
        put("template",tmpTagName);
      }
    }
;
  }
 else   if (tagNamespace.equals(LINK_NAMESPACE)) {
    final String tmpTagName=tagName;
    final Map tmpAttrs=attrs;
    tagName="link";
    tagNamespace=DEFAULT_NAMESPACE;
    attrs=new HashMap(){
{
        if (tmpAttrs.size() > 0) {
          put("params",tmpAttrs);
        }
        put("mapping",tmpTagName);
      }
    }
;
  }
  boolean prevUsed=out.resetUsed();
  try {
    if (gspTagLibraryLookup.hasNamespace(tagNamespace)) {
      GroovyObject tagLib=getTagLib(tagName,tagNamespace);
      if (tagLib != null) {
        Object tagLibProp=tagLib.getProperty(tagName);
        if (tagLibProp instanceof Closure) {
          Closure tag=(Closure)((Closure)tagLibProp).clone();
          Object tagresult=null;
switch (tag.getParameterTypes().length) {
case 1:
            tagresult=tag.call(new Object[]{attrs});
          if (tagresult != null && !(tagresult instanceof Writer) && !out.isUsed()) {
            out.print(tagresult);
          }
        if (body != null && body != EMPTY_BODY_CLOSURE) {
          body.call();
        }
      break;
case 2:
    if (tag.getParameterTypes().length == 2) {
      tagresult=tag.call(new Object[]{attrs,(body != null) ? body : EMPTY_BODY_CLOSURE});
      if (tagresult != null && !(tagresult instanceof Writer) && !out.isUsed()) {
        out.print(tagresult);
      }
    }
  break;
}
}
 else {
throw new GrailsTagException("Tag [" + tagName + "] does not exist in tag library ["+ tagLib.getClass().getName()+ "]",getGroovyPageFileName(),lineNumber);
}
}
 else {
throw new GrailsTagException("Tag [" + tagName + "] does not exist. No tag library found for namespace: "+ tagNamespace,getGroovyPageFileName(),lineNumber);
}
}
 else {
StringBuilder plainTag=new StringBuilder();
String fullTagName=tagNamespace + ":" + tagName;
plainTag.append("<").append(fullTagName);
for (Object o : attrs.entrySet()) {
Map.Entry entry=(Map.Entry)o;
plainTag.append(" ").append(entry.getKey()).append("=\"").append(entry.getValue()).append("\"");
}
plainTag.append(">");
out.write(plainTag.toString());
if (body != null) {
Object bodyOutput=body.call();
if (bodyOutput != null) out.write(bodyOutput.toString());
}
out.write("</" + fullTagName + ">");
}
}
 catch (Exception e) {
if (LOG.isTraceEnabled()) {
LOG.trace("Full exception for problem at " + getGroovyPageFileName() + ":"+ lineNumber,e);
}
Throwable cause=GrailsExceptionResolver.getRootCause(e);
if (cause instanceof GrailsTagException) {
throw new GrailsTagException(cause.getMessage(),getGroovyPageFileName(),lineNumber);
}
 else {
throw new GrailsTagException("Error executing tag <" + tagNamespace + ":"+ tagName+ ">: "+ e.getMessage(),e,getGroovyPageFileName(),lineNumber);
}
}
 finally {
if (prevUsed) {
out.setUsed(true);
}
}
}
