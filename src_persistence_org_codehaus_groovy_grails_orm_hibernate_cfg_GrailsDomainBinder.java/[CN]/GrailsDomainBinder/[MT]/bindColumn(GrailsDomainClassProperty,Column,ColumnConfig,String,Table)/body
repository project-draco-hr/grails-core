{
  Class userType=getUserType(grailsProp);
  String columnName=getColumnNameForPropertyAndPath(grailsProp,path,cc);
  if (grailsProp.isAssociation() && userType == null) {
    if (column.getName() == null) {
      if (!grailsProp.isBidirectional() && grailsProp.isOneToMany()) {
        String prefix=namingStrategy.classToTableName(grailsProp.getDomainClass().getName());
        column.setName(prefix + UNDERSCORE + columnName+ FOREIGN_KEY_SUFFIX);
      }
 else {
        if (grailsProp.isInherited() && isBidirectionalManyToOne(grailsProp)) {
          column.setName(namingStrategy.propertyToColumnName(grailsProp.getDomainClass().getName()) + '_' + columnName+ FOREIGN_KEY_SUFFIX);
        }
 else {
          column.setName(columnName + FOREIGN_KEY_SUFFIX);
        }
      }
    }
    if (grailsProp.isManyToMany())     column.setNullable(false);
 else     if (grailsProp.isOneToOne() && grailsProp.isBidirectional() && !grailsProp.isOwningSide()) {
      column.setNullable(true);
    }
 else {
      column.setNullable(grailsProp.isOptional());
    }
  }
 else {
    column.setName(columnName);
    column.setNullable(grailsProp.isOptional());
    ConstrainedProperty constrainedProperty=getConstrainedProperty(grailsProp);
    if (constrainedProperty != null) {
      if (String.class.isAssignableFrom(grailsProp.getType()) || byte[].class.isAssignableFrom(grailsProp.getType())) {
        bindStringColumnConstraints(column,constrainedProperty);
      }
      if (Number.class.isAssignableFrom(grailsProp.getType())) {
        bindNumericColumnConstraints(column,constrainedProperty);
      }
    }
  }
  ConstrainedProperty cp=getConstrainedProperty(grailsProp);
  if (cp != null && cp.hasAppliedConstraint(UniqueConstraint.UNIQUE_CONSTRAINT)) {
    UniqueConstraint uc=(UniqueConstraint)cp.getAppliedConstraint(UniqueConstraint.UNIQUE_CONSTRAINT);
    if (uc != null && uc.isUnique()) {
      if (!uc.isUniqueWithinGroup()) {
        column.setUnique(true);
      }
 else       if (uc.getUniquenessGroup().size() > 0) {
        createKeyForProps(grailsProp,path,table,columnName,uc.getUniquenessGroup());
      }
    }
  }
 else {
    Object val=cp != null ? cp.getMetaConstraintValue(UniqueConstraint.UNIQUE_CONSTRAINT) : null;
    if (val instanceof Boolean) {
      column.setUnique(((Boolean)val).booleanValue());
    }
 else     if (val instanceof String) {
      createKeyForProps(grailsProp,path,table,columnName,Arrays.asList(new String[]{(String)val}));
    }
 else     if (val instanceof List && ((List)val).size() > 0) {
      createKeyForProps(grailsProp,path,table,columnName,(List)val);
    }
  }
  bindIndex(column,cc,table);
  if (!grailsProp.getDomainClass().isRoot()) {
    if (LOG.isDebugEnabled())     LOG.debug("[GrailsDomainBinder] Sub class property [" + grailsProp.getName() + "] for column name ["+ column.getName()+ "] in table ["+ table.getName()+ "] set to nullable");
    column.setNullable(true);
  }
  if (LOG.isDebugEnabled())   LOG.debug("[GrailsDomainBinder] bound property [" + grailsProp.getName() + "] to column name ["+ column.getName()+ "] in table ["+ table.getName()+ "]");
}
