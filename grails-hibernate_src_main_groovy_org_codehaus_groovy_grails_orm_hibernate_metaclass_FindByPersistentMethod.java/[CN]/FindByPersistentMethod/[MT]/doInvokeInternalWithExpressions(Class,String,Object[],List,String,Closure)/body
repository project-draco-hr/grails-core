{
  final String operator=OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;
  return getHibernateTemplate().execute(new HibernateCallback<Object>(){
    public Object doInHibernate(    Session session) throws HibernateException, SQLException {
      Criteria crit=getCriteria(session,additionalCriteria,clazz);
      if (arguments.length > 0) {
        if (arguments[0] instanceof Map<?,?>) {
          Map<?,?> argMap=(Map<?,?>)arguments[0];
          GrailsHibernateUtil.populateArgumentsForCriteria(clazz,crit,argMap);
          if (!argMap.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH)) {
            crit.setMaxResults(1);
          }
        }
      }
      if (operator.equals(OPERATOR_OR)) {
        if (firstExpressionIsRequiredBoolean()) {
          GrailsMethodExpression expression=(GrailsMethodExpression)expressions.remove(0);
          crit.add(expression.getCriterion());
        }
        Disjunction dis=Restrictions.disjunction();
        for (        Object expression : expressions) {
          GrailsMethodExpression current=(GrailsMethodExpression)expression;
          dis.add(current.getCriterion());
        }
        crit.add(dis);
      }
 else {
        for (        Object expression : expressions) {
          GrailsMethodExpression current=(GrailsMethodExpression)expression;
          crit.add(current.getCriterion());
        }
      }
      final List<?> list=crit.list();
      if (!list.isEmpty()) {
        return GrailsHibernateUtil.unwrapIfProxy(list.get(0));
      }
      return null;
    }
  }
);
}
