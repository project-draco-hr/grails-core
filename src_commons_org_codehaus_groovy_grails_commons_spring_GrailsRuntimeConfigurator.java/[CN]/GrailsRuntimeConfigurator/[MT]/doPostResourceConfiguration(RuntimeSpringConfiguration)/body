{
  try {
    Resource springResources=parent.getResource(GrailsRuntimeConfigurator.SPRING_RESOURCES_XML);
    Resource groovySpringResources=parent.getResource(GrailsRuntimeConfigurator.SPRING_RESOURCES_GROOVY);
    if (springResources.exists()) {
      LOG.debug("[RuntimeConfiguration] Configuring additional beans from " + springResources.getURL());
      XmlBeanFactory xmlBf=new XmlBeanFactory(springResources);
      ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
      xmlBf.setBeanClassLoader(classLoader);
      String[] beanNames=xmlBf.getBeanDefinitionNames();
      LOG.debug("[RuntimeConfiguration] Found [" + beanNames.length + "] beans to configure");
      for (int k=0; k < beanNames.length; k++) {
        BeanDefinition bd=xmlBf.getBeanDefinition(beanNames[k]);
        final String beanClassName=bd.getBeanClassName();
        Class beanClass=beanClassName == null ? null : ClassUtils.forName(beanClassName,classLoader);
        if (SESSION_FACTORY_BEAN.equals(beanNames[k])) {
          Class configurableLocalSessionFactoryBeanClass=org.codehaus.groovy.grails.orm.hibernate.ConfigurableLocalSessionFactoryBean.class;
          if (beanClass == null || !configurableLocalSessionFactoryBeanClass.isAssignableFrom(beanClass)) {
            LOG.warn("[RuntimeConfiguration] Found custom Hibernate SessionFactory bean defined in " + springResources.getURL() + ". The bean will not be configured as Grails needs to use its own specialized Hibernate SessionFactoryBean"+ " in order to inject dynamic bahavior into domain classes."+ " Use specialized Hibernate SessionFactoryBean '"+ configurableLocalSessionFactoryBeanClass+ "' for custom Hibernate SessionFactory bean defined in '"+ springResources.getURL()+ "' instead of '"+ beanClassName+ "' in order to configure custom Hibernate SessionFactory bean.");
            continue;
          }
        }
        springConfig.addBeanDefinition(beanNames[k],bd);
        if (beanClass != null) {
          if (BeanFactoryPostProcessor.class.isAssignableFrom(beanClass)) {
            ((ConfigurableApplicationContext)springConfig.getUnrefreshedApplicationContext()).addBeanFactoryPostProcessor((BeanFactoryPostProcessor)xmlBf.getBean(beanNames[k]));
          }
        }
      }
    }
 else     if (LOG.isDebugEnabled()) {
      LOG.debug("[RuntimeConfiguration] " + GrailsRuntimeConfigurator.SPRING_RESOURCES_XML + " not found. Skipping configuration.");
    }
    if (groovySpringResources.exists()) {
      BeanBuilder bb=new BeanBuilder(Thread.currentThread().getContextClassLoader());
      bb.setSpringConfig(springConfig);
      bb.loadBeans(groovySpringResources);
    }
  }
 catch (  Exception ex) {
    LOG.warn("[RuntimeConfiguration] Unable to perform post initialization config: " + SPRING_RESOURCES_XML,ex);
  }
}
