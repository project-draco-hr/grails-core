{
  System.setProperty("net.sf.ehcache.skipUpdateCheck","true");
  ExpandoMetaClass.enableGlobally();
  Metadata metadata=Metadata.getCurrent();
  if (metadata != null && metadata.isWarDeployed()) {
    Grape.setEnableAutoDownload(false);
    Grape.setEnableGrapes(false);
    Environment.cacheCurrentEnvironment();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("[GrailsContextLoader] Loading context. Creating parent application context");
  }
  WebApplicationContext ctx;
  try {
    ctx=super.initWebApplicationContext(servletContext);
    if (LOG.isDebugEnabled()) {
      LOG.debug("[GrailsContextLoader] Created parent application context");
    }
    application=ctx.getBean(GrailsApplication.APPLICATION_ID,GrailsApplication.class);
    final WebApplicationContext finalCtx=ctx;
    ShutdownOperations.addOperation(new Runnable(){
      public void run(){
        if (application != null) {
          ClassLoader classLoader=application.getClassLoader();
          if (classLoader instanceof GroovyClassLoader) {
            MetaClassRegistry metaClassRegistry=GroovySystem.getMetaClassRegistry();
            Class<?>[] loadedClasses=((GroovyClassLoader)classLoader).getLoadedClasses();
            for (            Class<?> loadedClass : loadedClasses) {
              metaClassRegistry.removeMetaClass(loadedClass);
            }
          }
        }
        GrailsPluginManager pluginManager=null;
        if (finalCtx.containsBean(GrailsPluginManager.BEAN_NAME)) {
          pluginManager=finalCtx.getBean(GrailsPluginManager.BEAN_NAME,GrailsPluginManager.class);
        }
        if (pluginManager != null) {
          try {
            pluginManager.shutdown();
          }
 catch (          Exception e) {
            new DefaultStackTraceFilterer().filter(e);
            LOG.error("Error occurred shutting down plug-in manager: " + e.getMessage(),e);
          }
        }
      }
    }
);
    ctx=GrailsConfigUtils.configureWebApplicationContext(servletContext,ctx);
    GrailsConfigUtils.executeGrailsBootstraps(application,ctx,servletContext);
  }
 catch (  Throwable e) {
    GrailsUtil.deepSanitize(e);
    LOG.error("Error initializing the application: " + e.getMessage(),e);
    if (Environment.isDevelopmentMode() && !Environment.isWarDeployed()) {
      if (System.getProperty("grails.disable.exit") == null) {
        System.exit(1);
      }
    }
    if (e instanceof BeansException)     throw (BeansException)e;
    throw new BootstrapException("Error executing bootstraps",e);
  }
  return ctx;
}
