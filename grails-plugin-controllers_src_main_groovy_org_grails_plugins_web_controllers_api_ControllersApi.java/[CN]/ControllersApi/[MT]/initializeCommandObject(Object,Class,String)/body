{
  final HttpServletRequest request=getRequest(controllerInstance);
  final DataBindingSource dataBindingSource=DataBindingUtils.createDataBindingSource(getGrailsApplication(controllerInstance),type,request);
  final DataBindingSource commandObjectBindingSource=WebMetaUtils.getCommandObjectBindingSourceForPrefix(commandObjectParameterName,dataBindingSource);
  Object commandObjectInstance=null;
  Object entityIdentifierValue=null;
  final boolean isDomainClass=DomainClassArtefactHandler.isDomainClass(type);
  if (isDomainClass) {
    entityIdentifierValue=commandObjectBindingSource.getIdentifierValue();
    if (entityIdentifierValue == null) {
      final GrailsWebRequest webRequest=GrailsWebRequest.lookup(request);
      entityIdentifierValue=webRequest != null ? webRequest.getParams().getIdentifier() : null;
    }
  }
  if (entityIdentifierValue instanceof String) {
    entityIdentifierValue=((String)entityIdentifierValue).trim();
    if ("".equals(entityIdentifierValue) || "null".equals(entityIdentifierValue)) {
      entityIdentifierValue=null;
    }
  }
  final HttpMethod requestMethod=HttpMethod.valueOf(request.getMethod());
  if (entityIdentifierValue != null) {
    commandObjectInstance=InvokerHelper.invokeStaticMethod(type,"get",entityIdentifierValue);
  }
 else   if (requestMethod == HttpMethod.POST || !isDomainClass) {
    commandObjectInstance=type.newInstance();
  }
  if (commandObjectInstance != null) {
    final boolean shouldDoDataBinding;
    if (entityIdentifierValue != null) {
switch (requestMethod) {
case PATCH:
case POST:
case PUT:
        shouldDoDataBinding=true;
      break;
default :
    shouldDoDataBinding=false;
}
}
 else {
shouldDoDataBinding=true;
}
if (shouldDoDataBinding) {
bindData(controllerInstance,commandObjectInstance,commandObjectBindingSource,Collections.EMPTY_MAP,null);
}
final ApplicationContext applicationContext=getApplicationContext(controllerInstance);
final AutowireCapableBeanFactory autowireCapableBeanFactory=applicationContext.getAutowireCapableBeanFactory();
autowireCapableBeanFactory.autowireBeanProperties(commandObjectInstance,AutowireCapableBeanFactory.AUTOWIRE_BY_NAME,false);
}
return commandObjectInstance;
}
