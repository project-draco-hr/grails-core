{
  StringBuilder buf=new StringBuilder();
  String optionalExtensionPattern=UrlMapping.OPTIONAL_EXTENSION_WILDCARD + '?';
  String optionalExtension=null;
  if (tokens.length > 0) {
    String lastToken=tokens[tokens.length - 1];
    hasOptionalExtension=lastToken.endsWith(optionalExtensionPattern);
    if (hasOptionalExtension) {
      int i=lastToken.indexOf(optionalExtensionPattern);
      optionalExtension=lastToken.substring(i,lastToken.length());
      tokens[tokens.length - 1]=lastToken.substring(0,i);
    }
  }
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i].trim();
    if (token.equals(SLASH)) {
      continue;
    }
    boolean isOptional=false;
    if (token.endsWith(QUESTION_MARK)) {
      if (optionalExtension != null) {
        urls.add(buf.toString() + optionalExtension);
      }
 else {
        urls.add(buf.toString());
      }
      buf.append(SLASH).append(token);
      isOptional=true;
    }
 else {
      buf.append(SLASH).append(token);
    }
    if (CAPTURED_WILDCARD.equals(token)) {
      if (isOptional) {
        optionalTokens.add(Boolean.TRUE);
      }
 else {
        optionalTokens.add(Boolean.FALSE);
      }
    }
    if (CAPTURED_DOUBLE_WILDCARD.equals(token)) {
      optionalTokens.add(Boolean.TRUE);
    }
  }
  if (optionalExtension != null) {
    urls.add(buf.toString() + optionalExtension);
  }
 else {
    urls.add(buf.toString());
  }
  Collections.reverse(urls);
}
