'\n\n runant.py\n\n    This script is a translation of the runant.pl written by Steve Loughran.\n    It runs ant with/out arguments, it should be quite portable (thanks to\n    the python os library)\n    This script has been tested with Python2.0/Win2K\n\n created:         2001-04-11\n author:          Pierre Dittgen pierre.dittgen@criltelecom.com\n\n Assumptions:\n\n - the "java" executable/script is on the command path\n'
import os, os.path, string, sys
debug = 0
if os.environ.has_key('ANT_HOME'):
    ANT_HOME = os.environ['ANT_HOME']
else:
    ANT_HOME = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))
ANT_LIB = os.path.join(ANT_HOME, 'lib')
JAVACMD = None
if (not os.environ.has_key('JAVACMD')):
    if os.environ.has_key('JAVA_HOME'):
        if (not os.path.exists(os.environ['JAVA_HOME'])):
            print 'Warning: JAVA_HOME is not defined correctly.'
        else:
            JAVACMD = os.path.join(os.environ['JAVA_HOME'], 'bin', 'java')
    else:
        print 'Warning: JAVA_HOME not set.'
else:
    JAVACMD = os.environ['JAVACMD']
if (not JAVACMD):
    JAVACMD = 'java'
launcher_jar = os.path.join(ANT_LIB, 'ant-launcher.jar')
if (not os.path.exists(launcher_jar)):
    print ('Unable to locate ant-launcher.jar. Expected to find it in %s' % ANT_LIB)
LOCALCLASSPATH = launcher_jar
if os.environ.has_key('LOCALCLASSPATH'):
    LOCALCLASSPATH += (os.pathsep + os.environ['LOCALCLASSPATH'])
ANT_OPTS = ''
if os.environ.has_key('ANT_OPTS'):
    ANT_OPTS = os.environ['ANT_OPTS']
OPTS = ''
if os.environ.has_key('JIKESPATH'):
    OPTS = ('-Djikes.class.path="%s"' % os.environ['JIKESPATH'])
ANT_ARGS = ''
if os.environ.has_key('ANT_ARGS'):
    ANT_ARGS = os.environ['ANT_ARGS']
CLASSPATH = ''
if os.environ.has_key('CLASSPATH'):
    CLASSPATH = os.environ['CLASSPATH']
cmdline = (('%s %s -classpath %s -Dant.home=%s %s ' + 'org.apache.tools.ant.launch.Launcher %s -lib %s %s') % (JAVACMD, ANT_OPTS, LOCALCLASSPATH, ANT_HOME, OPTS, ANT_ARGS, CLASSPATH, string.join(sys.argv[1:], ' ')))
if debug:
    print ('\n%s\n\n' % cmdline)
os.system(cmdline)
