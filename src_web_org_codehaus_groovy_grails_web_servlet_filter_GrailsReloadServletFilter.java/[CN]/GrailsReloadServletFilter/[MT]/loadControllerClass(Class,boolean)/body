{
  GrailsControllerClass controllerClass=application.addControllerClass(loadedClass);
  if (controllerClass != null) {
    if (isNew) {
      if (copyScript != null) {
        copyScript.cleanControllers();
        LOG.info("New controller added, re-generating web.xml");
        copyScript.generateWebXml();
      }
    }
 else {
      Properties mappings=new Properties();
      for (int i=0; i < application.getControllers().length; i++) {
        GrailsControllerClass simpleController=application.getControllers()[i];
        for (int x=0; x < simpleController.getURIs().length; x++) {
          if (!mappings.containsKey(simpleController.getURIs()[x]))           mappings.put(simpleController.getURIs()[x],SimpleGrailsController.APPLICATION_CONTEXT_ID);
        }
      }
      HotSwappableTargetSource urlMappingsTargetSource=(HotSwappableTargetSource)context.getBean(GrailsUrlHandlerMapping.APPLICATION_CONTEXT_TARGET_SOURCE);
      GrailsUrlHandlerMapping urlMappings=new GrailsUrlHandlerMapping();
      urlMappings.setApplicationContext(context);
      urlMappings.setMappings(mappings);
      String[] interceptorNames=context.getBeanNamesForType(HandlerInterceptor.class);
      String[] webRequestInterceptors=context.getBeanNamesForType(WebRequestInterceptor.class);
      HandlerInterceptor[] interceptors=new HandlerInterceptor[interceptorNames.length + webRequestInterceptors.length];
      int j=0;
      for (int i=0; i < interceptorNames.length; i++) {
        String interceptorName=interceptorNames[i];
        interceptors[i]=(HandlerInterceptor)context.getBean(interceptorName);
        j=i + 1;
      }
      for (int i=0; i < webRequestInterceptors.length; i++) {
        j=i + j;
        interceptors[j]=new WebRequestHandlerInterceptorAdapter((WebRequestInterceptor)context.getBean(webRequestInterceptors[i]));
      }
      LOG.info("Re-adding " + interceptors.length + " interceptors to mapping");
      urlMappings.setInterceptors(interceptors);
      urlMappings.initApplicationContext();
      urlMappingsTargetSource.swap(urlMappings);
      HotSwappableTargetSource controllerTargetSource=(HotSwappableTargetSource)context.getBean(controllerClass.getFullName() + "TargetSource");
      controllerTargetSource.swap(controllerClass);
    }
  }
}
