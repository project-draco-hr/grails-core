{
  GroovyClassLoader gcl=new GroovyClassLoader();
  Class<?> dc=gcl.parseClass("class Test { Long id; Long version; }");
  Class<?> c=gcl.parseClass("class TestController { def list = {} }");
  GrailsApplication app=new DefaultGrailsApplication(new Class[]{dc,c},gcl);
  MockApplicationContext parent=new MockApplicationContext();
  parent.registerMockBean(GrailsApplication.APPLICATION_ID,app);
  parent.registerMockBean("classLoader",gcl);
  app.setApplicationContext(parent);
  GrailsRuntimeConfigurator conf=new GrailsRuntimeConfigurator(app,parent);
  DefaultGrailsPluginManager manager=new DefaultGrailsPluginManager(new Class[0],app);
  manager.setParentApplicationContext(parent);
  parent.registerMockBean("manager",manager);
  conf.setPluginManager(manager);
  ApplicationContext ctx=conf.configure(new MockServletContext());
  assertNotNull(ctx);
  assertTrue(ctx.getBean(GrailsApplication.CLASS_LOADER_BEAN) instanceof GroovyClassLoader);
  GrailsExceptionResolver er=getBean(ctx,GrailsApplication.EXCEPTION_HANDLER_BEAN);
  assertNotNull(er);
  ModelAndView mv=er.resolveException(new MockHttpServletRequest(),new MockHttpServletResponse(),null,new Exception());
  assertEquals("/error",mv.getViewName());
  assertTrue(ctx.getBean(GrailsApplication.MULTIPART_RESOLVER_BEAN) instanceof CommonsMultipartResolver);
  MessageSource ms=getBean(ctx,GrailsApplication.MESSAGE_SOURCE_BEAN);
  assertNotNull(ms);
  GrailsDomainClass domainClass=getBean(ctx,"TestDomainClass");
  assertNotNull(domainClass);
  assertEquals("Test",domainClass.getShortName());
  Class<?> persistentClass=getBean(ctx,"TestPersistentClass");
  assertEquals(dc,persistentClass);
  GrailsDomainClassValidator validator=getBean(ctx,"TestValidator");
  assertTrue(validator.supports(dc));
  GroovyObject controller=getBean(ctx,"TestController");
  assertEquals(c,controller.getClass());
}
