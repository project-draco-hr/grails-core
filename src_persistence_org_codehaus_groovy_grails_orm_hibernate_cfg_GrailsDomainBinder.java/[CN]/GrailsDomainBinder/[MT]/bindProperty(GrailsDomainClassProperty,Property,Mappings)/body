{
  prop.setName(grailsProperty.getName());
  prop.setInsertable(true);
  prop.setUpdateable(true);
  prop.setPropertyAccessorName(mappings.getDefaultAccess());
  prop.setOptional(grailsProperty.isOptional());
  String cascadeStrategy="none";
  GrailsDomainClass domainClass=grailsProperty.getDomainClass();
  if (grailsProperty.isAssociation()) {
    GrailsDomainClass referenced=grailsProperty.getReferencedDomainClass();
    if (grailsProperty.isOneToOne()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_ALL;
    }
 else     if (grailsProperty.isOneToMany()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_ALL;
 else       cascadeStrategy=CASCADE_SAVE_UPDATE;
    }
 else     if (grailsProperty.isManyToMany()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_SAVE_UPDATE;
    }
 else     if (grailsProperty.isManyToOne()) {
      if (referenced != null && referenced.isOwningClass(domainClass.getClazz()))       cascadeStrategy=CASCADE_ALL;
 else       cascadeStrategy=CASCADE_MERGE;
    }
    logCascadeMapping(grailsProperty,cascadeStrategy,referenced);
    prop.setCascade(cascadeStrategy);
  }
 else   if (Map.class.isAssignableFrom(grailsProperty.getType())) {
    GrailsDomainClass referenced=grailsProperty.getReferencedDomainClass();
    if (referenced != null && referenced.isOwningClass(grailsProperty.getDomainClass().getClazz())) {
      cascadeStrategy=CASCADE_ALL;
    }
 else {
      cascadeStrategy=CASCADE_SAVE_UPDATE;
    }
    logCascadeMapping(grailsProperty,cascadeStrategy,referenced);
    prop.setCascade(cascadeStrategy);
  }
  prop.setLazy(true);
}
