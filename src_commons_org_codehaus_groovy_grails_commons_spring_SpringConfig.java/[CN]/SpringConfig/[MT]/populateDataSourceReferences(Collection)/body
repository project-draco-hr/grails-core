{
  boolean dependsOnHsqldbServer=false;
  GrailsDataSource grailsDataSource=application.getGrailsDataSource();
  if (grailsDataSource != null) {
    Bean dataSource;
    if (grailsDataSource.isPooled()) {
      dataSource=SpringConfigUtils.createSingletonBean(BasicDataSource.class);
      dataSource.setDestroyMethod("close");
    }
 else {
      dataSource=SpringConfigUtils.createSingletonBean(DriverManagerDataSource.class);
    }
    dataSource.setProperty("driverClassName",SpringConfigUtils.createLiteralValue(grailsDataSource.getDriverClassName()));
    dataSource.setProperty("url",SpringConfigUtils.createLiteralValue(grailsDataSource.getUrl()));
    dataSource.setProperty("username",SpringConfigUtils.createLiteralValue(grailsDataSource.getUsername()));
    dataSource.setProperty("password",SpringConfigUtils.createLiteralValue(grailsDataSource.getPassword()));
    beanReferences.add(SpringConfigUtils.createBeanReference("dataSource",dataSource));
  }
 else {
    Bean dataSource=SpringConfigUtils.createSingletonBean(BasicDataSource.class);
    dataSource.setDestroyMethod("close");
    dataSource.setProperty("driverClassName",SpringConfigUtils.createLiteralValue("org.hsqldb.jdbcDriver"));
    dataSource.setProperty("url",SpringConfigUtils.createLiteralValue("jdbc:hsqldb:hsql://localhost:9101/"));
    dataSource.setProperty("username",SpringConfigUtils.createLiteralValue("sa"));
    dataSource.setProperty("password",SpringConfigUtils.createLiteralValue(""));
    beanReferences.add(SpringConfigUtils.createBeanReference("dataSource",dataSource));
    Bean hsqldbServer=SpringConfigUtils.createSingletonBean(ServerBean.class);
    hsqldbServer.setProperty("dataSource",SpringConfigUtils.createBeanReference("dataSource"));
    Map hsqldbProperties=new HashMap();
    hsqldbProperties.put("server.port","9101");
    hsqldbProperties.put("server.database.0","mem:temp");
    hsqldbServer.setProperty("serverProperties",SpringConfigUtils.createProperties(hsqldbProperties));
    beanReferences.add(SpringConfigUtils.createBeanReference("hsqldbServer",hsqldbServer));
    dependsOnHsqldbServer=true;
  }
  Map vendorNameDialectMappings=new HashMap();
  vendorNameDialectMappings.put("HSQL Database Engine",HSQLDialect.class.getName());
  vendorNameDialectMappings.put("MySQL",MySQLDialect.class.getName());
  Bean dialectDetector=SpringConfigUtils.createSingletonBean(HibernateDialectDetectorFactoryBean.class);
  dialectDetector.setProperty("dataSource",SpringConfigUtils.createBeanReference("dataSource"));
  dialectDetector.setProperty("vendorNameDialectMappings",SpringConfigUtils.createProperties(vendorNameDialectMappings));
  if (dependsOnHsqldbServer) {
    Collection dependsOn=new ArrayList();
    dependsOn.add(SpringConfigUtils.createBeanReference("hsqldbServer"));
    dialectDetector.setDependsOn(dependsOn);
  }
  Map hibernatePropertiesMap=new HashMap();
  hibernatePropertiesMap.put(SpringConfigUtils.createLiteralValue("hibernate.dialect"),dialectDetector);
  if (grailsDataSource == null) {
    hibernatePropertiesMap.put(SpringConfigUtils.createLiteralValue("hibernate.hbm2ddl.auto"),SpringConfigUtils.createLiteralValue("create-drop"));
  }
 else {
    if (grailsDataSource.getDbCreate() != null) {
      hibernatePropertiesMap.put(SpringConfigUtils.createLiteralValue("hibernate.hbm2ddl.auto"),SpringConfigUtils.createLiteralValue(grailsDataSource.getDbCreate()));
    }
  }
  Bean hibernateProperties=SpringConfigUtils.createSingletonBean(MapToPropertiesFactoryBean.class);
  hibernateProperties.setProperty("map",SpringConfigUtils.createMap(hibernatePropertiesMap));
  Bean grailsClassLoader=SpringConfigUtils.createSingletonBean(MethodInvokingFactoryBean.class);
  grailsClassLoader.setProperty("targetObject",SpringConfigUtils.createBeanReference("grailsApplication"));
  grailsClassLoader.setProperty("targetMethod",SpringConfigUtils.createLiteralValue("getClassLoader"));
  Bean localSessionFactoryBean=SpringConfigUtils.createSingletonBean(ConfigurableLocalSessionFactoryBean.class);
  localSessionFactoryBean.setProperty("dataSource",SpringConfigUtils.createBeanReference("dataSource"));
  ClassLoader cl=this.application.getClassLoader();
  URL hibernateConfig=cl.getResource("hibernate.cfg.xml");
  if (hibernateConfig != null) {
    localSessionFactoryBean.setProperty("configLocation",SpringConfigUtils.createLiteralValue("hibernate.cfg.xml"));
  }
  localSessionFactoryBean.setProperty("hibernateProperties",hibernateProperties);
  localSessionFactoryBean.setProperty("grailsApplication",SpringConfigUtils.createBeanReference("grailsApplication"));
  localSessionFactoryBean.setProperty("classLoader",grailsClassLoader);
  beanReferences.add(SpringConfigUtils.createBeanReference("sessionFactory",localSessionFactoryBean));
  Bean transactionManager=SpringConfigUtils.createSingletonBean(HibernateTransactionManager.class);
  transactionManager.setProperty("sessionFactory",SpringConfigUtils.createBeanReference("sessionFactory"));
  beanReferences.add(SpringConfigUtils.createBeanReference("transactionManager",transactionManager));
}
