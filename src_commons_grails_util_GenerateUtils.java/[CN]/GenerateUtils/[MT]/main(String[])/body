{
  if (args.length < 2)   return;
  String type=args[0];
  String domainClassName=args[1];
  ApplicationContext parent=new ClassPathXmlApplicationContext("applicationContext.xml");
  GrailsApplication application=(DefaultGrailsApplication)parent.getBean("grailsApplication",DefaultGrailsApplication.class);
  GrailsDomainClass domainClass=findInApplication(application,domainClassName);
  if (domainClass == null) {
    GrailsRuntimeConfigurator config=new GrailsRuntimeConfigurator(application,parent);
    ConfigurableApplicationContext appCtx=(ConfigurableApplicationContext)config.configure(new MockServletContext());
    Assert.notNull(appCtx);
  }
  domainClass=findInApplication(application,domainClassName);
  if (domainClass == null) {
    LOG.debug("Unable to generate [" + type + "] domain class not found for name ["+ domainClassName+ "]");
    System.exit(0);
  }
  try {
    GroovyClassLoader gcl=new GroovyClassLoader(Thread.currentThread().getContextClassLoader());
    GrailsTemplateGenerator generator=(GrailsTemplateGenerator)gcl.parseClass(gcl.getResourceAsStream("org/codehaus/groovy/grails/scaffolding/DefaultGrailsTemplateGenerator.groovy")).newInstance();
    if (!CONTROLLER.equals(type) && !VIEWS.equals(type) && !ALL.equals(type)) {
      LOG.info("Grails was unable to generate templates for unsupported type [" + type + "]");
    }
 else {
      if (VIEWS.equals(type) || ALL.equals(type)) {
        LOG.info("Generating views for domain class [" + domainClass.getName() + "]");
        generator.generateViews(domainClass,".");
      }
      if (CONTROLLER.equals(type) || ALL.equals(type)) {
        LOG.info("Generating controller for domain class [" + domainClass.getName() + "]");
        generator.generateController(domainClass,".");
      }
    }
  }
  finally {
    System.exit(0);
  }
}
