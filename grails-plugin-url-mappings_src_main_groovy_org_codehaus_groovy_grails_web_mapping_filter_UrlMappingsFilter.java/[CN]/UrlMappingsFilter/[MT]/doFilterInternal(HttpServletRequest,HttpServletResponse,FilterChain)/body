{
  UrlMappingsHolder holder=WebUtils.lookupUrlMappings(getServletContext());
  String uri=urlHelper.getPathWithinApplication(request);
  if (!"/".equals(uri) && noControllers() && noRegexMappings(holder)) {
    processFilterChain(request,response,filterChain);
    return;
  }
  if (isUriExcluded(holder,uri)) {
    processFilterChain(request,response,filterChain);
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Executing URL mapping filter...");
    LOG.debug(holder);
  }
  if (areFileExtensionsEnabled()) {
    String format=WebUtils.getFormatFromURI(uri,mimeTypes);
    if (format != null) {
      MimeType[] configuredMimes=mimeTypes != null ? mimeTypes : MimeType.getConfiguredMimeTypes();
      for (      MimeType configuredMime : configuredMimes) {
        if (configuredMime.getExtension().equals(format)) {
          request.setAttribute(GrailsApplicationAttributes.RESPONSE_FORMAT,format);
          uri=uri.substring(0,(uri.length() - format.length() - 1));
          break;
        }
      }
    }
  }
  GrailsWebRequest webRequest=(GrailsWebRequest)request.getAttribute(GrailsApplicationAttributes.WEB_REQUEST);
  UrlMappingInfo[] urlInfos=holder.matchAll(uri);
  WrappedResponseHolder.setWrappedResponse(response);
  boolean dispatched=false;
  try {
    Map backupParameters;
    try {
      backupParameters=new HashMap(webRequest.getParams());
    }
 catch (    Exception e) {
      LOG.error("Error creating params object: " + e.getMessage(),e);
      backupParameters=Collections.EMPTY_MAP;
    }
    for (    UrlMappingInfo info : urlInfos) {
      if (info != null) {
        webRequest.getParams().clear();
        webRequest.getParams().putAll(backupParameters);
        final String viewName;
        try {
          info.configure(webRequest);
          UrlConverter urlConverterToUse=urlConverter;
          GrailsApplication grailsApplicationToUse=application;
          GrailsClass controller=WebUtils.getConfiguredControllerForUrlMappingInfo(webRequest,info,urlConverterToUse,grailsApplicationToUse);
          if (controller == null)           continue;
        }
 catch (        Exception e) {
          if (e instanceof MultipartException) {
            reapplySitemesh(request);
            throw ((MultipartException)e);
          }
          LOG.error("Error when matching URL mapping [" + info + "]:"+ e.getMessage(),e);
          continue;
        }
        dispatched=true;
        if (!WAR_DEPLOYED) {
          checkDevelopmentReloadingState(request);
        }
        request=checkMultipart(request);
        String nameOfview=info.getViewName();
        if (nameOfview == null || nameOfview.endsWith(GSP_SUFFIX) || nameOfview.endsWith(JSP_SUFFIX)) {
          if (info.isParsingRequest()) {
            webRequest.informParameterCreationListeners();
          }
          String forwardUrl=WebUtils.forwardRequestForUrlMappingInfo(request,response,info);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Matched URI [" + uri + "] to URL mapping ["+ info+ "], forwarding to ["+ forwardUrl+ "] with response ["+ response.getClass()+ "]");
          }
        }
 else {
          if (!renderViewForUrlMappingInfo(request,response,info,nameOfview)) {
            dispatched=false;
          }
        }
        break;
      }
    }
  }
  finally {
    WrappedResponseHolder.setWrappedResponse(null);
  }
  if (!dispatched) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("No match found, processing remaining filter chain.");
    }
    processFilterChain(request,response,filterChain);
  }
}
