{
  if (eventScript == null) {
    return;
  }
  try {
    Class<?> scriptClass=classLoader.parseClass(eventScript);
    if (scriptClass == null) {
      System.err.println("Could not load event script (script may be empty): " + eventScript);
      return;
    }
    Script script=(Script)scriptClass.newInstance();
    script.setBinding(new Binding(binding.getVariables()){
      @Override public void setVariable(      String var,      Object o){
        final Matcher matcher=EVENT_NAME_PATTERN.matcher(var);
        if (matcher.matches() && (o instanceof Closure)) {
          String eventName=matcher.group(1);
          List<Closure> hooks=globalEventHooks.get(eventName);
          if (hooks == null) {
            hooks=new ArrayList<Closure>();
            globalEventHooks.put(eventName,hooks);
          }
          hooks.add((Closure)o);
        }
        super.setVariable(var,o);
      }
    }
);
    script.run();
  }
 catch (  Throwable e) {
    org.codehaus.groovy.runtime.StackTraceUtils.deepSanitize(e);
    e.printStackTrace();
    System.out.println("Error loading event script from file [" + eventScript + "] "+ e.getMessage());
  }
}
