{
  Closure body=getBodyClosure(bodyClosureIndex);
  if (tagNamespace.equals(TEMPLATE_NAMESPACE)) {
    final String tmpTagName=tagName;
    final Map tmpAttrs=attrs;
    tagName="render";
    tagNamespace=DEFAULT_NAMESPACE;
    attrs=CollectionUtils.newMap("model",tmpAttrs,"template",tmpTagName);
  }
 else   if (tagNamespace.equals(LINK_NAMESPACE)) {
    final String tmpTagName=tagName;
    final Map tmpAttrs=attrs;
    tagName="link";
    tagNamespace=DEFAULT_NAMESPACE;
    attrs=CollectionUtils.newMap("mapping",tmpTagName);
    if (!tmpAttrs.isEmpty()) {
      attrs.put("params",tmpAttrs);
    }
  }
  try {
    GroovyObject tagLib=getTagLib(tagNamespace,tagName);
    if (tagLib != null || (gspTagLibraryLookup != null && gspTagLibraryLookup.hasNamespace(tagNamespace))) {
      if (tagLib != null) {
        boolean returnsObject=gspTagLibraryLookup.doesTagReturnObject(tagNamespace,tagName);
        Object tagLibClosure=tagLib.getProperty(tagName);
        if (tagLibClosure instanceof Closure) {
          invokeTagLibClosure((Closure)tagLibClosure,attrs,body,returnsObject);
        }
 else {
          throw new GrailsTagException("Tag [" + tagName + "] does not exist in tag library ["+ tagLib.getClass().getName()+ "]",getGroovyPageFileName(),lineNumber);
        }
      }
 else {
        throw new GrailsTagException("Tag [" + tagName + "] does not exist. No tag library found for namespace: "+ tagNamespace,getGroovyPageFileName(),lineNumber);
      }
    }
 else {
      templateOut.append('<').append(tagNamespace).append(':').append(tagName);
      for (      Object o : attrs.entrySet()) {
        Map.Entry entry=(Map.Entry)o;
        templateOut.append(' ');
        templateOut.append(entry.getKey()).append('=');
        String value=String.valueOf(entry.getValue());
        boolean containsQuotes=(value.indexOf('"') > -1);
        boolean containsSingleQuote=(value.indexOf('\'') > -1);
        if (containsQuotes && !containsSingleQuote) {
          templateOut.append('\'').append(value).append('\'');
        }
 else         if (containsQuotes & containsSingleQuote) {
          templateOut.append('\"').append(value.replaceAll("\"","&quot;")).append('\"');
        }
 else {
          templateOut.append('\"').append(value).append('\"');
        }
      }
      templateOut.append('>');
      if (body != null) {
        Object bodyOutput=body.call();
        if (bodyOutput != null)         templateOut.print(bodyOutput);
      }
      templateOut.append("</").append(tagNamespace).append(':').append(tagName).append('>');
    }
  }
 catch (  Throwable e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Full exception for problem at " + getGroovyPageFileName() + ":"+ lineNumber,e);
    }
    if (tagName.matches("capture(Body|Head|Meta|Title|Component)")) {
      RuntimeException rte=GrailsExceptionResolver.getFirstRuntimeException(e);
      if (rte == null) {
        throwRootCause(tagName,tagNamespace,lineNumber,e);
      }
 else {
        throw rte;
      }
    }
 else {
      throwRootCause(tagName,tagNamespace,lineNumber,e);
    }
  }
}
