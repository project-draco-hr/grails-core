{
  if (methodName.equals("invokeTag"))   return super.invokeMethod(methodName,args);
  if (methodName.equals("fromHtml"))   return super.invokeMethod(methodName,args);
  Map attrs=null;
  Object body=null;
  GroovyObject tagLib=getTagLib(methodName);
  GrailsWebRequest webRequest=(GrailsWebRequest)getBinding().getVariable(WEB_REQUEST);
  Writer originalOut=webRequest.getOut();
  try {
    if (tagLib != null) {
      if (args instanceof Object[]) {
        Object[] argArray=(Object[])args;
        if (argArray.length > 0 && argArray[0] instanceof Map)         attrs=(Map)argArray[0];
        if (argArray.length > 1) {
          body=argArray[1];
        }
      }
 else       if (args instanceof Map) {
        attrs=(Map)args;
      }
      if (attrs == null) {
        attrs=new HashMap();
      }
      BeanWrapper bean=getTagLibraryBean(tagLib,webRequest);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Attempting to invoke [" + methodName + "] on tag library ["+ tagLib.getClass()+ "] with MetaClass ["+ tagLib.getMetaClass()+ "]");
      }
      if (bean.isReadableProperty(methodName)) {
        return captureTagOutput(tagLib,methodName,attrs,body,webRequest,bean);
      }
 else {
        if (args instanceof Object[])         return super.invokeMethod(methodName,args);
 else         return super.invokeMethod(methodName,args);
      }
    }
  }
  finally {
    getBinding().setVariable(OUT,originalOut);
    webRequest.setOut(originalOut);
  }
  return super.invokeMethod(methodName,args);
}
