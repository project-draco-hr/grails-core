{
  super(pluginClass,application);
  this.registry=InvokerHelper.getInstance().getMetaRegistry();
  this.pluginGrailsClass=new GrailsPluginClass(pluginClass);
  this.plugin=(GroovyObject)this.pluginGrailsClass.newInstance();
  this.pluginBean=new BeanWrapperImpl(this.plugin);
  this.dependencies=Collections.EMPTY_MAP;
  this.resolver=new PathMatchingResourcePatternResolver();
  if (this.pluginBean.isReadableProperty(DEPENDS_ON)) {
    this.dependencies=(Map)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,DEPENDS_ON);
    this.dependencyNames=(String[])this.dependencies.keySet().toArray(new String[this.dependencies.size()]);
  }
  if (this.pluginBean.isReadableProperty(PLUGIN_LOAD_AFTER_NAMES)) {
    List loadAfterNamesList=(List)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,PLUGIN_LOAD_AFTER_NAMES);
    if (loadAfterNamesList != null) {
      this.loadAfterNames=(String[])loadAfterNamesList.toArray(new String[loadAfterNamesList.size()]);
    }
  }
  if (this.pluginBean.isReadableProperty(EVICT)) {
    List pluginsToEvict=(List)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,EVICT);
    if (pluginsToEvict != null) {
      this.evictionList=new String[pluginsToEvict.size()];
      int index=0;
      for (Iterator i=pluginsToEvict.iterator(); i.hasNext(); ) {
        Object o=i.next();
        evictionList[index++]=o != null ? o.toString() : "";
      }
    }
  }
  if (this.pluginBean.isReadableProperty(VERSION)) {
    Object vobj=this.plugin.getProperty("version");
    if (vobj instanceof BigDecimal)     this.version=(BigDecimal)vobj;
 else     throw new PluginException("Plugin " + this + " must specify a version as a Groovy BigDecimal. eg: def version = 0.1");
  }
 else {
    throw new PluginException("Plugin [" + getName() + "] must specify a version!");
  }
  if (this.pluginBean.isReadableProperty(INFLUENCES)) {
    List influencedList=(List)this.pluginBean.getPropertyValue(INFLUENCES);
    if (influencedList != null) {
      this.influencedPluginNames=(String[])influencedList.toArray(new String[influencedList.size()]);
    }
  }
  if (this.pluginBean.isReadableProperty(ON_CHANGE)) {
    this.onChangeListener=(Closure)GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,ON_CHANGE);
    Object referencedResources=GrailsClassUtils.getPropertyOrStaticPropertyOrFieldValue(this.plugin,WATCHED_RESOURCES);
    try {
      if (referencedResources instanceof String) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Configuring plugin " + this + " to watch resources with pattern: "+ referencedResources);
        }
        this.resourcesReference=referencedResources.toString();
        watchedResources=resolver.getResources(resourcesReference);
        if (watchedResources.length == 0) {
          watchedResources=resolver.getResources("classpath*:" + resourcesReference);
        }
      }
 else       if (referencedResources instanceof List) {
        List resourceList=(List)referencedResources;
        for (int i=0; i < resourceList.size(); i++) {
          String res=resourceList.get(i).toString();
          Resource[] tmp=resolver.getResources(res);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Watching resource set [" + (i + 1) + "]: "+ ArrayUtils.toString(tmp));
          }
          if (tmp.length == 0)           tmp=resolver.getResources("classpath*:" + res);
          if (tmp.length > 0) {
            watchedResources=(Resource[])ArrayUtils.addAll(this.watchedResources,tmp);
          }
        }
      }
    }
 catch (    IOException e) {
      LOG.warn("I/O exception loading plug-in resource watch list: " + e.getMessage(),e);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Plugin " + this + " found ["+ watchedResources.length+ "] to watch");
    }
    try {
      initializeModifiedTimes();
    }
 catch (    IOException e) {
      LOG.warn("I/O exception initializing modified times for watched resources: " + e.getMessage(),e);
    }
  }
}
