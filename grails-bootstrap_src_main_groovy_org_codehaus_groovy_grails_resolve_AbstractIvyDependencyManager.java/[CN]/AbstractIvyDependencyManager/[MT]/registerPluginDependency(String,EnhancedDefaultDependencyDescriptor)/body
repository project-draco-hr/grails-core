{
  ModuleId dependencyId=descriptor.getDependencyId();
  String name=dependencyId.getName();
  DependencyDescriptor existing=pluginNameToDescriptorMap.get(name);
  if (existing != null && descriptor.isTransitivelyIncluded()) {
    ModuleRevisionId dependencyRevisionId=existing.getDependencyRevisionId();
    if (dependencyRevisionId.equals(descriptor.getDependencyRevisionId()))     return;
  }
  String classifierAttribute=descriptor.getExtraAttribute("m:classifier");
  String packaging;
  if (classifierAttribute != null && classifierAttribute.equals("plugin")) {
    packaging="xml";
  }
 else {
    packaging="zip";
  }
  DependencyArtifactDescriptor artifact=new DefaultDependencyArtifactDescriptor(descriptor,name,packaging,packaging,null,null);
  descriptor.addDependencyArtifact(scope,artifact);
  registerDependencyCommon(scope,descriptor);
  pluginNameToDescriptorMap.put(name,descriptor);
  pluginDependencyDescriptors.add(descriptor);
  pluginNameToDescriptorMap.put(name,descriptor);
  if (descriptor.isExported()) {
    moduleDescriptor.addDependency(descriptor);
  }
}
