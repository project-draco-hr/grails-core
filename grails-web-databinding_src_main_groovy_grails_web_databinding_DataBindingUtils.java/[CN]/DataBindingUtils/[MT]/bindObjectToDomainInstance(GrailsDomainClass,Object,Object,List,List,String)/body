{
  BindingResult bindingResult=null;
  GrailsApplication grailsApplication=null;
  if (domain != null) {
    grailsApplication=domain.getGrailsApplication();
  }
  if (grailsApplication == null) {
    grailsApplication=Holders.findApplication();
  }
  try {
    final DataBindingSource bindingSource=createDataBindingSource(grailsApplication,object.getClass(),source);
    final DataBinder grailsWebDataBinder=getGrailsWebDataBinder(grailsApplication);
    grailsWebDataBinder.bind(object,bindingSource,filter,include,exclude);
  }
 catch (  InvalidRequestBodyException e) {
    String messageCode="invalidRequestBody";
    Class objectType=object.getClass();
    String defaultMessage="An error occurred parsing the body of the request";
    String[] codes=getMessageCodes(messageCode,objectType);
    bindingResult=new BeanPropertyBindingResult(object,objectType.getName());
    bindingResult.addError(new ObjectError(bindingResult.getObjectName(),codes,null,defaultMessage));
  }
catch (  Exception e) {
    bindingResult=new BeanPropertyBindingResult(object,object.getClass().getName());
    bindingResult.addError(new ObjectError(bindingResult.getObjectName(),e.getMessage()));
  }
  if (domain != null && bindingResult != null) {
    BindingResult newResult=new ValidationErrors(object);
    for (    Object error : bindingResult.getAllErrors()) {
      if (error instanceof FieldError) {
        FieldError fieldError=(FieldError)error;
        final boolean isBlank=BLANK.equals(fieldError.getRejectedValue());
        if (!isBlank) {
          newResult.addError(fieldError);
        }
 else         if (domain.hasPersistentProperty(fieldError.getField())) {
          final boolean isOptional=domain.getPropertyByName(fieldError.getField()).isOptional();
          if (!isOptional) {
            newResult.addError(fieldError);
          }
        }
 else {
          newResult.addError(fieldError);
        }
      }
 else {
        newResult.addError((ObjectError)error);
      }
    }
    bindingResult=newResult;
  }
  MetaClass mc=GroovySystem.getMetaClassRegistry().getMetaClass(object.getClass());
  if (mc.hasProperty(object,"errors") != null && bindingResult != null) {
    ValidationErrors errors=new ValidationErrors(object);
    errors.addAllErrors(bindingResult);
    mc.setProperty(object,"errors",errors);
  }
  return bindingResult;
}
