{
  Collection beanReferences=new ArrayList();
  Map urlMappings=new HashMap();
  Assert.notNull(application);
  Bean classLoader=SpringConfigUtils.createSingletonBean(MethodInvokingFactoryBean.class);
  classLoader.setProperty("targetObject",SpringConfigUtils.createBeanReference("grailsApplication"));
  classLoader.setProperty("targetMethod",SpringConfigUtils.createLiteralValue("getClassLoader"));
  Bean classEditor=SpringConfigUtils.createSingletonBean(ClassEditor.class);
  classEditor.setProperty("classLoader",classLoader);
  Bean propertyEditors=SpringConfigUtils.createSingletonBean(CustomEditorConfigurer.class);
  Map customEditors=new HashMap();
  customEditors.put(SpringConfigUtils.createLiteralValue("java.lang.Class"),classEditor);
  propertyEditors.setProperty("customEditors",SpringConfigUtils.createMap(customEditors));
  beanReferences.add(SpringConfigUtils.createBeanReference("customEditors",propertyEditors));
  Bean messageSource=SpringConfigUtils.createSingletonBean(ReloadableResourceBundleMessageSource.class);
  messageSource.setProperty("basename",SpringConfigUtils.createLiteralValue("messages"));
  Bean exceptionHandler=SpringConfigUtils.createSingletonBean(GrailsExceptionResolver.class);
  exceptionHandler.setProperty("exceptionMappings",SpringConfigUtils.createLiteralValue("java.lang.Exception=error"));
  beanReferences.add(SpringConfigUtils.createBeanReference("exceptionHandler",exceptionHandler));
  LOG.info("[SpringConfig] Configuring Grails data source");
  populateDataSourceReferences(beanReferences);
  LOG.info("[SpringConfig] Configuring Grails domain");
  populateDomainClassReferences(beanReferences,classLoader);
  LOG.info("[SpringConfig] Configuring Grails services");
  populateServiceClassReferences(beanReferences);
  LOG.info("[SpringConfig] Configuring Grails page flows");
  populatePageFlowReferences(beanReferences,urlMappings);
  LOG.info("[SpringConfig] Configuring Grails controllers");
  populateControllerReferences(beanReferences,urlMappings);
  LOG.info("[SpringConfig] Configuring Grails scaffolding");
  populateScaffoldingReferences(beanReferences);
  return beanReferences;
}
