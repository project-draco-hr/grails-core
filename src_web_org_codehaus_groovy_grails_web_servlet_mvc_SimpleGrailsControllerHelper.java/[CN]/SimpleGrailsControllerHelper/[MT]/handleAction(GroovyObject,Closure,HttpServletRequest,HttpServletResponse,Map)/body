{
  GrailsParameterMap paramsMap=(GrailsParameterMap)controller.getProperty("params");
  if (params != null && !params.isEmpty()) {
    paramsMap.putAll(params);
  }
  Class[] paramTypes=action.getParameterTypes();
  List commandObjects=new ArrayList();
  if (paramTypes != null) {
    for (int j=0; j < paramTypes.length; j++) {
      Class paramType=paramTypes[j];
      if (GroovyObject.class.isAssignableFrom(paramType)) {
        try {
          GroovyObject commandObject=(GroovyObject)paramType.newInstance();
          GrailsDataBinder binder=GrailsDataBinder.createBinder(commandObject,commandObject.getClass().getName());
          binder.bind(new MutablePropertyValues(paramsMap));
          Errors errors=new BindException(commandObject,paramType.getName());
          Collection constrainedProperties=((Map)commandObject.getProperty("constraints")).values();
          for (Iterator i=constrainedProperties.iterator(); i.hasNext(); ) {
            ConstrainedProperty constrainedProperty=(ConstrainedProperty)i.next();
            constrainedProperty.setMessageSource(applicationContext);
            constrainedProperty.validate(commandObject,commandObject.getProperty(constrainedProperty.getPropertyName()),errors);
          }
          commandObject.setProperty("errors",errors);
          if (errors.hasErrors()) {
            LOG.warn("Command Object " + paramType.getName() + " Failed Validation");
          }
          commandObjects.add(commandObject);
        }
 catch (        Exception e) {
          throw new ControllerExecutionException("Error occurred creating command object.",e);
        }
      }
    }
  }
  Object returnValue=action.call(commandObjects.toArray());
  request.setAttribute(GrailsApplicationAttributes.ERRORS,controller.getProperty(ControllerDynamicMethods.ERRORS_PROPERTY));
  return returnValue;
}
