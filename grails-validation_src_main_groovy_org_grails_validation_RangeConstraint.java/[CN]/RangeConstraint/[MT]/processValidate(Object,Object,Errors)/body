{
  if (range.contains(propertyValue)) {
    return;
  }
  Object[] args=new Object[]{constraintPropertyName,constraintOwningClass,propertyValue,range.getFrom(),range.getTo()};
  Comparable from=range.getFrom();
  Comparable to=range.getTo();
  boolean isNumber=propertyValue instanceof Number;
  final boolean isFromNumber=from instanceof Number;
  if (isFromNumber && !isNumber) {
    try {
      propertyValue=Integer.parseInt(propertyValue.toString());
      isNumber=true;
    }
 catch (    NumberFormatException e) {
    }
  }
  if (isFromNumber && isNumber) {
    from=((Number)from).longValue();
    to=((Number)to).longValue();
    propertyValue=((Number)propertyValue).longValue();
  }
  if (from.compareTo(propertyValue) > 0) {
    rejectValue(target,errors,ConstrainedProperty.DEFAULT_INVALID_RANGE_MESSAGE_CODE,ConstrainedProperty.RANGE_CONSTRAINT + ConstrainedProperty.TOOSMALL_SUFFIX,args);
  }
 else   if (to.compareTo(propertyValue) < 0) {
    rejectValue(target,errors,ConstrainedProperty.DEFAULT_INVALID_RANGE_MESSAGE_CODE,ConstrainedProperty.RANGE_CONSTRAINT + ConstrainedProperty.TOOBIG_SUFFIX,args);
  }
}
