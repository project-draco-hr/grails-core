{
  if (descriptor != null && descriptor.exists()) {
    LOG.info("Loading Grails application with information from descriptor.");
    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
    List<Class<?>> classes=new ArrayList<Class<?>>();
    InputStream inputStream=null;
    try {
      inputStream=descriptor.getInputStream();
      GPathResult root=IOUtils.createXmlSlurper().parse(inputStream);
      GPathResult resources=(GPathResult)root.getProperty("resources");
      GPathResult grailsClasses=(GPathResult)resources.getProperty("resource");
      for (int i=0; i < grailsClasses.size(); i++) {
        GPathResult node=(GPathResult)grailsClasses.getAt(i);
        String className=node.text();
        try {
          Class<?> clazz;
          if (classLoader instanceof GrailsClassLoader) {
            clazz=classLoader.loadClass(className);
          }
 else {
            clazz=Class.forName(className,true,classLoader);
          }
          classes.add(clazz);
        }
 catch (        ClassNotFoundException e) {
          LOG.warn("Class with name [" + className + "] was not found, and hence not loaded. Possible empty class or script definition?");
        }
      }
    }
  finally {
      if (inputStream != null) {
        inputStream.close();
      }
    }
    Class<?>[] loadedClasses=classes.toArray(new Class[classes.size()]);
    grailsApplication=new DefaultGrailsApplication(loadedClasses,classLoader);
  }
 else   if (!Environment.isWarDeployed()) {
    org.codehaus.groovy.grails.io.support.Resource[] buildResources=GrailsPluginUtils.getPluginBuildSettings().getArtefactResourcesForCurrentEnvironment();
    Resource[] resources=new Resource[buildResources.length];
    for (int i=0; i < buildResources.length; i++) {
      org.codehaus.groovy.grails.io.support.Resource buildResource=buildResources[i];
      resources[i]=new FileSystemResource(buildResource.getFile());
    }
    grailsApplication=new DefaultGrailsApplication(resources);
  }
 else {
    grailsApplication=new DefaultGrailsApplication();
  }
  ApplicationHolder.setApplication(grailsApplication);
}
