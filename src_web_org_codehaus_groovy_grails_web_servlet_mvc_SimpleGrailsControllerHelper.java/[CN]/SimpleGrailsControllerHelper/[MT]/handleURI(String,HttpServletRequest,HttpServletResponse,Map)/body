{
  if (uri == null)   throw new IllegalArgumentException("Controller URI [" + uri + "] cannot be null!");
  if (uri.indexOf("?") > -1) {
    uri=uri.substring(0,uri.indexOf("?"));
  }
  if (!uri.startsWith("/"))   uri='/' + uri;
  if (uri.endsWith("/"))   uri=uri.substring(0,uri.length() - 1);
  GrailsControllerClass controllerClass=getControllerClassByURI(uri);
  if (controllerClass == null) {
    throw new UnknownControllerException("No controller found for URI [" + uri + "]!");
  }
  GroovyObject controller=controllerClass.newInstance();
  if (this.interceptor == null) {
    try {
      interceptor=new ControllerDynamicMethods(controller,this,request,response);
    }
 catch (    IntrospectionException ie) {
      throw new ControllerExecutionException("Error creating dynamic controller methods for controller [" + controller.getClass() + "]: "+ ie.getMessage(),ie);
    }
  }
  if (controllerClass.isScaffolding()) {
    this.scaffolder=(GrailsScaffolder)applicationContext.getBean(controllerClass.getFullName() + SCAFFOLDER);
    if (this.scaffolder == null)     throw new IllegalStateException("Scaffolding set to true for controller [" + controllerClass.getFullName() + "] but no scaffolder available!");
  }
  String actionPropertyName=controllerClass.getClosurePropertyName(uri);
  if (actionPropertyName == null) {
    if (controllerClass.isScaffolding() && !scaffolder.supportsAction(actionPropertyName))     throw new NoClosurePropertyForURIException("Could not find closure property for URI [" + uri + "] for controller ["+ controllerClass.getFullName()+ "]!");
  }
  String viewName=controllerClass.getViewByURI(uri);
  Closure action=(Closure)controller.getProperty(actionPropertyName);
  if (action == null)   throw new IllegalStateException("Scaffolder supports action [" + actionPropertyName + "] for controller ["+ controllerClass.getFullName()+ "] but getAction returned null!");
  Object returnValue=handleAction(controller,action,request,response,params);
  return handleActionResponse(controller,returnValue,actionPropertyName,viewName);
}
