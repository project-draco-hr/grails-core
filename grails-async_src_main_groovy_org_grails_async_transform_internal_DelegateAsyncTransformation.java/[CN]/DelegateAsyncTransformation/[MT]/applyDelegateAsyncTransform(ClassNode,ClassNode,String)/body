{
  List<MethodNode> methods=targetApi.getAllDeclaredMethods();
  ClassNode promisesClass=ClassHelper.make(Promises.class).getPlainNodeReference();
  MethodNode createPromiseMethodTargetWithDecorators=promisesClass.getDeclaredMethod("createPromise",new Parameter[]{new Parameter(new ClassNode(Closure.class),"c"),new Parameter(new ClassNode(List.class),"c")});
  DelegateAsyncTransactionalMethodTransformer delegateAsyncTransactionalMethodTransformer=lookupAsyncTransactionalMethodTransformer();
  for (  MethodNode m : methods) {
    if (isCandidateMethod(m)) {
      MethodNode existingMethod=classNode.getMethod(m.getName(),m.getParameters());
      if (existingMethod == null) {
        ClassNode promiseNode=ClassHelper.make(Promise.class).getPlainNodeReference();
        ClassNode originalReturnType=m.getReturnType();
        if (!originalReturnType.getNameWithoutPackage().equals(VOID)) {
          ClassNode returnType;
          if (ClassHelper.isPrimitiveType(originalReturnType.redirect())) {
            returnType=ClassHelper.getWrapper(originalReturnType.redirect());
          }
 else {
            returnType=alignReturnType(classNode,originalReturnType);
          }
        }
        final BlockStatement methodBody=new BlockStatement();
        final BlockStatement promiseBody=new BlockStatement();
        final ClosureExpression closureExpression=new ClosureExpression(new Parameter[0],promiseBody);
        VariableScope variableScope=new VariableScope();
        closureExpression.setVariableScope(variableScope);
        VariableExpression thisObject=new VariableExpression("this");
        ClassNode delegateAsyncUtilsClassNode=new ClassNode(DelegateAsyncUtils.class);
        MethodNode getPromiseDecoratorsMethodNode=delegateAsyncUtilsClassNode.getDeclaredMethods("getPromiseDecorators").get(0);
        ListExpression promiseDecorators=new ListExpression();
        ArgumentListExpression getPromiseDecoratorsArguments=new ArgumentListExpression(thisObject,promiseDecorators);
        delegateAsyncTransactionalMethodTransformer.transformTransactionalMethod(classNode,targetApi,m,promiseDecorators);
        MethodCallExpression getDecoratorsMethodCall=new MethodCallExpression(new ClassExpression(delegateAsyncUtilsClassNode),"getPromiseDecorators",getPromiseDecoratorsArguments);
        getDecoratorsMethodCall.setMethodTarget(getPromiseDecoratorsMethodNode);
        MethodCallExpression createPromiseWithDecorators=new MethodCallExpression(new ClassExpression(promisesClass),"createPromise",new ArgumentListExpression(closureExpression,getDecoratorsMethodCall));
        if (createPromiseMethodTargetWithDecorators != null) {
          createPromiseWithDecorators.setMethodTarget(createPromiseMethodTargetWithDecorators);
        }
        methodBody.addStatement(new ExpressionStatement(createPromiseWithDecorators));
        final ArgumentListExpression arguments=new ArgumentListExpression();
        Parameter[] parameters=copyParameters(StaticTypeCheckingSupport.parameterizeArguments(classNode,m));
        for (        Parameter p : parameters) {
          p.setClosureSharedVariable(true);
          variableScope.putReferencedLocalVariable(p);
          VariableExpression ve=new VariableExpression(p);
          ve.setClosureSharedVariable(true);
          arguments.addExpression(ve);
        }
        MethodCallExpression delegateMethodCall=new MethodCallExpression(new VariableExpression(fieldName),m.getName(),arguments);
        promiseBody.addStatement(new ExpressionStatement(delegateMethodCall));
        MethodNode newMethodNode=new MethodNode(m.getName(),Modifier.PUBLIC,promiseNode,parameters,null,methodBody);
        classNode.addMethod(newMethodNode);
      }
    }
  }
}
