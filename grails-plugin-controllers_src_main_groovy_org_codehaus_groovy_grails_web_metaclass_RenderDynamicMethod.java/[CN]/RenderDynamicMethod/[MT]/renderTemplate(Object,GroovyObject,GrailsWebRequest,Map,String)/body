{
  boolean renderView;
  boolean hasModel=argMap.containsKey(ARGUMENT_MODEL);
  Object modelObject=null;
  if (hasModel) {
    modelObject=argMap.get(ARGUMENT_MODEL);
  }
  String templateName=argMap.get(ARGUMENT_TEMPLATE).toString();
  String contextPath=getContextPath(webRequest,argMap);
  String var=null;
  if (argMap.containsKey(ARGUMENT_VAR)) {
    var=String.valueOf(argMap.get(ARGUMENT_VAR));
  }
  String templateUri=webRequest.getAttributes().getTemplateURI(controller,templateName);
  ResourceAwareTemplateEngine engine=webRequest.getAttributes().getPagesTemplateEngine();
  try {
    Template t=engine.createTemplateForUri(new String[]{GrailsResourceUtils.appendPiecesForUri(contextPath,templateUri),GrailsResourceUtils.appendPiecesForUri(contextPath,"/grails-app/views/",templateUri)});
    if (t == null) {
      throw new ControllerExecutionException("Unable to load template for uri [" + templateUri + "]. Template not found.");
    }
    if (t instanceof GroovyPageTemplate) {
      ((GroovyPageTemplate)t).setAllowSettingContentType(true);
    }
    GroovyPageView gspView=new GroovyPageView();
    gspView.setTemplate(t);
    try {
      gspView.afterPropertiesSet();
    }
 catch (    Exception e) {
      throw new RuntimeException("Problem initializing view",e);
    }
    View view=gspView;
    boolean renderWithLayout=(explicitSiteMeshLayout != null || webRequest.getCurrentRequest().getAttribute(GrailsLayoutDecoratorMapper.LAYOUT_ATTRIBUTE) != null);
    if (renderWithLayout) {
      applySiteMeshLayout(webRequest.getCurrentRequest(),false,explicitSiteMeshLayout);
      try {
        GroovyPageLayoutFinder groovyPageLayoutFinder=webRequest.getApplicationContext().getBean("groovyPageLayoutFinder",GroovyPageLayoutFinder.class);
        view=new GrailsLayoutView(groovyPageLayoutFinder,gspView);
      }
 catch (      NoSuchBeanDefinitionException e) {
      }
    }
    Map binding=new HashMap();
    if (argMap.containsKey(ARGUMENT_BEAN)) {
      Object bean=argMap.get(ARGUMENT_BEAN);
      if (hasModel) {
        if (modelObject instanceof Map) {
          setTemplateModel(webRequest,binding,(Map)modelObject);
        }
      }
      renderTemplateForBean(webRequest,view,binding,bean,var);
    }
 else     if (argMap.containsKey(ARGUMENT_COLLECTION)) {
      Object colObject=argMap.get(ARGUMENT_COLLECTION);
      if (hasModel) {
        if (modelObject instanceof Map) {
          setTemplateModel(webRequest,binding,(Map)modelObject);
        }
      }
      renderTemplateForCollection(webRequest,view,binding,colObject,var);
    }
 else     if (hasModel) {
      if (modelObject instanceof Map) {
        setTemplateModel(webRequest,binding,(Map)modelObject);
      }
      renderViewForTemplate(webRequest,view,binding);
    }
 else {
      renderViewForTemplate(webRequest,view,binding);
    }
    renderView=false;
  }
 catch (  GroovyRuntimeException gre) {
    throw new ControllerExecutionException("Error rendering template [" + templateName + "]: "+ gre.getMessage(),gre);
  }
catch (  IOException ioex) {
    throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ ioex.getMessage(),ioex);
  }
  return renderView;
}
