{
  originalIn=System.in;
  originalOut=System.out;
  CommandLineParser parser=getCommandLineParser();
  GrailsConsole console=GrailsConsole.getInstance();
  CommandLine commandLine;
  try {
    if (args.length == 0) {
      commandLine=new DefaultCommandLine();
    }
 else {
      commandLine=parser.parseString(args[0]);
      if (commandLine.hasOption(NOANSI_ARGUMENT)) {
        console.setAnsiEnabled(false);
      }
    }
  }
 catch (  ParseException e) {
    console.error("Error processing command line arguments: " + e.getMessage());
    System.exit(1);
    return;
  }
  console.updateStatus("Initializing");
  ScriptAndArgs script=processArgumentsAndReturnScriptName(commandLine);
  String grailsHome=System.getProperty("grails.home");
  BuildSettings build=null;
  try {
    build=new BuildSettings(new File(grailsHome));
    if (build.getRootLoader() == null) {
      build.setRootLoader((URLClassLoader)GrailsScriptRunner.class.getClassLoader());
    }
  }
 catch (  Exception e) {
    exitWithError("An error occurred loading the grails-app/conf/BuildConfig.groovy file: " + e.getMessage());
  }
  final File grailsHomeInSettings=build.getGrailsHome();
  if (grailsHomeInSettings == null || !grailsHomeInSettings.exists()) {
    exitWithError("Grails' installation directory not found: " + build.getGrailsHome());
  }
  if (commandLine.hasOption(VERSION_ARGUMENT)) {
    console.log("Grails version: " + build.getGrailsVersion());
    System.exit(0);
  }
  if (commandLine.hasOption(HELP_ARGUMENT)) {
    console.log(parser.getHelpMessage());
    System.exit(0);
  }
  System.out.println("Welcome to Grails " + build.getGrailsVersion() + " - http://grails.org/");
  System.out.println("Licensed under Apache Standard License 2.0");
  System.out.println("Grails home is " + (grailsHome == null ? "not set" : "set to: " + grailsHome));
  GrailsScriptRunner scriptRunner=new GrailsScriptRunner(build);
  scriptRunner.setInteractive(!commandLine.hasOption(NON_INTERACTIVE_ARGUMENT));
  if ("Interactive".equals(script.name)) {
    console.error("The 'interactive' script is deprecated; to run in interactive mode just omit the script name");
    script.name=null;
  }
  if (script.name == null) {
    console.updateStatus("Loading build configuration");
    build.loadConfig();
    scriptRunner.initializeState();
    try {
      new InteractiveMode(build,scriptRunner).run();
    }
 catch (    Throwable e) {
      console.error("Interactive mode exited with error: " + e.getMessage(),e);
    }
  }
 else {
    console.getCategory().push(script.inputName);
    console.verbose("Base Directory: " + build.getBaseDir().getPath());
    try {
      int exitCode=scriptRunner.executeCommand(script.name,script.args,script.env);
      System.exit(exitCode);
    }
 catch (    ScriptNotFoundException ex) {
      console.error("Script not found: " + ex.getScriptName());
    }
catch (    Throwable t) {
      String msg="Error executing script " + script.name + ": "+ t.getMessage();
      sanitizeStacktrace(t);
      t.printStackTrace(System.out);
      exitWithError(msg);
    }
  }
}
