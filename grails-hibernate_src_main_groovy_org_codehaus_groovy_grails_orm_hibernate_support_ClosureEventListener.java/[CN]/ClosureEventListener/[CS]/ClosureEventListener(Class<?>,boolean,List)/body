{
  domainMetaClass=GroovySystem.getMetaClassRegistry().getMetaClass(domainClazz);
  dateCreatedProperty=domainMetaClass.getMetaProperty(GrailsDomainClassProperty.DATE_CREATED);
  lastUpdatedProperty=domainMetaClass.getMetaProperty(GrailsDomainClassProperty.LAST_UPDATED);
  if (dateCreatedProperty != null || lastUpdatedProperty != null) {
    Mapping m=GrailsDomainBinder.getMapping(domainClazz);
    shouldTimestamp=m == null || m.isAutoTimestamp();
  }
  saveOrUpdateCaller=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.ONLOAD_SAVE);
  beforeInsertCaller=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.BEFORE_INSERT_EVENT);
  preLoadEventCaller=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.ONLOAD_EVENT);
  if (preLoadEventCaller == null) {
    preLoadEventCaller=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.BEFORE_LOAD_EVENT);
  }
  postLoadEventListener=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.AFTER_LOAD_EVENT);
  postInsertEventListener=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.AFTER_INSERT_EVENT);
  postUpdateEventListener=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.AFTER_UPDATE_EVENT);
  postDeleteEventListener=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.AFTER_DELETE_EVENT);
  preDeleteEventListener=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.BEFORE_DELETE_EVENT);
  preUpdateEventListener=buildCaller(domainClazz,ClosureEventTriggeringInterceptor.BEFORE_UPDATE_EVENT);
  if (failOnErrorPackages.size() > 0) {
    failOnErrorEnabled=GrailsClassUtils.isClassBelowPackage(domainClazz,failOnErrorPackages);
  }
 else {
    failOnErrorEnabled=failOnError;
  }
  validateParams=new HashMap();
  validateParams.put(ValidatePersistentMethod.ARGUMENT_DEEP_VALIDATE,Boolean.FALSE);
  errorsProperty=domainMetaClass.getMetaProperty(AbstractDynamicPersistentMethod.ERRORS_PROPERTY);
  validateMethod=domainMetaClass.getMetaMethod(ValidatePersistentMethod.METHOD_SIGNATURE,new Object[]{Map.class});
}
