{
  Assert.hasLength(location,"Argument [location] cannot be null or blank");
  if (location.startsWith(PLUGINS_PATH)) {
    if (pluginSettings == null)     throw new RuntimeException("'pluginsettings' has not been initialised.");
    List<String> pluginBaseDirectories=pluginSettings.getPluginBaseDirectories();
    DefaultGroovyPageLocator.PluginViewPathInfo pluginViewPathInfo=DefaultGroovyPageLocator.getPluginViewPathInfo(location);
    String path=pluginViewPathInfo.basePath;
    String pluginName=pluginViewPathInfo.pluginName;
    String pathRelativeToPlugin=pluginViewPathInfo.path;
    for (    String pluginBaseDirectory : pluginBaseDirectories) {
      String pathToResource=pluginBaseDirectory + File.separatorChar + path;
      Resource r=super.getResource("file:" + pathToResource);
      if (r.exists()) {
        return r;
      }
      pathToResource=buildPluginViewPath(pluginBaseDirectory,pluginName,pathRelativeToPlugin);
      r=super.getResource(pathToResource);
      if (r.exists())       return r;
    }
    org.codehaus.groovy.grails.io.support.Resource[] inlinePluginDirectories=pluginSettings.getInlinePluginDirectories();
    for (    org.codehaus.groovy.grails.io.support.Resource inlinePluginDirectory : inlinePluginDirectories) {
      try {
        File dirFile=inlinePluginDirectory.getFile();
        File pageFile=new File(dirFile,pathRelativeToPlugin);
        if (pageFile.exists()) {
          return new FileSystemResource(pageFile);
        }
        String pathToInlinePluginView=buildPluginViewPathFromBase(dirFile.getAbsolutePath(),pathRelativeToPlugin,new StringBuilder("file:"));
        Resource resource=super.getResource(pathToInlinePluginView);
        if (resource.exists()) {
          return resource;
        }
      }
 catch (      IOException e) {
      }
    }
  }
  Resource resource=super.getResource(location);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Resolved GSP location [" + location + "] to resource ["+ resource+ "] (exists? ["+ resource.exists()+ "]) using base resource ["+ localBaseResource+ "]");
  }
  return resource;
}
