{
  Assert.notNull(application);
  WebApplicationContext mainContext;
  try {
    webSpringConfig=createWebRuntimeSpringConfiguration(application,parent,application.getClassLoader());
    if (context != null) {
      webSpringConfig.setServletContext(context);
    }
    if (!pluginManager.isInitialised()) {
      pluginManager.loadPlugins();
    }
    if (!application.isInitialised()) {
      pluginManager.doArtefactConfiguration();
      application.initialise();
    }
    pluginManager.registerProvidedArtefacts(application);
    registerParentBeanFactoryPostProcessors(webSpringConfig);
    pluginManager.doRuntimeConfiguration(webSpringConfig);
    LOG.debug("[RuntimeConfiguration] Processing additional external configurations");
    if (loadExternalBeans) {
      doPostResourceConfiguration(application,webSpringConfig);
    }
    reset();
    mainContext=(WebApplicationContext)webSpringConfig.getUnrefreshedApplicationContext();
    application.setMainContext(mainContext);
    Environment.setInitializing(true);
    initializeContext(mainContext);
    Environment.setInitializing(false);
    pluginManager.setApplicationContext(mainContext);
    pluginManager.doDynamicMethods();
    mainContext.publishEvent(new GrailsContextEvent(mainContext,GrailsContextEvent.DYNAMIC_METHODS_REGISTERED));
    performPostProcessing(mainContext);
    application.refreshConstraints();
  }
  finally {
    ClassPropertyFetcher.clearClassPropertyFetcherCache();
  }
  return mainContext;
}
