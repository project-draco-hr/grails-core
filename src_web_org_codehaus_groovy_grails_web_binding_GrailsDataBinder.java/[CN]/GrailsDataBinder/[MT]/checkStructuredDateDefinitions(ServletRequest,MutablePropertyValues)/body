{
  PropertyValue[] pvs=propertyValues.getPropertyValues();
  for (int i=0; i < pvs.length; i++) {
    PropertyValue propertyValue=pvs[i];
    try {
      String propertyName=propertyValue.getName();
      Class type=bean.getPropertyType(propertyName);
      if (type == Date.class || type == Calendar.class) {
        try {
          PropertyValue yearProperty=propertyValues.getPropertyValue(propertyName + "_year");
          String yearString=(String)yearProperty.getValue();
          int year;
          if (StringUtils.isBlank(yearString)) {
            Calendar now=Calendar.getInstance(RequestContextUtils.getLocale((HttpServletRequest)request));
            year=now.get(Calendar.YEAR);
          }
 else {
            year=Integer.parseInt(yearString);
          }
          int month=getIntegerPropertyValue(propertyValues,propertyName + "_month",1);
          int day=getIntegerPropertyValue(propertyValues,propertyName + "_day",1);
          int hour=getIntegerPropertyValue(propertyValues,propertyName + "_hour",0);
          int minute=getIntegerPropertyValue(propertyValues,propertyName + "_minute",0);
          Calendar c=new GregorianCalendar(year,month - 1,day,hour,minute);
          if (type == Date.class)           propertyValues.setPropertyValueAt(new PropertyValue(propertyName,c.getTime()),i);
 else           propertyValues.setPropertyValueAt(new PropertyValue(propertyName,c),i);
        }
 catch (        NumberFormatException nfe) {
          LOG.warn("Unable to parse structured date from request for date [" + propertyName + "]",nfe);
        }
      }
    }
 catch (    InvalidPropertyException ipe) {
    }
  }
}
