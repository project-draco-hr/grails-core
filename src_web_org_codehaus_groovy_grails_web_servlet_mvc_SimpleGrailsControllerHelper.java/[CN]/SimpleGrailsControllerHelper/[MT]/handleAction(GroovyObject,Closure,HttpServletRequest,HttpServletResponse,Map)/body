{
  if (params != null && !params.isEmpty()) {
    GrailsParameterMap paramsMap=(GrailsParameterMap)controller.getProperty("params");
    paramsMap.putAll(params);
  }
  Class[] paramTypes=action.getParameterTypes();
  GroovyObject commandObject=null;
  if (paramTypes != null && paramTypes.length > 0) {
    Class paramType=paramTypes[0];
    if (isCommandObjectClass(paramType)) {
      try {
        commandObject=(GroovyObject)paramType.newInstance();
        GrailsDataBinder binder=GrailsDataBinder.createBinder(commandObject,commandObject.getClass().getName());
        binder.bind(new MutablePropertyValues((GrailsParameterMap)controller.getProperty("params")));
        ConstrainedPropertyBuilder constrainedPropertyBuilder=new ConstrainedPropertyBuilder(commandObject);
        Closure validationClosure=(Closure)GrailsClassUtils.getStaticPropertyValue(paramType,"validate");
        validationClosure.setDelegate(constrainedPropertyBuilder);
        validationClosure.call();
        BeanWrapper beanWrapper=new BeanWrapperImpl(commandObject);
        Errors errors=new BindException(commandObject,paramType.getName());
        Collection constrainedProperties=constrainedPropertyBuilder.getConstrainedProperties().values();
        for (Iterator i=constrainedProperties.iterator(); i.hasNext(); ) {
          ConstrainedProperty constrainedProperty=(ConstrainedProperty)i.next();
          constrainedProperty.validate(commandObject,beanWrapper.getPropertyValue(constrainedProperty.getPropertyName()),errors);
        }
        if (errors.hasErrors()) {
          LOG.warn("Command Object " + paramType.getName() + " Failed Validation");
        }
      }
 catch (      Exception e) {
        throw new ControllerExecutionException("Error occurred creating command object.",e);
      }
    }
  }
  Object returnValue=null;
  if (commandObject == null) {
    returnValue=action.call();
  }
 else {
    returnValue=action.call(commandObject);
  }
  request.setAttribute(GrailsApplicationAttributes.ERRORS,controller.getProperty(ControllerDynamicMethods.ERRORS_PROPERTY));
  return returnValue;
}
