{
  if (!(o instanceof UrlMapping)) {
    throw new IllegalArgumentException("Cannot compare with Object [" + o + "]. It is not an instance of UrlMapping!");
  }
  if (equals(o))   return 0;
  UrlMapping other=(UrlMapping)o;
  final int thisStaticTokenCount=getStaticTokenCount(this);
  final int otherStaticTokenCount=getStaticTokenCount(other);
  final int otherSingleWildcardCount=getSingleWildcardCount(other);
  final int thisSingleWildcardCount=getSingleWildcardCount(this);
  final int otherDoubleWildcardCount=getDoubleWildcardCount(other);
  final int thisDoubleWildcardCount=getDoubleWildcardCount(this);
  final boolean hasWildCards=thisDoubleWildcardCount > 0 || thisSingleWildcardCount > 0;
  final boolean otherHasWildCards=otherDoubleWildcardCount > 0 || otherSingleWildcardCount > 0;
  if (thisStaticTokenCount == 0 && thisSingleWildcardCount == 0 && thisDoubleWildcardCount == 0) {
    return 1;
  }
  if (otherStaticTokenCount == 0 && otherSingleWildcardCount == 0 && otherDoubleWildcardCount == 0) {
    return -1;
  }
  if (otherStaticTokenCount == 0 && thisStaticTokenCount > 0) {
    return 1;
  }
  if (thisStaticTokenCount == 0 && otherStaticTokenCount > 0) {
    return -1;
  }
  final int thisStaticAndWildcardTokenCount=getStaticAndWildcardTokenCount(this);
  final int otherStaticAndWildcardTokenCount=getStaticAndWildcardTokenCount(other);
  if (otherStaticAndWildcardTokenCount == 0 && thisStaticAndWildcardTokenCount > 0) {
    return 1;
  }
  if (thisStaticAndWildcardTokenCount == 0 && otherStaticAndWildcardTokenCount > 0) {
    return -1;
  }
  final int staticDiff=thisStaticTokenCount - otherStaticTokenCount;
  if (staticDiff < 0 && !otherHasWildCards) {
    return staticDiff;
  }
 else   if (staticDiff > 0 && !hasWildCards) {
    return staticDiff;
  }
  String[] thisTokens=getUrlData().getTokens();
  String[] otherTokens=other.getUrlData().getTokens();
  final int thisTokensLength=thisTokens.length;
  final int otherTokensLength=otherTokens.length;
  int greaterLength=thisTokensLength > otherTokensLength ? thisTokensLength : otherTokensLength;
  for (int i=0; i < greaterLength; i++) {
    final boolean thisHasMoreTokens=i < thisTokensLength;
    final boolean otherHasMoreTokens=i < otherTokensLength;
    boolean thisTokenIsWildcard=!thisHasMoreTokens || isSingleWildcard(thisTokens[i]);
    boolean otherTokenIsWildcard=!otherHasMoreTokens || isSingleWildcard(otherTokens[i]);
    if (thisTokenIsWildcard && !otherTokenIsWildcard) {
      return -1;
    }
    if (!thisTokenIsWildcard && otherTokenIsWildcard) {
      return 1;
    }
  }
  final int doubleWildcardDiff=otherDoubleWildcardCount - thisDoubleWildcardCount;
  if (doubleWildcardDiff != 0)   return doubleWildcardDiff;
  final int singleWildcardDiff=otherSingleWildcardCount - thisSingleWildcardCount;
  if (singleWildcardDiff != 0)   return singleWildcardDiff;
  int constraintDiff=getAppliedConstraintsCount(this) - getAppliedConstraintsCount(other);
  if (constraintDiff != 0)   return constraintDiff;
  int allDiff=(thisStaticTokenCount - otherStaticTokenCount) + (thisSingleWildcardCount - otherSingleWildcardCount) + (thisDoubleWildcardCount - otherDoubleWildcardCount);
  if (allDiff != 0) {
    return allDiff;
  }
  String thisVersion=getVersion();
  String thatVersion=other.getVersion();
  if ((thisVersion.equals(thatVersion))) {
    return 0;
  }
 else   if (thisVersion.equals(ANY_VERSION) && !thatVersion.equals(ANY_VERSION)) {
    return -1;
  }
 else   if (!thisVersion.equals(ANY_VERSION) && thatVersion.equals(ANY_VERSION)) {
    return 1;
  }
 else {
    return new VersionComparator().compare(thisVersion,thatVersion);
  }
}
