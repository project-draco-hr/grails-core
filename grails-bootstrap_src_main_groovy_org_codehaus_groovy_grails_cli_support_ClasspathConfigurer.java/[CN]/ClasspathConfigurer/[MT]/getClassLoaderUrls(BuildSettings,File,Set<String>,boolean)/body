{
  List<URL> urls=new ArrayList<URL>();
  if (settings.getGrailsHome() != null) {
    urls.add(cacheDir.toURI().toURL());
  }
  if (settings.getResourcesDir() != null && settings.getResourcesDir().exists()) {
    urls.add(settings.getResourcesDir().toURI().toURL());
  }
  final boolean dependenciesExternallyConfigured=settings.isDependenciesExternallyConfigured();
  final List<File> buildDependencies;
  buildDependencies=settings.getBuildDependencies();
  if (!dependenciesExternallyConfigured && buildDependencies.isEmpty()) {
    GrailsConsole.getInstance().error("Required Grails build dependencies were not found. This is normally due to internet connectivity issues (such as a misconfigured proxy) or missing repositories in grails-app/conf/BuildConfig.groovy. Please verify your configuration to continue.");
    cleanResolveCache(settings);
    GrailsConsole.getInstance().cleanlyExit(1);
  }
  addDependenciesToURLs(excludes,urls,buildDependencies);
  addDependenciesToURLs(excludes,urls,settings.getProvidedDependencies());
  addDependenciesToURLs(excludes,urls,settings.getTestDependencies());
  settings.getRuntimeDependencies();
  settings.getCompileDependencies();
  if (!skipPlugins) {
    for (    File dir : pluginPathSupport.listKnownPluginDirs()) {
      addPluginLibs(dir,urls,settings);
    }
  }
  DependencyReport buildResolveReport=settings.getBuildResolveReport();
  if (buildResolveReport != null && buildResolveReport.hasError()) {
    handleResolveError(settings,buildResolveReport);
  }
  DependencyReport compileResolveReport=settings.getCompileResolveReport();
  if (compileResolveReport != null && compileResolveReport.hasError()) {
    handleResolveError(settings,compileResolveReport);
  }
  DependencyReport runtimeResolveReport=settings.getRuntimeResolveReport();
  if (runtimeResolveReport != null && runtimeResolveReport.hasError()) {
    handleResolveError(settings,runtimeResolveReport);
  }
  DependencyReport testResolveReport=settings.getTestResolveReport();
  if (testResolveReport != null && testResolveReport.hasError()) {
    handleResolveError(settings,testResolveReport);
  }
  DependencyReport providedResolveReport=settings.getProvidedResolveReport();
  if (providedResolveReport != null && providedResolveReport.hasError()) {
    handleResolveError(settings,providedResolveReport);
  }
  settings.storeDependencyCache();
  return urls.toArray(new URL[urls.size()]);
}
