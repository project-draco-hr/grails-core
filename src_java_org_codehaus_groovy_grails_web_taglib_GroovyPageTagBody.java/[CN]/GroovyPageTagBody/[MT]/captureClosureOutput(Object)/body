{
  final GroovyPageTagWriter capturedOut=new GroovyPageTagWriter(preferSubChunkWhenWritingToOtherBuffer);
  try {
    GroovyPageOutputStack.currentStack().push(capturedOut);
    Object bodyResult;
    if (args != null) {
      if (args instanceof Map) {
        Map currentBinding=null;
        Map originalBinding=null;
        final Map argsMap=(Map)args;
        if (binding != null) {
          currentBinding=binding.getVariables();
          originalBinding=new HashMap(currentBinding);
          currentBinding.putAll(argsMap);
        }
        try {
          bodyResult=executeClosure(bodyClosure,args);
        }
  finally {
          if (binding != null) {
            for (            Object key : argsMap.keySet()) {
              Object originalVal=originalBinding.get(key);
              if (originalVal != null) {
                currentBinding.put(key,originalVal);
              }
            }
          }
        }
      }
 else {
        bodyResult=executeClosure(bodyClosure,args);
      }
    }
 else {
      bodyResult=executeClosure(bodyClosure,null);
    }
    if (!capturedOut.isUsed() && bodyResult != null && !(bodyResult instanceof Writer)) {
      return bodyResult;
    }
    return capturedOut.getBuffer();
  }
  finally {
    GroovyPageOutputStack.currentStack().pop();
  }
}
