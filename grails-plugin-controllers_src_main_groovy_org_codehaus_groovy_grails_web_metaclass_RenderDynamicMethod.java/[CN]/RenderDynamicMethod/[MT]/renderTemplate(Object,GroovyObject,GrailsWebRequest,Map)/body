{
  GSPResponseWriter out=createResponseWriter(webRequest);
  boolean renderView;
  boolean hasModel=argMap.containsKey(ARGUMENT_MODEL);
  Object modelObject=null;
  if (hasModel) {
    modelObject=argMap.get(ARGUMENT_MODEL);
  }
  String templateName=argMap.get(ARGUMENT_TEMPLATE).toString();
  String contextPath=getContextPath(webRequest,argMap);
  String var=null;
  if (argMap.containsKey(ARGUMENT_VAR)) {
    var=String.valueOf(argMap.get(ARGUMENT_VAR));
  }
  String templateUri=webRequest.getAttributes().getTemplateURI(controller,templateName);
  GroovyPagesTemplateEngine engine=webRequest.getAttributes().getPagesTemplateEngine();
  try {
    Template t=engine.createTemplateForUri(new String[]{GrailsResourceUtils.appendPiecesForUri(contextPath,templateUri),GrailsResourceUtils.appendPiecesForUri(contextPath,"/grails-app/views/",templateUri)});
    if (t == null) {
      throw new ControllerExecutionException("Unable to load template for uri [" + templateUri + "]. Template not found.");
    }
    if (t instanceof GroovyPageTemplate) {
      ((GroovyPageTemplate)t).setAllowSettingContentType(true);
    }
    Map binding=new HashMap();
    if (argMap.containsKey(ARGUMENT_BEAN)) {
      Object bean=argMap.get(ARGUMENT_BEAN);
      if (hasModel) {
        if (modelObject instanceof Map) {
          setTemplateModel(webRequest,binding,(Map)modelObject);
        }
      }
      renderTemplateForBean(t,binding,bean,var,out);
    }
 else     if (argMap.containsKey(ARGUMENT_COLLECTION)) {
      Object colObject=argMap.get(ARGUMENT_COLLECTION);
      if (hasModel) {
        if (modelObject instanceof Map) {
          setTemplateModel(webRequest,binding,(Map)modelObject);
        }
      }
      renderTemplateForCollection(t,binding,colObject,var,out);
    }
 else     if (hasModel) {
      if (modelObject instanceof Map) {
        setTemplateModel(webRequest,binding,(Map)modelObject);
      }
      renderTemplateForModel(t,modelObject,target,out);
    }
 else {
      Writable w=t.make(new BeanMap(target));
      w.writeTo(out);
    }
    out.flush();
    renderView=false;
  }
 catch (  GroovyRuntimeException gre) {
    throw new ControllerExecutionException("Error rendering template [" + templateName + "]: "+ gre.getMessage(),gre);
  }
catch (  IOException ioex) {
    throw new ControllerExecutionException("I/O error executing render method for arguments [" + argMap + "]: "+ ioex.getMessage(),ioex);
  }
  return renderView;
}
