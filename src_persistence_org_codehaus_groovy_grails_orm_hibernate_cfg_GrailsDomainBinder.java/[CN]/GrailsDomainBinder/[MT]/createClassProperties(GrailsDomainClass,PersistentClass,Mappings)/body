{
  GrailsDomainClassProperty[] persistentProperties=domainClass.getPersistentProperties();
  Table table=persistentClass.getTable();
  Mapping gormMapping=getMapping(domainClass.getClazz());
  for (int i=0; i < persistentProperties.length; i++) {
    GrailsDomainClassProperty currentGrailsProp=persistentProperties[i];
    boolean isBidirectionalManyToOne=isBidirectionalManyToOne(currentGrailsProp);
    if (currentGrailsProp.isInherited() && !isBidirectionalManyToOne)     continue;
 else     if (currentGrailsProp.isInherited() && isBidirectionalManyToOne && currentGrailsProp.isCircular())     continue;
    if (isCompositeIdProperty(gormMapping,currentGrailsProp))     continue;
    if (LOG.isDebugEnabled())     LOG.debug("[GrailsDomainBinder] Binding persistent property [" + currentGrailsProp.getName() + "]");
    Value value;
    CollectionType collectionType=CollectionType.collectionTypeForClass(currentGrailsProp.getType());
    Class userType=getUserType(currentGrailsProp);
    if (collectionType != null) {
      Collection collection=collectionType.create(currentGrailsProp,persistentClass,EMPTY_PATH,mappings);
      mappings.addCollection(collection);
      value=collection;
    }
 else     if (currentGrailsProp.isManyToOne()) {
      if (LOG.isDebugEnabled())       LOG.debug("[GrailsDomainBinder] Binding property [" + currentGrailsProp.getName() + "] as ManyToOne");
      value=new ManyToOne(table);
      bindManyToOne(currentGrailsProp,(ManyToOne)value,EMPTY_PATH,mappings);
    }
 else     if (currentGrailsProp.isOneToOne() && !isUserType(userType)) {
      if (LOG.isDebugEnabled())       LOG.debug("[GrailsDomainBinder] Binding property [" + currentGrailsProp.getName() + "] as OneToOne");
      value=new ManyToOne(table);
      bindManyToOne(currentGrailsProp,(ManyToOne)value,EMPTY_PATH,mappings);
    }
 else     if (currentGrailsProp.isEmbedded()) {
      value=new Component(persistentClass);
      bindComponent((Component)value,currentGrailsProp,true,mappings);
    }
 else {
      if (LOG.isDebugEnabled())       LOG.debug("[GrailsDomainBinder] Binding property [" + currentGrailsProp.getName() + "] as SimpleValue");
      value=new SimpleValue(table);
      bindSimpleValue(persistentProperties[i],(SimpleValue)value,EMPTY_PATH,mappings);
    }
    if (value != null) {
      Property property=createProperty(value,persistentClass,persistentProperties[i],mappings);
      persistentClass.addProperty(property);
    }
  }
}
