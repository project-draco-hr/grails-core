{
  if (node instanceof Proxy) {
    if (!uniqueResult) {
      resultProxy.setAdaptee(this.criteria.list());
    }
 else {
      resultProxy.setAdaptee(this.criteria.uniqueResult());
    }
    this.criteria=null;
    if (!this.participate) {
      this.session.close();
    }
  }
 else   if (node.equals(AND) || node.equals(OR)) {
    if (this.logicalExpressionArgs.size() < 2)     throwRuntimeException(new IllegalArgumentException("Logical expression [" + node + "] must contain at least 2 expressions"));
    Criterion lhs=(Criterion)this.logicalExpressionArgs.remove(this.logicalExpressionArgs.size() - 1);
    Criterion rhs=(Criterion)this.logicalExpressionArgs.remove(this.logicalExpressionArgs.size() - 1);
    if (parent instanceof Proxy) {
      if (node.equals(AND))       this.criteria.add(Restrictions.and(lhs,rhs));
 else       this.criteria.add(Restrictions.or(lhs,rhs));
    }
 else     if (parent.equals(AND) || parent.equals(OR)) {
      if (node.equals(AND))       this.logicalExpressionArgs.add(Restrictions.and(lhs,rhs));
 else       this.logicalExpressionArgs.add(Restrictions.or(lhs,rhs));
      this.logicalExpressions.remove(this.logicalExpressions.size() - 1);
    }
  }
 else   if (node.equals(NOT)) {
    if (this.logicalExpressionArgs.size() < 1)     throwRuntimeException(new IllegalArgumentException("Logical expression [" + node + "] must contain at least 1 expression"));
    Criterion c=(Criterion)this.logicalExpressionArgs.remove(this.logicalExpressionArgs.size() - 1);
    if (parent instanceof Proxy) {
      this.criteria.add(Restrictions.not(c));
    }
 else     if (parent.equals(AND) || parent.equals(OR) || parent.equals(NOT)) {
      this.logicalExpressionArgs.add(Restrictions.not(c));
      this.logicalExpressions.remove(this.logicalExpressions.size() - 1);
    }
  }
  super.nodeCompleted(parent,node);
}
