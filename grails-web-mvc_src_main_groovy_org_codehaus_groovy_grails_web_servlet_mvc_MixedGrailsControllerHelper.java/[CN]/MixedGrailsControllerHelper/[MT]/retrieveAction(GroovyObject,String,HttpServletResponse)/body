{
  if (controller == null || actionName == null) {
    return sendNotFoundError(response);
  }
  Pair<Class<?>,String> key=new Pair<Class<?>,String>(controller.getClass(),actionName);
  Method mAction=controllerToActionMethodCache.get(key);
  if (mAction != null) {
    if (mAction != NULL_METHOD_HOLDER) {
      return mAction;
    }
 else {
      return sendNotFoundError(response);
    }
  }
  MetaProperty metaProperty=controllerToMetaPropertyCache.get(key);
  if (metaProperty == null) {
    Class<?> controllerClass=AopProxyUtils.ultimateTargetClass(controller);
    mAction=ReflectionUtils.findMethod(controllerClass,actionName,NOARGS);
    if (mAction != null) {
      ReflectionUtils.makeAccessible(mAction);
      if (mAction.getAnnotation(Action.class) != null) {
        if (!developmentMode) {
          controllerToActionMethodCache.put(key,mAction);
        }
        return mAction;
      }
 else       if (!developmentMode) {
        controllerToActionMethodCache.put(key,NULL_METHOD_HOLDER);
      }
    }
  }
  if (metaProperty == null) {
    metaProperty=controller.getMetaClass().getMetaProperty(actionName);
    if (!developmentMode) {
      if (metaProperty != null) {
        controllerToMetaPropertyCache.put(key,metaProperty);
      }
 else {
        controllerToMetaPropertyCache.put(key,NULL_META_PROPERTY_HOLDER);
      }
    }
  }
  Object closureAction=null;
  if (metaProperty != null) {
    if (metaProperty == NULL_META_PROPERTY_HOLDER) {
      return sendNotFoundError(response);
    }
    if (metaProperty.getType() == Object.class || Closure.class.isAssignableFrom(metaProperty.getType())) {
      closureAction=metaProperty.getProperty(controller);
    }
 else {
      log.error("Invalid type for " + actionName + " in "+ controller.getClass().getName()+ ". type is "+ metaProperty.getType());
      if (!developmentMode) {
        controllerToMetaPropertyCache.put(key,NULL_META_PROPERTY_HOLDER);
      }
    }
  }
  if (!(closureAction instanceof Closure)) {
    return sendNotFoundError(response);
  }
  return closureAction;
}
