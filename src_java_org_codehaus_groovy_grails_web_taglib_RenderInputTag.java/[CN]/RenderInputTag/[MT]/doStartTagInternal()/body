{
  GrailsDomainClass domainClass=(GrailsDomainClass)grailsApplication.getArtefact(DomainClassArtefactHandler.TYPE,bean.getClass().getName());
  if (domainClass != null) {
    constrainedProperties=domainClass.getConstrainedProperties();
  }
  beanWrapper=new BeanWrapperImpl(bean);
  PropertyDescriptor pd=null;
  try {
    pd=beanWrapper.getPropertyDescriptor(property);
  }
 catch (  BeansException e) {
    throw new GrailsTagException("Property [" + property + "] is not a valid bean property in tag [renderInput]:"+ e.getMessage(),e);
  }
  GroovyPagesTemplateEngine engine=(GroovyPagesTemplateEngine)servletContext.getAttribute(GrailsApplicationAttributes.GSP_TEMPLATE_ENGINE);
  Template t=null;
  try {
    String uri=findUriForType(pd.getPropertyType());
    t=engine.createTemplate(uri);
    if (t == null) {
      throw new GrailsTagException("Type [" + pd.getPropertyType() + "] is unsupported by tag [scaffold]. No template found.");
    }
    Map<String,Object> binding=new HashMap<String,Object>();
    binding.put("name",pd.getName());
    binding.put("value",beanWrapper.getPropertyValue(property));
    if (constrainedProperties.containsKey(property)) {
      binding.put("constraints",constrainedProperties.get(property));
    }
 else {
      binding.put("constraints",null);
    }
    t.make(binding).writeTo(out);
  }
 catch (  IOException e) {
    throw new GrailsTagException("I/O error writing tag [" + getName() + "] to writer: "+ e.getMessage(),e);
  }
}
