{
  GrailsDomainClassProperty[] persistentProperties=domainClass.getPersistentProperties();
  Table table=persistentClass.getTable();
  Mapping gormMapping=getMapping(domainClass.getClazz());
  for (  GrailsDomainClassProperty currentGrailsProp : persistentProperties) {
    boolean isBidirectionalManyToOne=isBidirectionalManyToOne(currentGrailsProp);
    if (currentGrailsProp.isInherited())     continue;
    if (currentGrailsProp.isInherited() && isBidirectionalManyToOne && currentGrailsProp.isCircular())     continue;
    if (isCompositeIdProperty(gormMapping,currentGrailsProp))     continue;
    if (isIdentityProperty(gormMapping,currentGrailsProp))     continue;
    if (LOG.isDebugEnabled())     LOG.debug("[GrailsDomainBinder] Binding persistent property [" + currentGrailsProp.getName() + "]");
    Value value=null;
    CollectionType collectionType=CollectionType.collectionTypeForClass(currentGrailsProp.getType());
    Class<?> userType=getUserType(currentGrailsProp);
    if (collectionType != null) {
      Collection collection=collectionType.create(currentGrailsProp,persistentClass,EMPTY_PATH,mappings);
      mappings.addCollection(collection);
      value=collection;
    }
 else     if (currentGrailsProp.isEnum()) {
      value=new SimpleValue(mappings,table);
      bindEnumType(currentGrailsProp,(SimpleValue)value,EMPTY_PATH);
    }
 else     if (currentGrailsProp.isManyToOne()) {
      if (LOG.isDebugEnabled())       LOG.debug("[GrailsDomainBinder] Binding property [" + currentGrailsProp.getName() + "] as ManyToOne");
      value=new ManyToOne(mappings,table);
      bindManyToOne(currentGrailsProp,(ManyToOne)value,EMPTY_PATH,mappings);
    }
 else     if (currentGrailsProp.isOneToOne() && userType == null) {
      if (LOG.isDebugEnabled())       LOG.debug("[GrailsDomainBinder] Binding property [" + currentGrailsProp.getName() + "] as OneToOne");
      if (currentGrailsProp.isHasOne() && !currentGrailsProp.isBidirectional()) {
        throw new MappingException("hasOne property [" + currentGrailsProp.getDomainClass().getName() + "."+ currentGrailsProp.getName()+ "] is not bidirectional. Specify the other side of the relationship!");
      }
 else       if (canBindOneToOneWithSingleColumnAndForeignKey(currentGrailsProp)) {
        value=new OneToOne(mappings,table,persistentClass);
        bindOneToOne(currentGrailsProp,(OneToOne)value,EMPTY_PATH);
      }
 else {
        if (currentGrailsProp.isHasOne() && currentGrailsProp.isBidirectional()) {
          value=new OneToOne(mappings,table,persistentClass);
          bindOneToOne(currentGrailsProp,(OneToOne)value,EMPTY_PATH);
        }
 else {
          value=new ManyToOne(mappings,table);
          bindManyToOne(currentGrailsProp,(ManyToOne)value,EMPTY_PATH,mappings);
        }
      }
    }
 else     if (currentGrailsProp.isEmbedded()) {
      value=new Component(mappings,persistentClass);
      bindComponent((Component)value,currentGrailsProp,true,mappings);
    }
 else {
      if (LOG.isDebugEnabled())       LOG.debug("[GrailsDomainBinder] Binding property [" + currentGrailsProp.getName() + "] as SimpleValue");
      value=new SimpleValue(mappings,table);
      bindSimpleValue(currentGrailsProp,null,(SimpleValue)value,EMPTY_PATH,mappings);
    }
    if (value != null) {
      Property property=createProperty(value,persistentClass,currentGrailsProp,mappings);
      persistentClass.addProperty(property);
    }
  }
  bindNaturalIdentifier(table,gormMapping,persistentClass);
}
