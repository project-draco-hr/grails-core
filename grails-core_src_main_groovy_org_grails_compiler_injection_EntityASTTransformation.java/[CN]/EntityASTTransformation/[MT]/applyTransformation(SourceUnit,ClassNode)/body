{
  if (GrailsASTUtils.isApplied(classNode,EntityASTTransformation.class)) {
    return;
  }
  GrailsASTUtils.markApplied(classNode,EntityASTTransformation.class);
  GrailsDomainClassInjector domainInjector=new DefaultGrailsDomainClassInjector();
  domainInjector.performInjectionOnAnnotatedEntity(classNode);
  ClassInjector[] classInjectors=GrailsAwareInjectionOperation.getClassInjectors();
  final List<ClassInjector> domainInjectors=ArtefactTypeAstTransformation.findInjectors(DomainClassArtefactHandler.TYPE,classInjectors);
  for (  ClassInjector injector : domainInjectors) {
    try {
      injector.performInjection(sourceUnit,classNode);
    }
 catch (    RuntimeException e) {
      try {
        GrailsConsole.getInstance().error("Error occurred calling AST injector [" + injector.getClass().getName() + "]: "+ e.getMessage(),e);
      }
 catch (      Throwable t) {
      }
      throw e;
    }
  }
  if (compilationUnit != null) {
    GrailsAwareTraitInjectionOperation grailsTraitInjector=new GrailsAwareTraitInjectionOperation(compilationUnit);
    List<TraitInjector> traitInjectors=grailsTraitInjector.getTraitInjectors();
    List<TraitInjector> injectorsToUse=new ArrayList<TraitInjector>();
    for (    TraitInjector injector : traitInjectors) {
      List<String> artefactTypes=Arrays.asList(injector.getArtefactTypes());
      if (artefactTypes.contains(DomainClassArtefactHandler.TYPE)) {
        injectorsToUse.add(injector);
      }
    }
    grailsTraitInjector.performTraitInjection(sourceUnit,classNode,injectorsToUse);
  }
}
