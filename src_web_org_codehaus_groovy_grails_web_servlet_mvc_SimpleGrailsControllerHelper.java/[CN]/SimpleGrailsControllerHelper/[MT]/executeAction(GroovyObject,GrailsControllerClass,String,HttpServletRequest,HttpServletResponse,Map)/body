{
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(application.getClassLoader());
    boolean executeAction=invokeBeforeInterceptor(controller,controllerClass);
    if (!executeAction)     return null;
    Closure action;
    try {
      action=(Closure)controller.getProperty(actionName);
      Object returnValue=handleAction(controller,action,request,response,params);
      initChainModel(controller);
      if (response.isCommitted()) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Response has been redirected, returning null model and view");
        }
        invokeAfterInterceptor(controllerClass,controller,null);
        return null;
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Action [" + actionName + "] executed with result ["+ returnValue+ "] and view name ["+ viewName+ "]");
        }
        ModelAndView mv=handleActionResponse(controller,returnValue,actionName,viewName);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Action [" + actionName + "] handled, created Spring model and view ["+ mv+ "]");
        }
        boolean returnModelAndView=invokeAfterInterceptor(controllerClass,controller,mv);
        return returnModelAndView ? mv : null;
      }
    }
 catch (    MissingPropertyException mpe) {
      if (controllerClass.isScaffolding())       throw new IllegalStateException("Scaffolder supports action [" + actionName + "] for controller ["+ controllerClass.getFullName()+ "] but getAction returned null!");
 else {
        try {
          response.sendError(HttpServletResponse.SC_NOT_FOUND);
          return null;
        }
 catch (        IOException e) {
          throw new ControllerExecutionException("I/O error sending 404 error",e);
        }
      }
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(cl);
  }
}
