{
  if (arguments.length == 0)   return getHibernateTemplate().loadAll(clazz);
  final Object arg=arguments[0] instanceof GString ? arguments[0].toString() : arguments[0];
  if (arg instanceof String) {
    final String query=((String)arg).trim();
    final String shortName=GrailsClassUtils.getShortName(clazz);
    if (!query.matches("from [" + clazz.getName() + "|"+ shortName+ "].*")) {
      throw new GrailsQueryException("Invalid query [" + query + "] for domain class ["+ clazz+ "]");
    }
    return super.getHibernateTemplate().executeFind(new HibernateCallback(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Query q=session.createQuery(query);
        Object[] queryArgs=null;
        int max;
        int offset;
        if (arguments.length > 1) {
          if (arguments[1] instanceof List) {
            queryArgs=((List)arguments[1]).toArray();
          }
 else           if (arguments[1].getClass().isArray()) {
            queryArgs=(Object[])arguments[1];
          }
        }
        max=retrieveMaxValue(arguments);
        offset=retrieveOffsetValue(arguments);
        if (queryArgs != null) {
          for (int i=0; i < queryArgs.length; i++) {
            if (queryArgs[0] instanceof GString) {
              q.setParameter(i,queryArgs[i].toString());
            }
 else {
              q.setParameter(i,queryArgs[i]);
            }
          }
        }
        if (max > 0) {
          q.setMaxResults(max);
        }
        if (offset > 0) {
          q.setFirstResult(offset);
        }
        return q.list();
      }
      private int retrieveMaxValue(      Object[] arguments){
        int result=-1;
        if (arguments.length > 1) {
          result=retrieveInt(ARGUMENT_MAX,arguments[1]);
          if (arguments.length > 2 && result == -1) {
            result=retrieveInt(ARGUMENT_MAX,arguments[2]);
          }
        }
        return result;
      }
      private int retrieveOffsetValue(      Object[] arguments){
        int result=-1;
        if (arguments.length > 1) {
          result=retrieveInt(ARGUMENT_OFFSET,arguments[1]);
          if (arguments.length > 2 && result == -1) {
            result=retrieveInt(ARGUMENT_OFFSET,arguments[2]);
          }
        }
        return result;
      }
      private int retrieveInt(      String name,      Object arg){
        if (arg instanceof Integer) {
          return ((Integer)arg).intValue();
        }
 else         if (arg instanceof Map) {
          Object value=((Map)arg).get(name);
          if (value instanceof Integer) {
            return ((Integer)value).intValue();
          }
        }
        return -1;
      }
    }
);
  }
  if (clazz.isAssignableFrom(arg.getClass())) {
    return super.getHibernateTemplate().executeFind(new HibernateCallback(){
      public Object doInHibernate(      Session session) throws HibernateException, SQLException {
        Example example=Example.create(arg).ignoreCase();
        Criteria crit=session.createCriteria(clazz);
        crit.add(example);
        return crit.list();
      }
    }
);
  }
  throw new MissingMethodException(methodName,clazz,arguments);
}
