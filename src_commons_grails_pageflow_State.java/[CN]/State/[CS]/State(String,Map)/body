{
  this(id);
  Assert.notNull(attributes);
  for (Iterator iter=attributes.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    if (ACTION.equals(entry.getKey())) {
      if (entry.getValue() == null) {
        throw new IllegalArgumentException("Value for property [" + ACTION + "] on state ["+ id+ "] must not be null!");
      }
 else       if (entry.getValue() instanceof Class) {
        actionClass=(Class)entry.getValue();
      }
 else       if (entry.getValue() instanceof Action) {
        action=(Action)entry.getValue();
      }
 else       if (entry.getValue() instanceof Map) {
        actionFormDetails=(Map)entry.getValue();
      }
 else       if (entry.getValue() instanceof Closure) {
        actionClosure=(Closure)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ ACTION+ "] on state ["+ id+ "]!");
      }
    }
 else     if (VIEW.equals(entry.getKey())) {
      if (entry.getValue() == null) {
        throw new IllegalArgumentException("Value for property [" + VIEW + "] on state ["+ id+ "] must not be null!");
      }
 else       if (entry.getValue() instanceof String) {
        viewName=(String)entry.getValue();
      }
 else       if (entry.getValue() instanceof Closure) {
        viewClosure=(Closure)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ VIEW+ "] on state ["+ id+ "]!");
      }
    }
 else     if (DECISION.equals(entry.getKey())) {
      if (entry.getValue() == null) {
        throw new IllegalArgumentException("Value for property [" + DECISION + "] on state ["+ id+ "] must not be null!");
      }
 else       if (entry.getValue() instanceof String) {
        decisionExpression=(String)entry.getValue();
      }
 else       if (entry.getValue() instanceof Closure) {
        decisionClosure=(Closure)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ DECISION+ "] on state ["+ id+ "]!");
      }
    }
 else     if (SUBFLOW.equals(entry.getKey())) {
      if (entry.getValue() == null) {
        throw new IllegalArgumentException("Value for property [" + SUBFLOW + "] on state ["+ id+ "] must not be null!");
      }
 else       if (entry.getValue() instanceof String) {
        subFlowId=(String)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ SUBFLOW+ "] on state ["+ id+ "]!");
      }
    }
 else     if (PROPERTIES.equals(entry.getKey())) {
      if (entry.getValue() == null) {
      }
 else       if (entry.getValue() instanceof Map) {
        actionProperties=(Map)entry.getValue();
        attributeMapperProperties=(Map)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsuppored type [" + entry.getValue().getClass().getName() + "] for attribute ["+ PROPERTIES+ "] on state ["+ id+ "]!");
      }
    }
 else     if (MODEL.equals(entry.getKey())) {
      if (entry.getValue() == null) {
      }
 else       if (entry.getValue() instanceof Map) {
        viewModel=(Map)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ MODEL+ "] on state ["+ id+ "]!");
      }
    }
 else     if (INPUT.equals(entry.getKey())) {
      if (entry.getValue() == null) {
      }
 else       if (entry.getValue() instanceof Closure) {
        subFlowInput=(Closure)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ INPUT+ "] on state ["+ id+ "]!");
      }
    }
 else     if (OUTPUT.equals(entry.getKey())) {
      if (entry.getValue() == null) {
      }
 else       if (entry.getValue() instanceof Closure) {
        subFlowOutput=(Closure)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ OUTPUT+ "] on state ["+ id+ "]!");
      }
    }
 else     if (MAPPER.equals(entry.getKey())) {
      if (entry.getValue() == null) {
      }
 else       if (entry.getValue() instanceof Class) {
        attributeMapperClass=(Class)entry.getValue();
      }
 else       if (entry.getValue() instanceof FlowAttributeMapper) {
        attributeMapper=(FlowAttributeMapper)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] attribute ["+ MAPPER+ "] on state ["+ id+ "]!");
      }
    }
 else     if (TRUE_STATE.equals(entry.getKey())) {
      if (entry.getValue() == null) {
        throw new IllegalArgumentException("Value for property [" + TRUE_STATE + "] on state ["+ id+ "] must not be null!");
      }
 else       if (entry.getValue() instanceof String) {
        decisionTrueStateId=(String)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ TRUE_STATE+ "] on state ["+ id+ "]!");
      }
    }
 else     if (FALSE_STATE.equals(entry.getKey())) {
      if (entry.getValue() == null) {
        throw new IllegalArgumentException("Value for property [" + FALSE_STATE + "] on state ["+ id+ "] must not be null!");
      }
 else       if (entry.getValue() instanceof String) {
        decisionFalseStateId=(String)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ FALSE_STATE+ "] on state ["+ id+ "]!");
      }
    }
 else     if (METHOD.equals(entry.getKey())) {
      if (entry.getValue() == null) {
        throw new IllegalArgumentException("Value for property [" + METHOD + "] on state ["+ id+ "] must not be null!");
      }
 else       if (entry.getValue() instanceof String) {
        actionMethod=(String)entry.getValue();
      }
 else {
        throw new IllegalArgumentException("Unsupported type [" + entry.getValue().getClass().getName() + "] for attribute ["+ METHOD+ "] on state ["+ id+ "]!");
      }
    }
 else {
      throw new IllegalArgumentException("Unknow property [" + entry.getValue() + "] on state ["+ id+ "]!");
    }
  }
}
