{
  Assert.state(grailsApplication != null,"Property [grailsApplication] must be set!");
  List urlMappings=new ArrayList();
  List excludePatterns=new ArrayList();
  GrailsClass[] mappings=grailsApplication.getArtefacts(UrlMappingsArtefactHandler.TYPE);
  final DefaultUrlMappingEvaluator defaultUrlMappingEvaluator=new DefaultUrlMappingEvaluator(servletContext);
  defaultUrlMappingEvaluator.setPluginManager(pluginManager);
  mappingEvaluator=defaultUrlMappingEvaluator;
  if (mappings.length == 0) {
    urlMappings.addAll(mappingEvaluator.evaluateMappings(DefaultUrlMappings.getMappings()));
  }
 else {
    for (    GrailsClass mapping : mappings) {
      GrailsUrlMappingsClass mappingClass=(GrailsUrlMappingsClass)mapping;
      List grailsClassMappings;
      if (Script.class.isAssignableFrom(mappingClass.getClass())) {
        grailsClassMappings=mappingEvaluator.evaluateMappings(mappingClass.getClazz());
      }
 else {
        grailsClassMappings=mappingEvaluator.evaluateMappings(mappingClass.getMappingsClosure());
      }
      urlMappings.addAll(grailsClassMappings);
      if (mappingClass.getExcludePatterns() != null) {
        excludePatterns.addAll(mappingClass.getExcludePatterns());
      }
    }
  }
  DefaultUrlMappingsHolder defaultUrlMappingsHolder=new DefaultUrlMappingsHolder(urlMappings,excludePatterns,true);
  Map flatConfig=grailsApplication.getFlatConfig();
  Integer cacheSize=mapGetInteger(flatConfig,URL_MAPPING_CACHE_MAX_SIZE);
  if (cacheSize != null) {
    defaultUrlMappingsHolder.setMaxWeightedCacheCapacity(cacheSize);
  }
  Integer urlCreatorCacheSize=mapGetInteger(flatConfig,URL_CREATOR_CACHE_MAX_SIZE);
  if (urlCreatorCacheSize != null) {
    defaultUrlMappingsHolder.setUrlCreatorMaxWeightedCacheCapacity(urlCreatorCacheSize);
  }
  defaultUrlMappingsHolder.initialize();
  urlMappingsHolder=defaultUrlMappingsHolder;
}
