{
  GrailsASTUtils.addEnhancedAnnotation(controllerClass,DefaultGrailsControllerClass.ALLOWED_HTTP_METHODS_PROPERTY);
  final BlockStatement checkAllowedMethodsBlock=new BlockStatement();
  final FieldNode allowedMethodsField=controllerClass.getField(DefaultGrailsControllerClass.ALLOWED_HTTP_METHODS_PROPERTY);
  if (allowedMethodsField != null) {
    final Expression initialAllowedMethodsExpression=allowedMethodsField.getInitialExpression();
    if (initialAllowedMethodsExpression instanceof MapExpression) {
      final List<String> allowedMethodNames=new ArrayList<String>();
      final MapExpression allowedMethodsMapExpression=(MapExpression)initialAllowedMethodsExpression;
      final List<MapEntryExpression> allowedMethodsMapEntryExpressions=allowedMethodsMapExpression.getMapEntryExpressions();
      final String methodName=methodNode.getName();
      for (      MapEntryExpression allowedMethodsMapEntryExpression : allowedMethodsMapEntryExpressions) {
        final Expression allowedMethodsMapEntryKeyExpression=allowedMethodsMapEntryExpression.getKeyExpression();
        if (allowedMethodsMapEntryKeyExpression instanceof ConstantExpression) {
          final ConstantExpression allowedMethodsMapKeyConstantExpression=(ConstantExpression)allowedMethodsMapEntryKeyExpression;
          final Object allowedMethodsMapKeyValue=allowedMethodsMapKeyConstantExpression.getValue();
          if (methodName.equals(allowedMethodsMapKeyValue)) {
            final Expression allowedMethodsMapEntryValueExpression=allowedMethodsMapEntryExpression.getValueExpression();
            if (allowedMethodsMapEntryValueExpression instanceof ListExpression) {
              final ListExpression allowedMethodsEntryListExpression=(ListExpression)allowedMethodsMapEntryValueExpression;
              final List<Expression> listExpressions=allowedMethodsEntryListExpression.getExpressions();
              for (              Expression expression : listExpressions) {
                if (expression instanceof ConstantExpression) {
                  final ConstantExpression constantListValue=(ConstantExpression)expression;
                  allowedMethodNames.add(constantListValue.getValue().toString());
                }
              }
            }
 else             if (allowedMethodsMapEntryValueExpression instanceof ConstantExpression) {
              final ConstantExpression contantValue=(ConstantExpression)allowedMethodsMapEntryValueExpression;
              allowedMethodNames.add(contantValue.getValue().toString());
            }
            break;
          }
        }
      }
      final int numberOfAllowedMethods=allowedMethodNames.size();
      if (numberOfAllowedMethods > 0) {
        final PropertyExpression responsePropertyExpression=new PropertyExpression(new VariableExpression("this"),"response");
        final PropertyExpression requestPropertyExpression=new PropertyExpression(new VariableExpression("this"),"request");
        final PropertyExpression requestMethodExpression=new PropertyExpression(requestPropertyExpression,"method");
        BooleanExpression isValidRequestMethod=new BooleanExpression(new MethodCallExpression(requestMethodExpression,"equalsIgnoreCase",new ConstantExpression(allowedMethodNames.get(0))));
        for (int x=1; x < numberOfAllowedMethods; x++) {
          isValidRequestMethod=new BooleanExpression(new BinaryExpression(isValidRequestMethod,Token.newSymbol(Types.LOGICAL_OR,0,0),new MethodCallExpression(requestMethodExpression,"equalsIgnoreCase",new ConstantExpression(allowedMethodNames.get(x)))));
        }
        final MethodCallExpression sendErrorMethodCall=new MethodCallExpression(responsePropertyExpression,"sendError",new ConstantExpression(HttpServletResponse.SC_METHOD_NOT_ALLOWED));
        final ReturnStatement returnStatement=new ReturnStatement(new ConstantExpression(null));
        final BlockStatement blockToSendError=new BlockStatement();
        blockToSendError.addStatement(new ExpressionStatement(sendErrorMethodCall));
        blockToSendError.addStatement(returnStatement);
        final IfStatement ifStatement=new IfStatement(isValidRequestMethod,new ExpressionStatement(new EmptyExpression()),blockToSendError);
        checkAllowedMethodsBlock.addStatement(ifStatement);
      }
    }
  }
  return checkAllowedMethodsBlock;
}
