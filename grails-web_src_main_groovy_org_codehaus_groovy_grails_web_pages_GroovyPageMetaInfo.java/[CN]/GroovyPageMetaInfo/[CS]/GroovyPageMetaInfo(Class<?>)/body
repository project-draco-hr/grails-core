{
  this();
  precompiledMode=true;
  this.pageClass=pageClass;
  contentType=(String)ReflectionUtils.getField(ReflectionUtils.findField(pageClass,GroovyPageParser.CONSTANT_NAME_CONTENT_TYPE),null);
  jspTags=(Map)ReflectionUtils.getField(ReflectionUtils.findField(pageClass,GroovyPageParser.CONSTANT_NAME_JSP_TAGS),null);
  lastModified=(Long)ReflectionUtils.getField(ReflectionUtils.findField(pageClass,GroovyPageParser.CONSTANT_NAME_LAST_MODIFIED),null);
  expressionCodecName=(String)ReflectionUtils.getField(ReflectionUtils.findField(pageClass,GroovyPageParser.CONSTANT_NAME_EXPRESSION_CODEC),null);
  staticCodecName=(String)ReflectionUtils.getField(ReflectionUtils.findField(pageClass,GroovyPageParser.CONSTANT_NAME_STATIC_CODEC),null);
  outCodecName=(String)ReflectionUtils.getField(ReflectionUtils.findField(pageClass,GroovyPageParser.CONSTANT_NAME_OUT_CODEC),null);
  try {
    readHtmlData();
  }
 catch (  IOException e) {
    throw new RuntimeException("Problem reading html data for page class " + pageClass,e);
  }
}
