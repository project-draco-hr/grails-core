{
  RuntimeSpringConfiguration springConfig=new DefaultRuntimeSpringConfiguration();
  BeanConfiguration domainClassBean=springConfig.createSingletonBean(MethodInvokingFactoryBean.class).addProperty("targetObject",new RuntimeBeanReference(GrailsApplication.APPLICATION_ID,true)).addProperty("targetMethod","getGrailsDomainClass").addProperty("arguments",grailsDomainClass.getFullName());
  context.registerBeanDefinition(grailsDomainClass.getFullName() + "DomainClass",domainClassBean.getBeanDefinition());
  Collection args=new ManagedList();
  args.add(new RuntimeBeanReference(grailsDomainClass.getFullName() + "DomainClass"));
  BeanConfiguration targetSourceBean=springConfig.createSingletonBean(HotSwappableTargetSource.class,args);
  context.registerBeanDefinition(grailsDomainClass.getFullName() + "TargetSource",targetSourceBean.getBeanDefinition());
  BeanConfiguration proxyBean=springConfig.createSingletonBean(ProxyFactoryBean.class).addProperty("targetSource",new RuntimeBeanReference(grailsDomainClass.getFullName() + "TargetSource")).addProperty("proxyInterfaces","org.codehaus.groovy.grails.commons.GrailsDomainClass");
  context.registerBeanDefinition(grailsDomainClass.getFullName() + "Proxy",proxyBean.getBeanDefinition());
  BeanConfiguration persistentClassBean=springConfig.createSingletonBean(MethodInvokingFactoryBean.class).addProperty("targetObject",new RuntimeBeanReference(grailsDomainClass.getFullName() + "Proxy")).addProperty("targetMethod","getClazz");
  context.registerBeanDefinition(grailsDomainClass.getFullName() + "PersistentClass",persistentClassBean.getBeanDefinition());
  BeanConfiguration validatorBean=springConfig.createSingletonBean(GrailsDomainClassValidator.class).addProperty("domainClass",new RuntimeBeanReference(grailsDomainClass.getFullName() + "Proxy")).addProperty(SESSION_FACTORY_BEAN,new RuntimeBeanReference(SESSION_FACTORY_BEAN)).addProperty(MESSAGE_SOURCE_BEAN,new RuntimeBeanReference(MESSAGE_SOURCE_BEAN));
  context.registerBeanDefinition(grailsDomainClass.getFullName() + "Validator",validatorBean.getBeanDefinition());
}
