{
  GrailsTaskClass[] grailsTaskClasses=application.getGrailsTasksClasses();
  Collection schedulerReferences=new ArrayList();
  for (int i=0; i < grailsTaskClasses.length; i++) {
    GrailsTaskClass grailsTaskClass=grailsTaskClasses[i];
    Bean taskClassBean=SpringConfigUtils.createSingletonBean(MethodInvokingFactoryBean.class);
    taskClassBean.setProperty("targetObject",SpringConfigUtils.createBeanReference("grailsApplication"));
    taskClassBean.setProperty("targetMethod",SpringConfigUtils.createLiteralValue("getGrailsTaskClass"));
    taskClassBean.setProperty("arguments",SpringConfigUtils.createLiteralValue(grailsTaskClass.getFullName()));
    beanReferences.add(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "Class",taskClassBean));
    Bean taskInstance=SpringConfigUtils.createSingletonBean();
    taskInstance.setFactoryBean(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "Class"));
    taskInstance.setFactoryMethod("newInstance");
    taskInstance.setAutowire("byName");
    beanReferences.add(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName(),taskInstance));
    Bean jobDetailFactoryBean=SpringConfigUtils.createSingletonBean(MethodInvokingJobDetailFactoryBean.class);
    jobDetailFactoryBean.setProperty("targetObject",SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName()));
    jobDetailFactoryBean.setProperty("targetMethod",SpringConfigUtils.createLiteralValue(GrailsTaskClassProperty.EXECUTE));
    jobDetailFactoryBean.setProperty("group",SpringConfigUtils.createLiteralValue(grailsTaskClass.getGroup()));
    beanReferences.add(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "JobDetail",jobDetailFactoryBean));
    if (!grailsTaskClass.isCronExpressionConfigured()) {
      Bean triggerBean=SpringConfigUtils.createSingletonBean(SimpleTriggerBean.class);
      triggerBean.setProperty("jobDetail",SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "JobDetail"));
      triggerBean.setProperty("startDelay",SpringConfigUtils.createLiteralValue(grailsTaskClass.getStartDelay()));
      triggerBean.setProperty("repeatInterval",SpringConfigUtils.createLiteralValue(grailsTaskClass.getTimeout()));
      beanReferences.add(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "SimpleTrigger",triggerBean));
      schedulerReferences.add(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "SimpleTrigger"));
    }
 else {
      Bean triggerBean=SpringConfigUtils.createSingletonBean(CronTriggerBean.class);
      triggerBean.setProperty("jobDetail",SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "JobDetail"));
      triggerBean.setProperty("cronExpression",SpringConfigUtils.createLiteralValue(grailsTaskClass.getCronExpression()));
      beanReferences.add(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "CronTrigger",triggerBean));
      schedulerReferences.add(SpringConfigUtils.createBeanReference(grailsTaskClass.getFullName() + "CronTrigger"));
    }
  }
  Bean schedulerFactoryBean=SpringConfigUtils.createSingletonBean(SchedulerFactoryBean.class);
  schedulerFactoryBean.setProperty("triggers",SpringConfigUtils.createList(schedulerReferences));
  beanReferences.add(SpringConfigUtils.createBeanReference("GrailsSchedulerBean",schedulerFactoryBean));
}
