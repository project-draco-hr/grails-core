{
  Errors errors=setupErrorsProperty(target);
  GrailsDomainClass domainClass=(GrailsDomainClass)application.getArtefact(DomainClassArtefactHandler.TYPE,target.getClass().getName());
  if (validator == null && domainClass != null) {
    validator=domainClass.getValidator();
  }
  if (validator == null) {
    return true;
  }
  Method method=ReflectionUtils.findMethod(domainClass.getClazz(),BEFORE_VALIDATE);
  if (method != null) {
    ReflectionUtils.makeAccessible(method);
    ReflectionUtils.invokeMethod(method,target);
  }
  Boolean valid=Boolean.TRUE;
  boolean evict=false;
  boolean deepValidate=true;
  Set validatedFields=null;
  if (arguments.length > 0) {
    if (arguments[0] instanceof Boolean) {
      evict=((Boolean)arguments[0]).booleanValue();
    }
    if (arguments[0] instanceof Map) {
      Map argsMap=(Map)arguments[0];
      if (argsMap.containsKey(ARGUMENT_DEEP_VALIDATE)) {
        deepValidate=GrailsClassUtils.getBooleanFromMap(ARGUMENT_DEEP_VALIDATE,argsMap);
      }
      evict=GrailsClassUtils.getBooleanFromMap(ARGUMENT_EVICT,argsMap);
    }
    if (arguments[0] instanceof List) {
      validatedFields=new HashSet((List)arguments[0]);
    }
  }
  if (deepValidate && (validator instanceof CascadingValidator)) {
    ((CascadingValidator)validator).validate(target,errors,deepValidate);
  }
 else {
    validator.validate(target,errors);
  }
  int oldErrorCount=errors.getErrorCount();
  errors=filterErrors(errors,validatedFields,target);
  if (errors.hasErrors()) {
    valid=Boolean.FALSE;
    if (evict) {
      if (getHibernateTemplate().contains(target)) {
        getHibernateTemplate().evict(target);
      }
    }
 else {
      setObjectToReadOnly(target);
    }
  }
 else {
    setObjectToReadWrite(target);
  }
  if (errors.getErrorCount() != oldErrorCount) {
    MetaClass metaClass=GroovySystem.getMetaClassRegistry().getMetaClass(target.getClass());
    metaClass.setProperty(target,ERRORS_PROPERTY,errors);
  }
  return valid;
}
