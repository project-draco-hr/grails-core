{
  Parameter[] parameterTypes=delegateMethod.getParameters();
  String declaredMethodName=delegateMethod.getName();
  if (classNode.hasDeclaredMethod(declaredMethodName,parameterTypes)) {
    return null;
  }
  BlockStatement methodBody=new BlockStatement();
  ArgumentListExpression arguments=new ArgumentListExpression();
  for (  Parameter parameterType : parameterTypes) {
    arguments.addExpression(new VariableExpression(parameterType.getName()));
  }
  MethodCallExpression methodCallExpression=new MethodCallExpression(expression,declaredMethodName,arguments);
  methodCallExpression.setMethodTarget(delegateMethod);
  ThrowStatement missingMethodException=createMissingMethodThrowable(classNode,delegateMethod);
  VariableExpression apiVar=addApiVariableDeclaration(expression,delegateMethod,methodBody);
  IfStatement ifStatement=createIfElseStatementForApiMethodCall(methodCallExpression,apiVar,missingMethodException);
  methodBody.addStatement(ifStatement);
  ClassNode returnType=nonGeneric(delegateMethod.getReturnType());
  if (METHOD_MISSING_METHOD_NAME.equals(declaredMethodName)) {
    declaredMethodName=STATIC_METHOD_MISSING_METHOD_NAME;
  }
  MethodNode methodNode=classNode.getDeclaredMethod(declaredMethodName,parameterTypes);
  if (methodNode == null) {
    methodNode=new MethodNode(declaredMethodName,Modifier.PUBLIC | Modifier.STATIC,returnType,copyParameters(parameterTypes),GrailsArtefactClassInjector.EMPTY_CLASS_ARRAY,methodBody);
    methodNode.addAnnotations(delegateMethod.getAnnotations());
    if (shouldAddMarkerAnnotation(markerAnnotation,methodNode)) {
      methodNode.addAnnotation(markerAnnotation);
    }
    classNode.addMethod(methodNode);
  }
  return methodNode;
}
