{
  for (; ; ) {
    int left=len - end1;
    if (left == 0) {
      end1++;
      return found(EOF,0);
    }
    char c=text.charAt(end1++);
    char c1=left > 1 ? text.charAt(end1) : 0;
    char c2=left > 2 ? text.charAt(end1 + 1) : 0;
    if (str1) {
      if (c == '\\')       end1++;
 else       if (c == '\'')       str1=false;
      continue;
    }
 else     if (str2) {
      if (c == '\\')       end1++;
 else       if (c == '"')       str2=false;
      continue;
    }
 else     if (!levelTokens.empty() && (c == ')' || c == '}' || c == ']') && levelTokens.peek().equals(c)) {
      levelTokens.pop();
      continue;
    }
 else     if (begin1 > 0 && (c == '{' || c == '(' || c == '[')) {
      if (c == '{') {
        levelTokens.push('}');
      }
 else       if (c == '(') {
        levelTokens.push(')');
      }
 else       if (c == '[' && !levelTokens.empty()) {
        levelTokens.push(']');
      }
      continue;
    }
switch (state) {
case HTML:
      if (isPotentialScriptletOrTag(c,left)) {
        if (isStartScriptletBlock(c1)) {
          if (c2 == '=') {
            return found(JEXPR,3);
          }
          if (c2 == '@') {
            return found(JDIRECT,3);
          }
          if (c2 == '!') {
            return found(JDECLAR,3);
          }
          if (isStartComment(c1,c2,left)) {
            if (skipJComment())             continue;
          }
          return found(JSCRIPT,2);
        }
        boolean bStartTag=!isClosingTag(c1);
        String tagNameSpace=getTagNamespace(bStartTag ? end1 : end1 + 1);
        if (isTagDefinition(tagNameSpace)) {
          if (bStartTag) {
            return foundStartOrEndTag(GSTART_TAG,tagNameSpace.length() + 2,tagNameSpace);
          }
          return foundStartOrEndTag(GEND_TAG,tagNameSpace.length() + 3,tagNameSpace);
        }
      }
 else       if (isStartOfGExpression(c,c1)) {
        return found(GEXPR,2);
      }
    if (isStartScriptletBlock(c) && c1 == '{') {
      if (c2 == '-' && left > 3 && text.charAt(end1 + 2) == '-') {
        if (skipGComment())         continue;
      }
      return found(GSCRIPT,2);
    }
  if (c == '!' && c1 == '{') {
    return found(GDECLAR,2);
  }
if (c == '@' && c1 == '{') {
  return found(GDIRECT,2);
}
break;
case JEXPR:
case JSCRIPT:
case JDIRECT:
case JDECLAR:
if (isStartScriptletBlock(c) && c1 == '>') {
return found(HTML,2);
}
break;
case GSTART_TAG:
if (isStartOfGExpression(c,c1)) {
return found(GTAG_EXPR,2);
}
if (c == '>') {
return found(HTML,1);
}
 else if (isClosingTag(c) && c1 == '>') {
return found(GEND_EMPTY_TAG,1);
}
break;
case GEND_TAG:
case GEND_EMPTY_TAG:
if (c == '>') {
return found(HTML,1);
}
break;
case GTAG_EXPR:
checkValidExpressionState(c,c1,left);
if (c == '{') exprBracketCount++;
 else if (c == '}') {
if (exprBracketCount > 0) {
exprBracketCount--;
}
 else {
return found(GSTART_TAG,1);
}
}
break;
case GEXPR:
checkValidExpressionState(c,c1,left);
case GDIRECT:
if (c == '}' && !str1 && !str2 && levelTokens.empty()) {
return found(HTML,1);
}
break;
case GSCRIPT:
if (c == '}' && isStartScriptletBlock(c1) && !str1 && !str2 && levelTokens.empty()) {
return found(HTML,2);
}
break;
case GDECLAR:
if (c == '}' && (c1 == '!' || isStartScriptletBlock(c1)) && !str1 && !str2 && levelTokens.empty()) {
return found(HTML,2);
}
break;
}
}
}
