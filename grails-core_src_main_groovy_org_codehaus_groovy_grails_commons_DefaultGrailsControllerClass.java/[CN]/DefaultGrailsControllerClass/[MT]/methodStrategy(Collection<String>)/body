{
  Class superClass=getClazz();
  while (superClass != null && superClass != Object.class && superClass != GroovyObject.class) {
    for (    Method method : superClass.getMethods()) {
      if (Modifier.isPublic(method.getModifiers()) && method.getAnnotation(Action.class) != null) {
        String methodName=method.getName();
        methodNames.add(methodName);
        configureMappingForMethodAction(methodName);
      }
    }
    superClass=superClass.getSuperclass();
  }
  if (!isActionMethod(defaultActionName) && methodNames.size() == 1) {
    defaultActionName=methodNames.iterator().next();
  }
}
