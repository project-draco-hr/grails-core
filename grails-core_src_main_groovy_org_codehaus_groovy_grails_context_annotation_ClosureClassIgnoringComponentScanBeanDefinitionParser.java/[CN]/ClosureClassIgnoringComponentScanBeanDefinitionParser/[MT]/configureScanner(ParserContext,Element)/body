{
  final ClassPathBeanDefinitionScanner scanner=super.configureScanner(parserContext,element);
  final ResourceLoader originalResourceLoader=parserContext.getReaderContext().getResourceLoader();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Scanning only this classloader:" + originalResourceLoader.getClassLoader());
  }
  ResourceLoader parentOnlyResourceLoader;
  try {
    parentOnlyResourceLoader=new ResourceLoader(){
      ClassLoader parentOnlyGetResourcesClassLoader=new ParentOnlyGetResourcesClassLoader(originalResourceLoader.getClassLoader());
      public Resource getResource(      String location){
        return originalResourceLoader.getResource(location);
      }
      public ClassLoader getClassLoader(){
        return parentOnlyGetResourcesClassLoader;
      }
    }
;
  }
 catch (  Throwable t) {
    parentOnlyResourceLoader=originalResourceLoader;
  }
  final PathMatchingResourcePatternResolver resourceResolver=new PathMatchingResourcePatternResolver(parentOnlyResourceLoader){
    @Override protected Resource[] findAllClassPathResources(    String location) throws IOException {
      Set<Resource> result=new LinkedHashSet<Resource>(16);
      @SuppressWarnings("unused") URL classesDir=null;
      final boolean warDeployed=Metadata.getCurrent().isWarDeployed();
      if (!warDeployed) {
        BuildSettings buildSettings=BuildSettingsHolder.getSettings();
        if (buildSettings != null && buildSettings.getClassesDir() != null) {
          classesDir=buildSettings.getClassesDir().toURI().toURL();
        }
      }
      String path=location;
      if (path.startsWith("/")) {
        path=path.substring(1);
      }
      Enumeration<URL> resourceUrls=getClassLoader().getResources(path);
      while (resourceUrls.hasMoreElements()) {
        URL url=resourceUrls.nextElement();
        if (LOG.isDebugEnabled()) {
          LOG.debug("Scanning URL " + url.toExternalForm() + " while searching for '"+ location+ "'");
        }
        result.add(convertClassLoaderURL(url));
      }
      return result.toArray(new Resource[result.size()]);
    }
  }
;
  resourceResolver.setPathMatcher(new AntPathMatcher(){
    @Override public boolean match(    String pattern,    String path){
      if (path.endsWith(".class")) {
        String filename=FilenameUtils.getBaseName(path);
        if (filename.indexOf("$") > -1)         return false;
      }
      return super.match(pattern,path);
    }
  }
);
  scanner.setResourceLoader(resourceResolver);
  return scanner;
}
